
LOT_Send.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003488  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003548  08003548  00013548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003580  08003580  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003580  08003580  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003580  08003580  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003580  08003580  00013580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003584  08003584  00013584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000010  08003598  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08003598  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a31e  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ea  00000000  00000000  0002a356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  0002bd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000740  00000000  00000000  0002c518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000112cc  00000000  00000000  0002cc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a40f  00000000  00000000  0003df24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00067c25  00000000  00000000  00048333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000aff58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001aec  00000000  00000000  000affa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003530 	.word	0x08003530

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003530 	.word	0x08003530

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fc91 	bl	8000b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f835 	bl	8000298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f923 	bl	8000478 <MX_GPIO_Init>
  MX_DMA_Init();
 8000232:	f000 f903 	bl	800043c <MX_DMA_Init>
  MX_ADC_Init();
 8000236:	f000 f875 	bl	8000324 <MX_ADC_Init>
  MX_USART2_UART_Init();
 800023a:	f000 f8cf 	bl	80003dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(Out_Port, Out_Pin, GPIO_PIN_RESET);
 800023e:	2380      	movs	r3, #128	; 0x80
 8000240:	00db      	lsls	r3, r3, #3
 8000242:	4812      	ldr	r0, [pc, #72]	; (800028c <main+0x6c>)
 8000244:	2200      	movs	r2, #0
 8000246:	0019      	movs	r1, r3
 8000248:	f001 fda2 	bl	8001d90 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (buttonFlag){
 800024c:	4b10      	ldr	r3, [pc, #64]	; (8000290 <main+0x70>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d0fb      	beq.n	800024c <main+0x2c>
		  uint32_t sample = pollADC();
 8000254:	f000 f9ce 	bl	80005f4 <pollADC>
 8000258:	0003      	movs	r3, r0
 800025a:	607b      	str	r3, [r7, #4]
		  sendSample(sample);
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	0018      	movs	r0, r3
 8000260:	f000 fa86 	bl	8000770 <sendSample>
		  numSamples++;
 8000264:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <main+0x74>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	3301      	adds	r3, #1
 800026a:	b2da      	uxtb	r2, r3
 800026c:	4b09      	ldr	r3, [pc, #36]	; (8000294 <main+0x74>)
 800026e:	701a      	strb	r2, [r3, #0]
		  buttonFlag = false;
 8000270:	4b07      	ldr	r3, [pc, #28]	; (8000290 <main+0x70>)
 8000272:	2200      	movs	r2, #0
 8000274:	701a      	strb	r2, [r3, #0]
		  if (numSamples==2){
 8000276:	4b07      	ldr	r3, [pc, #28]	; (8000294 <main+0x74>)
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	2b02      	cmp	r3, #2
 800027c:	d1e6      	bne.n	800024c <main+0x2c>
			  SendCheckPoint(numSamples);
 800027e:	4b05      	ldr	r3, [pc, #20]	; (8000294 <main+0x74>)
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	0018      	movs	r0, r3
 8000284:	f000 fa9c 	bl	80007c0 <SendCheckPoint>
	  if (buttonFlag){
 8000288:	e7e0      	b.n	800024c <main+0x2c>
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	48000400 	.word	0x48000400
 8000290:	20000178 	.word	0x20000178
 8000294:	20000179 	.word	0x20000179

08000298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000298:	b590      	push	{r4, r7, lr}
 800029a:	b091      	sub	sp, #68	; 0x44
 800029c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029e:	2410      	movs	r4, #16
 80002a0:	193b      	adds	r3, r7, r4
 80002a2:	0018      	movs	r0, r3
 80002a4:	2330      	movs	r3, #48	; 0x30
 80002a6:	001a      	movs	r2, r3
 80002a8:	2100      	movs	r1, #0
 80002aa:	f003 f939 	bl	8003520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ae:	003b      	movs	r3, r7
 80002b0:	0018      	movs	r0, r3
 80002b2:	2310      	movs	r3, #16
 80002b4:	001a      	movs	r2, r3
 80002b6:	2100      	movs	r1, #0
 80002b8:	f003 f932 	bl	8003520 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80002bc:	0021      	movs	r1, r4
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2212      	movs	r2, #18
 80002c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2201      	movs	r2, #1
 80002c8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2201      	movs	r2, #1
 80002ce:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2210      	movs	r2, #16
 80002d4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2210      	movs	r2, #16
 80002da:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2200      	movs	r2, #0
 80002e0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	0018      	movs	r0, r3
 80002e6:	f001 fd97 	bl	8001e18 <HAL_RCC_OscConfig>
 80002ea:	1e03      	subs	r3, r0, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80002ee:	f000 faad 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f2:	003b      	movs	r3, r7
 80002f4:	2207      	movs	r2, #7
 80002f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f8:	003b      	movs	r3, r7
 80002fa:	2200      	movs	r2, #0
 80002fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fe:	003b      	movs	r3, r7
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000304:	003b      	movs	r3, r7
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800030a:	003b      	movs	r3, r7
 800030c:	2100      	movs	r1, #0
 800030e:	0018      	movs	r0, r3
 8000310:	f002 f89c 	bl	800244c <HAL_RCC_ClockConfig>
 8000314:	1e03      	subs	r3, r0, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000318:	f000 fa98 	bl	800084c <Error_Handler>
  }
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b011      	add	sp, #68	; 0x44
 8000322:	bd90      	pop	{r4, r7, pc}

08000324 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	0018      	movs	r0, r3
 800032e:	230c      	movs	r3, #12
 8000330:	001a      	movs	r2, r3
 8000332:	2100      	movs	r1, #0
 8000334:	f003 f8f4 	bl	8003520 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000338:	4b26      	ldr	r3, [pc, #152]	; (80003d4 <MX_ADC_Init+0xb0>)
 800033a:	4a27      	ldr	r2, [pc, #156]	; (80003d8 <MX_ADC_Init+0xb4>)
 800033c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800033e:	4b25      	ldr	r3, [pc, #148]	; (80003d4 <MX_ADC_Init+0xb0>)
 8000340:	2200      	movs	r2, #0
 8000342:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000344:	4b23      	ldr	r3, [pc, #140]	; (80003d4 <MX_ADC_Init+0xb0>)
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800034a:	4b22      	ldr	r3, [pc, #136]	; (80003d4 <MX_ADC_Init+0xb0>)
 800034c:	2200      	movs	r2, #0
 800034e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000350:	4b20      	ldr	r3, [pc, #128]	; (80003d4 <MX_ADC_Init+0xb0>)
 8000352:	2201      	movs	r2, #1
 8000354:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000356:	4b1f      	ldr	r3, [pc, #124]	; (80003d4 <MX_ADC_Init+0xb0>)
 8000358:	2204      	movs	r2, #4
 800035a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800035c:	4b1d      	ldr	r3, [pc, #116]	; (80003d4 <MX_ADC_Init+0xb0>)
 800035e:	2200      	movs	r2, #0
 8000360:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000362:	4b1c      	ldr	r3, [pc, #112]	; (80003d4 <MX_ADC_Init+0xb0>)
 8000364:	2200      	movs	r2, #0
 8000366:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000368:	4b1a      	ldr	r3, [pc, #104]	; (80003d4 <MX_ADC_Init+0xb0>)
 800036a:	2200      	movs	r2, #0
 800036c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800036e:	4b19      	ldr	r3, [pc, #100]	; (80003d4 <MX_ADC_Init+0xb0>)
 8000370:	2200      	movs	r2, #0
 8000372:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000374:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <MX_ADC_Init+0xb0>)
 8000376:	22c2      	movs	r2, #194	; 0xc2
 8000378:	32ff      	adds	r2, #255	; 0xff
 800037a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800037c:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <MX_ADC_Init+0xb0>)
 800037e:	2200      	movs	r2, #0
 8000380:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <MX_ADC_Init+0xb0>)
 8000384:	2224      	movs	r2, #36	; 0x24
 8000386:	2100      	movs	r1, #0
 8000388:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800038a:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <MX_ADC_Init+0xb0>)
 800038c:	2201      	movs	r2, #1
 800038e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000390:	4b10      	ldr	r3, [pc, #64]	; (80003d4 <MX_ADC_Init+0xb0>)
 8000392:	0018      	movs	r0, r3
 8000394:	f000 fc62 	bl	8000c5c <HAL_ADC_Init>
 8000398:	1e03      	subs	r3, r0, #0
 800039a:	d001      	beq.n	80003a0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800039c:	f000 fa56 	bl	800084c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2207      	movs	r2, #7
 80003a4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2280      	movs	r2, #128	; 0x80
 80003aa:	0152      	lsls	r2, r2, #5
 80003ac:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	2280      	movs	r2, #128	; 0x80
 80003b2:	0552      	lsls	r2, r2, #21
 80003b4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003b6:	1d3a      	adds	r2, r7, #4
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <MX_ADC_Init+0xb0>)
 80003ba:	0011      	movs	r1, r2
 80003bc:	0018      	movs	r0, r3
 80003be:	f000 fec5 	bl	800114c <HAL_ADC_ConfigChannel>
 80003c2:	1e03      	subs	r3, r0, #0
 80003c4:	d001      	beq.n	80003ca <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80003c6:	f000 fa41 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80003ca:	46c0      	nop			; (mov r8, r8)
 80003cc:	46bd      	mov	sp, r7
 80003ce:	b004      	add	sp, #16
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	2000002c 	.word	0x2000002c
 80003d8:	40012400 	.word	0x40012400

080003dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003e0:	4b14      	ldr	r3, [pc, #80]	; (8000434 <MX_USART2_UART_Init+0x58>)
 80003e2:	4a15      	ldr	r2, [pc, #84]	; (8000438 <MX_USART2_UART_Init+0x5c>)
 80003e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80003e6:	4b13      	ldr	r3, [pc, #76]	; (8000434 <MX_USART2_UART_Init+0x58>)
 80003e8:	2296      	movs	r2, #150	; 0x96
 80003ea:	0192      	lsls	r2, r2, #6
 80003ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ee:	4b11      	ldr	r3, [pc, #68]	; (8000434 <MX_USART2_UART_Init+0x58>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003f4:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <MX_USART2_UART_Init+0x58>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003fa:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <MX_USART2_UART_Init+0x58>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000400:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <MX_USART2_UART_Init+0x58>)
 8000402:	220c      	movs	r2, #12
 8000404:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <MX_USART2_UART_Init+0x58>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800040c:	4b09      	ldr	r3, [pc, #36]	; (8000434 <MX_USART2_UART_Init+0x58>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000412:	4b08      	ldr	r3, [pc, #32]	; (8000434 <MX_USART2_UART_Init+0x58>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <MX_USART2_UART_Init+0x58>)
 800041a:	2200      	movs	r2, #0
 800041c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800041e:	4b05      	ldr	r3, [pc, #20]	; (8000434 <MX_USART2_UART_Init+0x58>)
 8000420:	0018      	movs	r0, r3
 8000422:	f002 f965 	bl	80026f0 <HAL_UART_Init>
 8000426:	1e03      	subs	r3, r0, #0
 8000428:	d001      	beq.n	800042e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800042a:	f000 fa0f 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	2000006c 	.word	0x2000006c
 8000438:	40004400 	.word	0x40004400

0800043c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000442:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <MX_DMA_Init+0x38>)
 8000444:	695a      	ldr	r2, [r3, #20]
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <MX_DMA_Init+0x38>)
 8000448:	2101      	movs	r1, #1
 800044a:	430a      	orrs	r2, r1
 800044c:	615a      	str	r2, [r3, #20]
 800044e:	4b09      	ldr	r3, [pc, #36]	; (8000474 <MX_DMA_Init+0x38>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	2201      	movs	r2, #1
 8000454:	4013      	ands	r3, r2
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800045a:	2200      	movs	r2, #0
 800045c:	2100      	movs	r1, #0
 800045e:	200b      	movs	r0, #11
 8000460:	f001 f970 	bl	8001744 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000464:	200b      	movs	r0, #11
 8000466:	f001 f982 	bl	800176e <HAL_NVIC_EnableIRQ>

}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	b002      	add	sp, #8
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	40021000 	.word	0x40021000

08000478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000478:	b590      	push	{r4, r7, lr}
 800047a:	b089      	sub	sp, #36	; 0x24
 800047c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047e:	240c      	movs	r4, #12
 8000480:	193b      	adds	r3, r7, r4
 8000482:	0018      	movs	r0, r3
 8000484:	2314      	movs	r3, #20
 8000486:	001a      	movs	r2, r3
 8000488:	2100      	movs	r1, #0
 800048a:	f003 f849 	bl	8003520 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048e:	4b56      	ldr	r3, [pc, #344]	; (80005e8 <MX_GPIO_Init+0x170>)
 8000490:	695a      	ldr	r2, [r3, #20]
 8000492:	4b55      	ldr	r3, [pc, #340]	; (80005e8 <MX_GPIO_Init+0x170>)
 8000494:	2180      	movs	r1, #128	; 0x80
 8000496:	0289      	lsls	r1, r1, #10
 8000498:	430a      	orrs	r2, r1
 800049a:	615a      	str	r2, [r3, #20]
 800049c:	4b52      	ldr	r3, [pc, #328]	; (80005e8 <MX_GPIO_Init+0x170>)
 800049e:	695a      	ldr	r2, [r3, #20]
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	029b      	lsls	r3, r3, #10
 80004a4:	4013      	ands	r3, r2
 80004a6:	60bb      	str	r3, [r7, #8]
 80004a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004aa:	4b4f      	ldr	r3, [pc, #316]	; (80005e8 <MX_GPIO_Init+0x170>)
 80004ac:	695a      	ldr	r2, [r3, #20]
 80004ae:	4b4e      	ldr	r3, [pc, #312]	; (80005e8 <MX_GPIO_Init+0x170>)
 80004b0:	2180      	movs	r1, #128	; 0x80
 80004b2:	02c9      	lsls	r1, r1, #11
 80004b4:	430a      	orrs	r2, r1
 80004b6:	615a      	str	r2, [r3, #20]
 80004b8:	4b4b      	ldr	r3, [pc, #300]	; (80005e8 <MX_GPIO_Init+0x170>)
 80004ba:	695a      	ldr	r2, [r3, #20]
 80004bc:	2380      	movs	r3, #128	; 0x80
 80004be:	02db      	lsls	r3, r3, #11
 80004c0:	4013      	ands	r3, r2
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c6:	4b48      	ldr	r3, [pc, #288]	; (80005e8 <MX_GPIO_Init+0x170>)
 80004c8:	695a      	ldr	r2, [r3, #20]
 80004ca:	4b47      	ldr	r3, [pc, #284]	; (80005e8 <MX_GPIO_Init+0x170>)
 80004cc:	2180      	movs	r1, #128	; 0x80
 80004ce:	0309      	lsls	r1, r1, #12
 80004d0:	430a      	orrs	r2, r1
 80004d2:	615a      	str	r2, [r3, #20]
 80004d4:	4b44      	ldr	r3, [pc, #272]	; (80005e8 <MX_GPIO_Init+0x170>)
 80004d6:	695a      	ldr	r2, [r3, #20]
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	031b      	lsls	r3, r3, #12
 80004dc:	4013      	ands	r3, r2
 80004de:	603b      	str	r3, [r7, #0]
 80004e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80004e2:	2390      	movs	r3, #144	; 0x90
 80004e4:	05db      	lsls	r3, r3, #23
 80004e6:	2200      	movs	r2, #0
 80004e8:	2102      	movs	r1, #2
 80004ea:	0018      	movs	r0, r3
 80004ec:	f001 fc50 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Output_GPIO_Port, Output_Pin, GPIO_PIN_RESET);
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	00db      	lsls	r3, r3, #3
 80004f4:	483d      	ldr	r0, [pc, #244]	; (80005ec <MX_GPIO_Init+0x174>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	0019      	movs	r1, r3
 80004fa:	f001 fc49 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Blue_Pin|Green_Pin, GPIO_PIN_RESET);
 80004fe:	23c0      	movs	r3, #192	; 0xc0
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	483b      	ldr	r0, [pc, #236]	; (80005f0 <MX_GPIO_Init+0x178>)
 8000504:	2200      	movs	r2, #0
 8000506:	0019      	movs	r1, r3
 8000508:	f001 fc42 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800050c:	193b      	adds	r3, r7, r4
 800050e:	2201      	movs	r2, #1
 8000510:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000512:	193b      	adds	r3, r7, r4
 8000514:	2288      	movs	r2, #136	; 0x88
 8000516:	0352      	lsls	r2, r2, #13
 8000518:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	193b      	adds	r3, r7, r4
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000520:	193a      	adds	r2, r7, r4
 8000522:	2390      	movs	r3, #144	; 0x90
 8000524:	05db      	lsls	r3, r3, #23
 8000526:	0011      	movs	r1, r2
 8000528:	0018      	movs	r0, r3
 800052a:	f001 fac1 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800052e:	193b      	adds	r3, r7, r4
 8000530:	2202      	movs	r2, #2
 8000532:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000534:	193b      	adds	r3, r7, r4
 8000536:	2201      	movs	r2, #1
 8000538:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	193b      	adds	r3, r7, r4
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000540:	193b      	adds	r3, r7, r4
 8000542:	2200      	movs	r2, #0
 8000544:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000546:	193a      	adds	r2, r7, r4
 8000548:	2390      	movs	r3, #144	; 0x90
 800054a:	05db      	lsls	r3, r3, #23
 800054c:	0011      	movs	r1, r2
 800054e:	0018      	movs	r0, r3
 8000550:	f001 faae 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Output_Pin */
  GPIO_InitStruct.Pin = Output_Pin;
 8000554:	0021      	movs	r1, r4
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2280      	movs	r2, #128	; 0x80
 800055a:	00d2      	lsls	r2, r2, #3
 800055c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055e:	000c      	movs	r4, r1
 8000560:	193b      	adds	r3, r7, r4
 8000562:	2201      	movs	r2, #1
 8000564:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	193b      	adds	r3, r7, r4
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056c:	193b      	adds	r3, r7, r4
 800056e:	2200      	movs	r2, #0
 8000570:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Output_GPIO_Port, &GPIO_InitStruct);
 8000572:	193b      	adds	r3, r7, r4
 8000574:	4a1d      	ldr	r2, [pc, #116]	; (80005ec <MX_GPIO_Init+0x174>)
 8000576:	0019      	movs	r1, r3
 8000578:	0010      	movs	r0, r2
 800057a:	f001 fa99 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Blue_Pin */
  GPIO_InitStruct.Pin = Blue_Pin;
 800057e:	0021      	movs	r1, r4
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2280      	movs	r2, #128	; 0x80
 8000584:	0052      	lsls	r2, r2, #1
 8000586:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000588:	000c      	movs	r4, r1
 800058a:	193b      	adds	r3, r7, r4
 800058c:	2201      	movs	r2, #1
 800058e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000590:	193b      	adds	r3, r7, r4
 8000592:	2202      	movs	r2, #2
 8000594:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	193b      	adds	r3, r7, r4
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Blue_GPIO_Port, &GPIO_InitStruct);
 800059c:	193b      	adds	r3, r7, r4
 800059e:	4a14      	ldr	r2, [pc, #80]	; (80005f0 <MX_GPIO_Init+0x178>)
 80005a0:	0019      	movs	r1, r3
 80005a2:	0010      	movs	r0, r2
 80005a4:	f001 fa84 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Green_Pin */
  GPIO_InitStruct.Pin = Green_Pin;
 80005a8:	0021      	movs	r1, r4
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2280      	movs	r2, #128	; 0x80
 80005ae:	0092      	lsls	r2, r2, #2
 80005b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	2201      	movs	r2, #1
 80005b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Green_GPIO_Port, &GPIO_InitStruct);
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	4a0a      	ldr	r2, [pc, #40]	; (80005f0 <MX_GPIO_Init+0x178>)
 80005c8:	0019      	movs	r1, r3
 80005ca:	0010      	movs	r0, r2
 80005cc:	f001 fa70 	bl	8001ab0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2100      	movs	r1, #0
 80005d4:	2005      	movs	r0, #5
 80005d6:	f001 f8b5 	bl	8001744 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80005da:	2005      	movs	r0, #5
 80005dc:	f001 f8c7 	bl	800176e <HAL_NVIC_EnableIRQ>

}
 80005e0:	46c0      	nop			; (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b009      	add	sp, #36	; 0x24
 80005e6:	bd90      	pop	{r4, r7, pc}
 80005e8:	40021000 	.word	0x40021000
 80005ec:	48000400 	.word	0x48000400
 80005f0:	48000800 	.word	0x48000800

080005f4 <pollADC>:

/* USER CODE BEGIN 4 */
uint32_t pollADC(void){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
	//TO DO:
	//TASK 2
	// Complete the function body
	HAL_ADC_Start(&hadc);
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <pollADC+0x38>)
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 fc6d 	bl	8000edc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <pollADC+0x38>)
 8000604:	2164      	movs	r1, #100	; 0x64
 8000606:	0018      	movs	r0, r3
 8000608:	f000 fcfc 	bl	8001004 <HAL_ADC_PollForConversion>
	uint32_t val = HAL_ADC_GetValue(&hadc);
 800060c:	4b07      	ldr	r3, [pc, #28]	; (800062c <pollADC+0x38>)
 800060e:	0018      	movs	r0, r3
 8000610:	f000 fd90 	bl	8001134 <HAL_ADC_GetValue>
 8000614:	0003      	movs	r3, r0
 8000616:	607b      	str	r3, [r7, #4]
	HAL_ADC_Stop(&hadc);
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <pollADC+0x38>)
 800061a:	0018      	movs	r0, r3
 800061c:	f000 fcb2 	bl	8000f84 <HAL_ADC_Stop>
	return val;
 8000620:	687b      	ldr	r3, [r7, #4]
}
 8000622:	0018      	movs	r0, r3
 8000624:	46bd      	mov	sp, r7
 8000626:	b002      	add	sp, #8
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	2000002c 	.word	0x2000002c

08000630 <lot_Transmit>:
	uint32_t val = (47999/4096) * adc_val;

	return val;
}

void lot_Transmit(uint32_t data){
 8000630:	b5b0      	push	{r4, r5, r7, lr}
 8000632:	b08e      	sub	sp, #56	; 0x38
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	uint8_t countBits = 0;    //counter to keep track of bits
 8000638:	2337      	movs	r3, #55	; 0x37
 800063a:	18fb      	adds	r3, r7, r3
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
	uint8_t numPackets=0;    //number of 8-bit packets to send
 8000640:	232e      	movs	r3, #46	; 0x2e
 8000642:	18fb      	adds	r3, r7, r3
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
	uint8_t bits[32] =  { 0 };
 8000648:	230c      	movs	r3, #12
 800064a:	18fb      	adds	r3, r7, r3
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	3304      	adds	r3, #4
 8000652:	221c      	movs	r2, #28
 8000654:	2100      	movs	r1, #0
 8000656:	0018      	movs	r0, r3
 8000658:	f002 ff62 	bl	8003520 <memset>

	//converting 32 bit integer to binary data packet
	while(data > 0){
 800065c:	e012      	b.n	8000684 <lot_Transmit+0x54>
		bits[countBits] = data%2;   //get last bit
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	b2da      	uxtb	r2, r3
 8000662:	2037      	movs	r0, #55	; 0x37
 8000664:	183b      	adds	r3, r7, r0
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2101      	movs	r1, #1
 800066a:	400a      	ands	r2, r1
 800066c:	b2d1      	uxtb	r1, r2
 800066e:	220c      	movs	r2, #12
 8000670:	18ba      	adds	r2, r7, r2
 8000672:	54d1      	strb	r1, [r2, r3]
		data = data >> 1;           //shift binary number left
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	085b      	lsrs	r3, r3, #1
 8000678:	607b      	str	r3, [r7, #4]
		countBits++;
 800067a:	183b      	adds	r3, r7, r0
 800067c:	781a      	ldrb	r2, [r3, #0]
 800067e:	183b      	adds	r3, r7, r0
 8000680:	3201      	adds	r2, #1
 8000682:	701a      	strb	r2, [r3, #0]
	while(data > 0){
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1e9      	bne.n	800065e <lot_Transmit+0x2e>
	}
	//count the number of 8-bit packets
	numPackets = ((countBits-1)/8)+1;
 800068a:	2337      	movs	r3, #55	; 0x37
 800068c:	18fb      	adds	r3, r7, r3
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	3b01      	subs	r3, #1
 8000692:	2b00      	cmp	r3, #0
 8000694:	da00      	bge.n	8000698 <lot_Transmit+0x68>
 8000696:	3307      	adds	r3, #7
 8000698:	10db      	asrs	r3, r3, #3
 800069a:	b2da      	uxtb	r2, r3
 800069c:	232e      	movs	r3, #46	; 0x2e
 800069e:	18fb      	adds	r3, r7, r3
 80006a0:	3201      	adds	r2, #1
 80006a2:	701a      	strb	r2, [r3, #0]

	//write data packet 8 bits at a time
	for(int i=0;i<numPackets;i++){
 80006a4:	2300      	movs	r3, #0
 80006a6:	633b      	str	r3, [r7, #48]	; 0x30
 80006a8:	e044      	b.n	8000734 <lot_Transmit+0x104>
		//write start bit
		HAL_GPIO_WritePin(Out_Port, Out_Pin, 1);
 80006aa:	2380      	movs	r3, #128	; 0x80
 80006ac:	00db      	lsls	r3, r3, #3
 80006ae:	482d      	ldr	r0, [pc, #180]	; (8000764 <lot_Transmit+0x134>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	0019      	movs	r1, r3
 80006b4:	f001 fb6c 	bl	8001d90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	482a      	ldr	r0, [pc, #168]	; (8000768 <lot_Transmit+0x138>)
 80006be:	2201      	movs	r2, #1
 80006c0:	0019      	movs	r1, r3
 80006c2:	f001 fb65 	bl	8001d90 <HAL_GPIO_WritePin>
		HAL_Delay(delayTime);
 80006c6:	4b29      	ldr	r3, [pc, #164]	; (800076c <lot_Transmit+0x13c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 faa2 	bl	8000c14 <HAL_Delay>
		//write data packets
		for(uint8_t j=i*8;j<(i*8+8);j++){
 80006d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	232f      	movs	r3, #47	; 0x2f
 80006d6:	18fb      	adds	r3, r7, r3
 80006d8:	00d2      	lsls	r2, r2, #3
 80006da:	701a      	strb	r2, [r3, #0]
 80006dc:	e01f      	b.n	800071e <lot_Transmit+0xee>
			//HAL_GPIO_WritePin(Out_Port, Out_Pin, bits[j]);
			HAL_GPIO_WritePin(Out_Port, Out_Pin, bits[j]);
 80006de:	242f      	movs	r4, #47	; 0x2f
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	250c      	movs	r5, #12
 80006e6:	197a      	adds	r2, r7, r5
 80006e8:	5cd2      	ldrb	r2, [r2, r3]
 80006ea:	2380      	movs	r3, #128	; 0x80
 80006ec:	00db      	lsls	r3, r3, #3
 80006ee:	481d      	ldr	r0, [pc, #116]	; (8000764 <lot_Transmit+0x134>)
 80006f0:	0019      	movs	r1, r3
 80006f2:	f001 fb4d 	bl	8001d90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, bits[j]);
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	197a      	adds	r2, r7, r5
 80006fc:	5cd2      	ldrb	r2, [r2, r3]
 80006fe:	2380      	movs	r3, #128	; 0x80
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	4819      	ldr	r0, [pc, #100]	; (8000768 <lot_Transmit+0x138>)
 8000704:	0019      	movs	r1, r3
 8000706:	f001 fb43 	bl	8001d90 <HAL_GPIO_WritePin>
 			HAL_Delay(delayTime);
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <lot_Transmit+0x13c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	0018      	movs	r0, r3
 8000710:	f000 fa80 	bl	8000c14 <HAL_Delay>
		for(uint8_t j=i*8;j<(i*8+8);j++){
 8000714:	193b      	adds	r3, r7, r4
 8000716:	781a      	ldrb	r2, [r3, #0]
 8000718:	193b      	adds	r3, r7, r4
 800071a:	3201      	adds	r2, #1
 800071c:	701a      	strb	r2, [r3, #0]
 800071e:	232f      	movs	r3, #47	; 0x2f
 8000720:	18fb      	adds	r3, r7, r3
 8000722:	781a      	ldrb	r2, [r3, #0]
 8000724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000726:	3301      	adds	r3, #1
 8000728:	00db      	lsls	r3, r3, #3
 800072a:	429a      	cmp	r2, r3
 800072c:	dbd7      	blt.n	80006de <lot_Transmit+0xae>
	for(int i=0;i<numPackets;i++){
 800072e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000730:	3301      	adds	r3, #1
 8000732:	633b      	str	r3, [r7, #48]	; 0x30
 8000734:	232e      	movs	r3, #46	; 0x2e
 8000736:	18fb      	adds	r3, r7, r3
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800073c:	429a      	cmp	r2, r3
 800073e:	dbb4      	blt.n	80006aa <lot_Transmit+0x7a>
		}
	}
	//write last stop bit
	HAL_GPIO_WritePin(Out_Port, Out_Pin, 0);
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	4807      	ldr	r0, [pc, #28]	; (8000764 <lot_Transmit+0x134>)
 8000746:	2200      	movs	r2, #0
 8000748:	0019      	movs	r1, r3
 800074a:	f001 fb21 	bl	8001d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <lot_Transmit+0x138>)
 8000754:	2200      	movs	r2, #0
 8000756:	0019      	movs	r1, r3
 8000758:	f001 fb1a 	bl	8001d90 <HAL_GPIO_WritePin>
}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	b00e      	add	sp, #56	; 0x38
 8000762:	bdb0      	pop	{r4, r5, r7, pc}
 8000764:	48000400 	.word	0x48000400
 8000768:	48000800 	.word	0x48000800
 800076c:	20000000 	.word	0x20000000

08000770 <sendSample>:

void sendSample(uint32_t sample){
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	//send the id message 10 for ADC sample transmission
	HAL_GPIO_WritePin(Out_Port, Out_Pin, 1);  //write 1 to pin
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	480e      	ldr	r0, [pc, #56]	; (80007b8 <sendSample+0x48>)
 800077e:	2201      	movs	r2, #1
 8000780:	0019      	movs	r1, r3
 8000782:	f001 fb05 	bl	8001d90 <HAL_GPIO_WritePin>
	HAL_Delay(delayTime);
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <sendSample+0x4c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	0018      	movs	r0, r3
 800078c:	f000 fa42 	bl	8000c14 <HAL_Delay>
	HAL_GPIO_WritePin(Out_Port, Out_Pin, 0);  //write 0  to pin
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	00db      	lsls	r3, r3, #3
 8000794:	4808      	ldr	r0, [pc, #32]	; (80007b8 <sendSample+0x48>)
 8000796:	2200      	movs	r2, #0
 8000798:	0019      	movs	r1, r3
 800079a:	f001 faf9 	bl	8001d90 <HAL_GPIO_WritePin>
	HAL_Delay(delayTime);
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <sendSample+0x4c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	0018      	movs	r0, r3
 80007a4:	f000 fa36 	bl	8000c14 <HAL_Delay>

	//send sample
	lot_Transmit(sample);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	0018      	movs	r0, r3
 80007ac:	f7ff ff40 	bl	8000630 <lot_Transmit>

}
 80007b0:	46c0      	nop			; (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b002      	add	sp, #8
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	48000400 	.word	0x48000400
 80007bc:	20000000 	.word	0x20000000

080007c0 <SendCheckPoint>:
void SendCheckPoint(uint32_t num){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	//send checkpoint id message 11 for checkpoint transmission
	HAL_GPIO_WritePin(Out_Port, Out_Pin, 1);
 80007c8:	2380      	movs	r3, #128	; 0x80
 80007ca:	00db      	lsls	r3, r3, #3
 80007cc:	480e      	ldr	r0, [pc, #56]	; (8000808 <SendCheckPoint+0x48>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	0019      	movs	r1, r3
 80007d2:	f001 fadd 	bl	8001d90 <HAL_GPIO_WritePin>
	HAL_Delay(delayTime);
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <SendCheckPoint+0x4c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 fa1a 	bl	8000c14 <HAL_Delay>
	HAL_GPIO_WritePin(Out_Port, Out_Pin, 1);
 80007e0:	2380      	movs	r3, #128	; 0x80
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	4808      	ldr	r0, [pc, #32]	; (8000808 <SendCheckPoint+0x48>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	0019      	movs	r1, r3
 80007ea:	f001 fad1 	bl	8001d90 <HAL_GPIO_WritePin>
	HAL_Delay(delayTime);
 80007ee:	4b07      	ldr	r3, [pc, #28]	; (800080c <SendCheckPoint+0x4c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	0018      	movs	r0, r3
 80007f4:	f000 fa0e 	bl	8000c14 <HAL_Delay>

	//send checkpoint
	lot_Transmit(num);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	0018      	movs	r0, r3
 80007fc:	f7ff ff18 	bl	8000630 <lot_Transmit>
}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	b002      	add	sp, #8
 8000806:	bd80      	pop	{r7, pc}
 8000808:	48000400 	.word	0x48000400
 800080c:	20000000 	.word	0x20000000

08000810 <EXTI0_1_IRQHandler>:


void EXTI0_1_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
	uint32_t current = HAL_GetTick();
 8000816:	f000 f9f3 	bl	8000c00 <HAL_GetTick>
 800081a:	0003      	movs	r3, r0
 800081c:	607b      	str	r3, [r7, #4]
	if ((current-prev>150) && GPIO_PIN_0 == 1){
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <EXTI0_1_IRQHandler+0x34>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	2b96      	cmp	r3, #150	; 0x96
 8000828:	d905      	bls.n	8000836 <EXTI0_1_IRQHandler+0x26>
		buttonFlag = true;
 800082a:	4b07      	ldr	r3, [pc, #28]	; (8000848 <EXTI0_1_IRQHandler+0x38>)
 800082c:	2201      	movs	r2, #1
 800082e:	701a      	strb	r2, [r3, #0]
		prev = current;
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <EXTI0_1_IRQHandler+0x34>)
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0); // Clear interrupt flags
 8000836:	2001      	movs	r0, #1
 8000838:	f001 fac8 	bl	8001dcc <HAL_GPIO_EXTI_IRQHandler>
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	b002      	add	sp, #8
 8000842:	bd80      	pop	{r7, pc}
 8000844:	2000017c 	.word	0x2000017c
 8000848:	20000178 	.word	0x20000178

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	e7fe      	b.n	8000854 <Error_Handler+0x8>
	...

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <HAL_MspInit+0x44>)
 8000860:	699a      	ldr	r2, [r3, #24]
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <HAL_MspInit+0x44>)
 8000864:	2101      	movs	r1, #1
 8000866:	430a      	orrs	r2, r1
 8000868:	619a      	str	r2, [r3, #24]
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <HAL_MspInit+0x44>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	2201      	movs	r2, #1
 8000870:	4013      	ands	r3, r2
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <HAL_MspInit+0x44>)
 8000878:	69da      	ldr	r2, [r3, #28]
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <HAL_MspInit+0x44>)
 800087c:	2180      	movs	r1, #128	; 0x80
 800087e:	0549      	lsls	r1, r1, #21
 8000880:	430a      	orrs	r2, r1
 8000882:	61da      	str	r2, [r3, #28]
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <HAL_MspInit+0x44>)
 8000886:	69da      	ldr	r2, [r3, #28]
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	055b      	lsls	r3, r3, #21
 800088c:	4013      	ands	r3, r2
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b002      	add	sp, #8
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	40021000 	.word	0x40021000

080008a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b08b      	sub	sp, #44	; 0x2c
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	2414      	movs	r4, #20
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	0018      	movs	r0, r3
 80008ae:	2314      	movs	r3, #20
 80008b0:	001a      	movs	r2, r3
 80008b2:	2100      	movs	r1, #0
 80008b4:	f002 fe34 	bl	8003520 <memset>
  if(hadc->Instance==ADC1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a19      	ldr	r2, [pc, #100]	; (8000924 <HAL_ADC_MspInit+0x84>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d12b      	bne.n	800091a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008c2:	4b19      	ldr	r3, [pc, #100]	; (8000928 <HAL_ADC_MspInit+0x88>)
 80008c4:	699a      	ldr	r2, [r3, #24]
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <HAL_ADC_MspInit+0x88>)
 80008c8:	2180      	movs	r1, #128	; 0x80
 80008ca:	0089      	lsls	r1, r1, #2
 80008cc:	430a      	orrs	r2, r1
 80008ce:	619a      	str	r2, [r3, #24]
 80008d0:	4b15      	ldr	r3, [pc, #84]	; (8000928 <HAL_ADC_MspInit+0x88>)
 80008d2:	699a      	ldr	r2, [r3, #24]
 80008d4:	2380      	movs	r3, #128	; 0x80
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	4013      	ands	r3, r2
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b12      	ldr	r3, [pc, #72]	; (8000928 <HAL_ADC_MspInit+0x88>)
 80008e0:	695a      	ldr	r2, [r3, #20]
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <HAL_ADC_MspInit+0x88>)
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	0289      	lsls	r1, r1, #10
 80008e8:	430a      	orrs	r2, r1
 80008ea:	615a      	str	r2, [r3, #20]
 80008ec:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <HAL_ADC_MspInit+0x88>)
 80008ee:	695a      	ldr	r2, [r3, #20]
 80008f0:	2380      	movs	r3, #128	; 0x80
 80008f2:	029b      	lsls	r3, r3, #10
 80008f4:	4013      	ands	r3, r2
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	2280      	movs	r2, #128	; 0x80
 80008fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000900:	193b      	adds	r3, r7, r4
 8000902:	2203      	movs	r2, #3
 8000904:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	193b      	adds	r3, r7, r4
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	193a      	adds	r2, r7, r4
 800090e:	2390      	movs	r3, #144	; 0x90
 8000910:	05db      	lsls	r3, r3, #23
 8000912:	0011      	movs	r1, r2
 8000914:	0018      	movs	r0, r3
 8000916:	f001 f8cb 	bl	8001ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b00b      	add	sp, #44	; 0x2c
 8000920:	bd90      	pop	{r4, r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	40012400 	.word	0x40012400
 8000928:	40021000 	.word	0x40021000

0800092c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800092c:	b590      	push	{r4, r7, lr}
 800092e:	b08b      	sub	sp, #44	; 0x2c
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	2414      	movs	r4, #20
 8000936:	193b      	adds	r3, r7, r4
 8000938:	0018      	movs	r0, r3
 800093a:	2314      	movs	r3, #20
 800093c:	001a      	movs	r2, r3
 800093e:	2100      	movs	r1, #0
 8000940:	f002 fdee 	bl	8003520 <memset>
  if(huart->Instance==USART2)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a47      	ldr	r2, [pc, #284]	; (8000a68 <HAL_UART_MspInit+0x13c>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d000      	beq.n	8000950 <HAL_UART_MspInit+0x24>
 800094e:	e086      	b.n	8000a5e <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000950:	4b46      	ldr	r3, [pc, #280]	; (8000a6c <HAL_UART_MspInit+0x140>)
 8000952:	69da      	ldr	r2, [r3, #28]
 8000954:	4b45      	ldr	r3, [pc, #276]	; (8000a6c <HAL_UART_MspInit+0x140>)
 8000956:	2180      	movs	r1, #128	; 0x80
 8000958:	0289      	lsls	r1, r1, #10
 800095a:	430a      	orrs	r2, r1
 800095c:	61da      	str	r2, [r3, #28]
 800095e:	4b43      	ldr	r3, [pc, #268]	; (8000a6c <HAL_UART_MspInit+0x140>)
 8000960:	69da      	ldr	r2, [r3, #28]
 8000962:	2380      	movs	r3, #128	; 0x80
 8000964:	029b      	lsls	r3, r3, #10
 8000966:	4013      	ands	r3, r2
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096c:	4b3f      	ldr	r3, [pc, #252]	; (8000a6c <HAL_UART_MspInit+0x140>)
 800096e:	695a      	ldr	r2, [r3, #20]
 8000970:	4b3e      	ldr	r3, [pc, #248]	; (8000a6c <HAL_UART_MspInit+0x140>)
 8000972:	2180      	movs	r1, #128	; 0x80
 8000974:	0289      	lsls	r1, r1, #10
 8000976:	430a      	orrs	r2, r1
 8000978:	615a      	str	r2, [r3, #20]
 800097a:	4b3c      	ldr	r3, [pc, #240]	; (8000a6c <HAL_UART_MspInit+0x140>)
 800097c:	695a      	ldr	r2, [r3, #20]
 800097e:	2380      	movs	r3, #128	; 0x80
 8000980:	029b      	lsls	r3, r3, #10
 8000982:	4013      	ands	r3, r2
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000988:	0021      	movs	r1, r4
 800098a:	187b      	adds	r3, r7, r1
 800098c:	220c      	movs	r2, #12
 800098e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2202      	movs	r2, #2
 8000994:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2203      	movs	r2, #3
 80009a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2201      	movs	r2, #1
 80009a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	187a      	adds	r2, r7, r1
 80009aa:	2390      	movs	r3, #144	; 0x90
 80009ac:	05db      	lsls	r3, r3, #23
 80009ae:	0011      	movs	r1, r2
 80009b0:	0018      	movs	r0, r3
 80009b2:	f001 f87d 	bl	8001ab0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 80009b6:	4b2e      	ldr	r3, [pc, #184]	; (8000a70 <HAL_UART_MspInit+0x144>)
 80009b8:	4a2e      	ldr	r2, [pc, #184]	; (8000a74 <HAL_UART_MspInit+0x148>)
 80009ba:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009bc:	4b2c      	ldr	r3, [pc, #176]	; (8000a70 <HAL_UART_MspInit+0x144>)
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009c2:	4b2b      	ldr	r3, [pc, #172]	; (8000a70 <HAL_UART_MspInit+0x144>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009c8:	4b29      	ldr	r3, [pc, #164]	; (8000a70 <HAL_UART_MspInit+0x144>)
 80009ca:	2280      	movs	r2, #128	; 0x80
 80009cc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009ce:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <HAL_UART_MspInit+0x144>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009d4:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <HAL_UART_MspInit+0x144>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80009da:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <HAL_UART_MspInit+0x144>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009e0:	4b23      	ldr	r3, [pc, #140]	; (8000a70 <HAL_UART_MspInit+0x144>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80009e6:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <HAL_UART_MspInit+0x144>)
 80009e8:	0018      	movs	r0, r3
 80009ea:	f000 fedd 	bl	80017a8 <HAL_DMA_Init>
 80009ee:	1e03      	subs	r3, r0, #0
 80009f0:	d001      	beq.n	80009f6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80009f2:	f7ff ff2b 	bl	800084c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a1d      	ldr	r2, [pc, #116]	; (8000a70 <HAL_UART_MspInit+0x144>)
 80009fa:	671a      	str	r2, [r3, #112]	; 0x70
 80009fc:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <HAL_UART_MspInit+0x144>)
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8000a02:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <HAL_UART_MspInit+0x14c>)
 8000a04:	4a1d      	ldr	r2, [pc, #116]	; (8000a7c <HAL_UART_MspInit+0x150>)
 8000a06:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <HAL_UART_MspInit+0x14c>)
 8000a0a:	2210      	movs	r2, #16
 8000a0c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <HAL_UART_MspInit+0x14c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a14:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <HAL_UART_MspInit+0x14c>)
 8000a16:	2280      	movs	r2, #128	; 0x80
 8000a18:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <HAL_UART_MspInit+0x14c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a20:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <HAL_UART_MspInit+0x14c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <HAL_UART_MspInit+0x14c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_UART_MspInit+0x14c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <HAL_UART_MspInit+0x14c>)
 8000a34:	0018      	movs	r0, r3
 8000a36:	f000 feb7 	bl	80017a8 <HAL_DMA_Init>
 8000a3a:	1e03      	subs	r3, r0, #0
 8000a3c:	d001      	beq.n	8000a42 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8000a3e:	f7ff ff05 	bl	800084c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a0c      	ldr	r2, [pc, #48]	; (8000a78 <HAL_UART_MspInit+0x14c>)
 8000a46:	66da      	str	r2, [r3, #108]	; 0x6c
 8000a48:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <HAL_UART_MspInit+0x14c>)
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	201c      	movs	r0, #28
 8000a54:	f000 fe76 	bl	8001744 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a58:	201c      	movs	r0, #28
 8000a5a:	f000 fe88 	bl	800176e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b00b      	add	sp, #44	; 0x2c
 8000a64:	bd90      	pop	{r4, r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	40004400 	.word	0x40004400
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	200000f0 	.word	0x200000f0
 8000a74:	40020058 	.word	0x40020058
 8000a78:	20000134 	.word	0x20000134
 8000a7c:	40020044 	.word	0x40020044

08000a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <NMI_Handler+0x4>

08000a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <HardFault_Handler+0x4>

08000a8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa4:	f000 f89a 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <DMA1_Channel4_5_IRQHandler+0x1c>)
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f000 ff3b 	bl	8001932 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <DMA1_Channel4_5_IRQHandler+0x20>)
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f000 ff37 	bl	8001932 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	20000134 	.word	0x20000134
 8000ad0:	200000f0 	.word	0x200000f0

08000ad4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <USART2_IRQHandler+0x14>)
 8000ada:	0018      	movs	r0, r3
 8000adc:	f001 fe5c 	bl	8002798 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	2000006c 	.word	0x2000006c

08000aec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000af0:	46c0      	nop			; (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000af8:	480d      	ldr	r0, [pc, #52]	; (8000b30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000afa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000afc:	480d      	ldr	r0, [pc, #52]	; (8000b34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000afe:	490e      	ldr	r1, [pc, #56]	; (8000b38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b00:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <LoopForever+0xe>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b04:	e002      	b.n	8000b0c <LoopCopyDataInit>

08000b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0a:	3304      	adds	r3, #4

08000b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b10:	d3f9      	bcc.n	8000b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b12:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b14:	4c0b      	ldr	r4, [pc, #44]	; (8000b44 <LoopForever+0x16>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b18:	e001      	b.n	8000b1e <LoopFillZerobss>

08000b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b1c:	3204      	adds	r2, #4

08000b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b20:	d3fb      	bcc.n	8000b1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b22:	f7ff ffe3 	bl	8000aec <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000b26:	f002 fcd7 	bl	80034d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b2a:	f7ff fb79 	bl	8000220 <main>

08000b2e <LoopForever>:

LoopForever:
    b LoopForever
 8000b2e:	e7fe      	b.n	8000b2e <LoopForever>
  ldr   r0, =_estack
 8000b30:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b38:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b3c:	08003588 	.word	0x08003588
  ldr r2, =_sbss
 8000b40:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b44:	20000184 	.word	0x20000184

08000b48 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <ADC1_COMP_IRQHandler>
	...

08000b4c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <HAL_Init+0x24>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_Init+0x24>)
 8000b56:	2110      	movs	r1, #16
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f000 f809 	bl	8000b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b62:	f7ff fe79 	bl	8000858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b66:	2300      	movs	r3, #0
}
 8000b68:	0018      	movs	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	40022000 	.word	0x40022000

08000b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <HAL_InitTick+0x5c>)
 8000b7e:	681c      	ldr	r4, [r3, #0]
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <HAL_InitTick+0x60>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	0019      	movs	r1, r3
 8000b86:	23fa      	movs	r3, #250	; 0xfa
 8000b88:	0098      	lsls	r0, r3, #2
 8000b8a:	f7ff fabd 	bl	8000108 <__udivsi3>
 8000b8e:	0003      	movs	r3, r0
 8000b90:	0019      	movs	r1, r3
 8000b92:	0020      	movs	r0, r4
 8000b94:	f7ff fab8 	bl	8000108 <__udivsi3>
 8000b98:	0003      	movs	r3, r0
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f000 fdf7 	bl	800178e <HAL_SYSTICK_Config>
 8000ba0:	1e03      	subs	r3, r0, #0
 8000ba2:	d001      	beq.n	8000ba8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	e00f      	b.n	8000bc8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b03      	cmp	r3, #3
 8000bac:	d80b      	bhi.n	8000bc6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	425b      	negs	r3, r3
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f000 fdc4 	bl	8001744 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_InitTick+0x64>)
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e000      	b.n	8000bc8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	0018      	movs	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	b003      	add	sp, #12
 8000bce:	bd90      	pop	{r4, r7, pc}
 8000bd0:	20000004 	.word	0x20000004
 8000bd4:	2000000c 	.word	0x2000000c
 8000bd8:	20000008 	.word	0x20000008

08000bdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <HAL_IncTick+0x1c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	001a      	movs	r2, r3
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_IncTick+0x20>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	18d2      	adds	r2, r2, r3
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <HAL_IncTick+0x20>)
 8000bee:	601a      	str	r2, [r3, #0]
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	2000000c 	.word	0x2000000c
 8000bfc:	20000180 	.word	0x20000180

08000c00 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  return uwTick;
 8000c04:	4b02      	ldr	r3, [pc, #8]	; (8000c10 <HAL_GetTick+0x10>)
 8000c06:	681b      	ldr	r3, [r3, #0]
}
 8000c08:	0018      	movs	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	20000180 	.word	0x20000180

08000c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c1c:	f7ff fff0 	bl	8000c00 <HAL_GetTick>
 8000c20:	0003      	movs	r3, r0
 8000c22:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	d005      	beq.n	8000c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <HAL_Delay+0x44>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	001a      	movs	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	189b      	adds	r3, r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	f7ff ffe0 	bl	8000c00 <HAL_GetTick>
 8000c40:	0002      	movs	r2, r0
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d8f7      	bhi.n	8000c3c <HAL_Delay+0x28>
  {
  }
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b004      	add	sp, #16
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	2000000c 	.word	0x2000000c

08000c5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c64:	230f      	movs	r3, #15
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d101      	bne.n	8000c7a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e125      	b.n	8000ec6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d10a      	bne.n	8000c98 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2200      	movs	r2, #0
 8000c86:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2234      	movs	r2, #52	; 0x34
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	0018      	movs	r0, r3
 8000c94:	f7ff fe04 	bl	80008a0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c9c:	2210      	movs	r2, #16
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	d000      	beq.n	8000ca4 <HAL_ADC_Init+0x48>
 8000ca2:	e103      	b.n	8000eac <HAL_ADC_Init+0x250>
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d000      	beq.n	8000cb0 <HAL_ADC_Init+0x54>
 8000cae:	e0fd      	b.n	8000eac <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	2204      	movs	r2, #4
 8000cb8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000cba:	d000      	beq.n	8000cbe <HAL_ADC_Init+0x62>
 8000cbc:	e0f6      	b.n	8000eac <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc2:	4a83      	ldr	r2, [pc, #524]	; (8000ed0 <HAL_ADC_Init+0x274>)
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d112      	bne.n	8000d02 <HAL_ADC_Init+0xa6>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d009      	beq.n	8000cfe <HAL_ADC_Init+0xa2>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	68da      	ldr	r2, [r3, #12]
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	021b      	lsls	r3, r3, #8
 8000cf4:	401a      	ands	r2, r3
 8000cf6:	2380      	movs	r3, #128	; 0x80
 8000cf8:	021b      	lsls	r3, r3, #8
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d101      	bne.n	8000d02 <HAL_ADC_Init+0xa6>
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e000      	b.n	8000d04 <HAL_ADC_Init+0xa8>
 8000d02:	2300      	movs	r3, #0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d116      	bne.n	8000d36 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	2218      	movs	r2, #24
 8000d10:	4393      	bics	r3, r2
 8000d12:	0019      	movs	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	691b      	ldr	r3, [r3, #16]
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	0899      	lsrs	r1, r3, #2
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685a      	ldr	r2, [r3, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	430a      	orrs	r2, r1
 8000d34:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	68da      	ldr	r2, [r3, #12]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4964      	ldr	r1, [pc, #400]	; (8000ed4 <HAL_ADC_Init+0x278>)
 8000d42:	400a      	ands	r2, r1
 8000d44:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	7e1b      	ldrb	r3, [r3, #24]
 8000d4a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	7e5b      	ldrb	r3, [r3, #25]
 8000d50:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d52:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	7e9b      	ldrb	r3, [r3, #26]
 8000d58:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000d5a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d002      	beq.n	8000d6a <HAL_ADC_Init+0x10e>
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	015b      	lsls	r3, r3, #5
 8000d68:	e000      	b.n	8000d6c <HAL_ADC_Init+0x110>
 8000d6a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d6c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000d72:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	691b      	ldr	r3, [r3, #16]
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d101      	bne.n	8000d80 <HAL_ADC_Init+0x124>
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	e000      	b.n	8000d82 <HAL_ADC_Init+0x126>
 8000d80:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000d82:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2124      	movs	r1, #36	; 0x24
 8000d88:	5c5b      	ldrb	r3, [r3, r1]
 8000d8a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000d8c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	7edb      	ldrb	r3, [r3, #27]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d115      	bne.n	8000dc8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	7e9b      	ldrb	r3, [r3, #26]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d105      	bne.n	8000db0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	2280      	movs	r2, #128	; 0x80
 8000da8:	0252      	lsls	r2, r2, #9
 8000daa:	4313      	orrs	r3, r2
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	e00b      	b.n	8000dc8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000db4:	2220      	movs	r2, #32
 8000db6:	431a      	orrs	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	431a      	orrs	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	69da      	ldr	r2, [r3, #28]
 8000dcc:	23c2      	movs	r3, #194	; 0xc2
 8000dce:	33ff      	adds	r3, #255	; 0xff
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d007      	beq.n	8000de4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	68d9      	ldr	r1, [r3, #12]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	430a      	orrs	r2, r1
 8000df2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	055b      	lsls	r3, r3, #21
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d01b      	beq.n	8000e38 <HAL_ADC_Init+0x1dc>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d017      	beq.n	8000e38 <HAL_ADC_Init+0x1dc>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d013      	beq.n	8000e38 <HAL_ADC_Init+0x1dc>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d00f      	beq.n	8000e38 <HAL_ADC_Init+0x1dc>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e1c:	2b04      	cmp	r3, #4
 8000e1e:	d00b      	beq.n	8000e38 <HAL_ADC_Init+0x1dc>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e24:	2b05      	cmp	r3, #5
 8000e26:	d007      	beq.n	8000e38 <HAL_ADC_Init+0x1dc>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2c:	2b06      	cmp	r3, #6
 8000e2e:	d003      	beq.n	8000e38 <HAL_ADC_Init+0x1dc>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e34:	2b07      	cmp	r3, #7
 8000e36:	d112      	bne.n	8000e5e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	695a      	ldr	r2, [r3, #20]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2107      	movs	r1, #7
 8000e44:	438a      	bics	r2, r1
 8000e46:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	6959      	ldr	r1, [r3, #20]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e52:	2207      	movs	r2, #7
 8000e54:	401a      	ands	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	4a1c      	ldr	r2, [pc, #112]	; (8000ed8 <HAL_ADC_Init+0x27c>)
 8000e66:	4013      	ands	r3, r2
 8000e68:	68ba      	ldr	r2, [r7, #8]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d10b      	bne.n	8000e86 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e78:	2203      	movs	r2, #3
 8000e7a:	4393      	bics	r3, r2
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e84:	e01c      	b.n	8000ec0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e8a:	2212      	movs	r2, #18
 8000e8c:	4393      	bics	r3, r2
 8000e8e:	2210      	movs	r2, #16
 8000e90:	431a      	orrs	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000ea2:	230f      	movs	r3, #15
 8000ea4:	18fb      	adds	r3, r7, r3
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000eaa:	e009      	b.n	8000ec0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eb0:	2210      	movs	r2, #16
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000eb8:	230f      	movs	r3, #15
 8000eba:	18fb      	adds	r3, r7, r3
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ec0:	230f      	movs	r3, #15
 8000ec2:	18fb      	adds	r3, r7, r3
 8000ec4:	781b      	ldrb	r3, [r3, #0]
}
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b004      	add	sp, #16
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	fffffefd 	.word	0xfffffefd
 8000ed4:	fffe0219 	.word	0xfffe0219
 8000ed8:	833fffe7 	.word	0x833fffe7

08000edc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ee4:	230f      	movs	r3, #15
 8000ee6:	18fb      	adds	r3, r7, r3
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	2204      	movs	r2, #4
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d138      	bne.n	8000f6a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2234      	movs	r2, #52	; 0x34
 8000efc:	5c9b      	ldrb	r3, [r3, r2]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d101      	bne.n	8000f06 <HAL_ADC_Start+0x2a>
 8000f02:	2302      	movs	r3, #2
 8000f04:	e038      	b.n	8000f78 <HAL_ADC_Start+0x9c>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2234      	movs	r2, #52	; 0x34
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	7e5b      	ldrb	r3, [r3, #25]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d007      	beq.n	8000f26 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000f16:	230f      	movs	r3, #15
 8000f18:	18fc      	adds	r4, r7, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f000 fa23 	bl	8001368 <ADC_Enable>
 8000f22:	0003      	movs	r3, r0
 8000f24:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f26:	230f      	movs	r3, #15
 8000f28:	18fb      	adds	r3, r7, r3
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d120      	bne.n	8000f72 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f34:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <HAL_ADC_Start+0xa4>)
 8000f36:	4013      	ands	r3, r2
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	0052      	lsls	r2, r2, #1
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2234      	movs	r2, #52	; 0x34
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	221c      	movs	r2, #28
 8000f56:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	689a      	ldr	r2, [r3, #8]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2104      	movs	r1, #4
 8000f64:	430a      	orrs	r2, r1
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	e003      	b.n	8000f72 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f6a:	230f      	movs	r3, #15
 8000f6c:	18fb      	adds	r3, r7, r3
 8000f6e:	2202      	movs	r2, #2
 8000f70:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f72:	230f      	movs	r3, #15
 8000f74:	18fb      	adds	r3, r7, r3
 8000f76:	781b      	ldrb	r3, [r3, #0]
}
 8000f78:	0018      	movs	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b005      	add	sp, #20
 8000f7e:	bd90      	pop	{r4, r7, pc}
 8000f80:	fffff0fe 	.word	0xfffff0fe

08000f84 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8000f84:	b5b0      	push	{r4, r5, r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	18fb      	adds	r3, r7, r3
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2234      	movs	r2, #52	; 0x34
 8000f98:	5c9b      	ldrb	r3, [r3, r2]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d101      	bne.n	8000fa2 <HAL_ADC_Stop+0x1e>
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	e029      	b.n	8000ff6 <HAL_ADC_Stop+0x72>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2234      	movs	r2, #52	; 0x34
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000faa:	250f      	movs	r5, #15
 8000fac:	197c      	adds	r4, r7, r5
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f000 face 	bl	8001552 <ADC_ConversionStop>
 8000fb6:	0003      	movs	r3, r0
 8000fb8:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000fba:	197b      	adds	r3, r7, r5
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d112      	bne.n	8000fe8 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000fc2:	197c      	adds	r4, r7, r5
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f000 fa52 	bl	8001470 <ADC_Disable>
 8000fcc:	0003      	movs	r3, r0
 8000fce:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000fd0:	197b      	adds	r3, r7, r5
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d107      	bne.n	8000fe8 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fdc:	4a08      	ldr	r2, [pc, #32]	; (8001000 <HAL_ADC_Stop+0x7c>)
 8000fde:	4013      	ands	r3, r2
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2234      	movs	r2, #52	; 0x34
 8000fec:	2100      	movs	r1, #0
 8000fee:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	781b      	ldrb	r3, [r3, #0]
}
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b004      	add	sp, #16
 8000ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	fffffefe 	.word	0xfffffefe

08001004 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	2b08      	cmp	r3, #8
 8001014:	d102      	bne.n	800101c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001016:	2308      	movs	r3, #8
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	e014      	b.n	8001046 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	2201      	movs	r2, #1
 8001024:	4013      	ands	r3, r2
 8001026:	2b01      	cmp	r3, #1
 8001028:	d10b      	bne.n	8001042 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102e:	2220      	movs	r2, #32
 8001030:	431a      	orrs	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2234      	movs	r2, #52	; 0x34
 800103a:	2100      	movs	r1, #0
 800103c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e071      	b.n	8001126 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001042:	230c      	movs	r3, #12
 8001044:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001046:	f7ff fddb 	bl	8000c00 <HAL_GetTick>
 800104a:	0003      	movs	r3, r0
 800104c:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800104e:	e01f      	b.n	8001090 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	3301      	adds	r3, #1
 8001054:	d01c      	beq.n	8001090 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d007      	beq.n	800106c <HAL_ADC_PollForConversion+0x68>
 800105c:	f7ff fdd0 	bl	8000c00 <HAL_GetTick>
 8001060:	0002      	movs	r2, r0
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	429a      	cmp	r2, r3
 800106a:	d211      	bcs.n	8001090 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	4013      	ands	r3, r2
 8001076:	d10b      	bne.n	8001090 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107c:	2204      	movs	r2, #4
 800107e:	431a      	orrs	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2234      	movs	r2, #52	; 0x34
 8001088:	2100      	movs	r1, #0
 800108a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e04a      	b.n	8001126 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	4013      	ands	r3, r2
 800109a:	d0d9      	beq.n	8001050 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a0:	2280      	movs	r2, #128	; 0x80
 80010a2:	0092      	lsls	r2, r2, #2
 80010a4:	431a      	orrs	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68da      	ldr	r2, [r3, #12]
 80010b0:	23c0      	movs	r3, #192	; 0xc0
 80010b2:	011b      	lsls	r3, r3, #4
 80010b4:	4013      	ands	r3, r2
 80010b6:	d12d      	bne.n	8001114 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d129      	bne.n	8001114 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2208      	movs	r2, #8
 80010c8:	4013      	ands	r3, r2
 80010ca:	2b08      	cmp	r3, #8
 80010cc:	d122      	bne.n	8001114 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	2204      	movs	r2, #4
 80010d6:	4013      	ands	r3, r2
 80010d8:	d110      	bne.n	80010fc <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	210c      	movs	r1, #12
 80010e6:	438a      	bics	r2, r1
 80010e8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ee:	4a10      	ldr	r2, [pc, #64]	; (8001130 <HAL_ADC_PollForConversion+0x12c>)
 80010f0:	4013      	ands	r3, r2
 80010f2:	2201      	movs	r2, #1
 80010f4:	431a      	orrs	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	639a      	str	r2, [r3, #56]	; 0x38
 80010fa:	e00b      	b.n	8001114 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001100:	2220      	movs	r2, #32
 8001102:	431a      	orrs	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800110c:	2201      	movs	r2, #1
 800110e:	431a      	orrs	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	7e1b      	ldrb	r3, [r3, #24]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d103      	bne.n	8001124 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	220c      	movs	r2, #12
 8001122:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	0018      	movs	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	b004      	add	sp, #16
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	fffffefe 	.word	0xfffffefe

08001134 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001142:	0018      	movs	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	b002      	add	sp, #8
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001156:	230f      	movs	r3, #15
 8001158:	18fb      	adds	r3, r7, r3
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	055b      	lsls	r3, r3, #21
 800116a:	429a      	cmp	r2, r3
 800116c:	d011      	beq.n	8001192 <HAL_ADC_ConfigChannel+0x46>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001172:	2b01      	cmp	r3, #1
 8001174:	d00d      	beq.n	8001192 <HAL_ADC_ConfigChannel+0x46>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117a:	2b02      	cmp	r3, #2
 800117c:	d009      	beq.n	8001192 <HAL_ADC_ConfigChannel+0x46>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001182:	2b03      	cmp	r3, #3
 8001184:	d005      	beq.n	8001192 <HAL_ADC_ConfigChannel+0x46>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118a:	2b04      	cmp	r3, #4
 800118c:	d001      	beq.n	8001192 <HAL_ADC_ConfigChannel+0x46>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2234      	movs	r2, #52	; 0x34
 8001196:	5c9b      	ldrb	r3, [r3, r2]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d101      	bne.n	80011a0 <HAL_ADC_ConfigChannel+0x54>
 800119c:	2302      	movs	r3, #2
 800119e:	e0d0      	b.n	8001342 <HAL_ADC_ConfigChannel+0x1f6>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2234      	movs	r2, #52	; 0x34
 80011a4:	2101      	movs	r1, #1
 80011a6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	2204      	movs	r2, #4
 80011b0:	4013      	ands	r3, r2
 80011b2:	d000      	beq.n	80011b6 <HAL_ADC_ConfigChannel+0x6a>
 80011b4:	e0b4      	b.n	8001320 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	4a64      	ldr	r2, [pc, #400]	; (800134c <HAL_ADC_ConfigChannel+0x200>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d100      	bne.n	80011c2 <HAL_ADC_ConfigChannel+0x76>
 80011c0:	e082      	b.n	80012c8 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2201      	movs	r2, #1
 80011ce:	409a      	lsls	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	430a      	orrs	r2, r1
 80011d6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	055b      	lsls	r3, r3, #21
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d037      	beq.n	8001254 <HAL_ADC_ConfigChannel+0x108>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d033      	beq.n	8001254 <HAL_ADC_ConfigChannel+0x108>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d02f      	beq.n	8001254 <HAL_ADC_ConfigChannel+0x108>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d02b      	beq.n	8001254 <HAL_ADC_ConfigChannel+0x108>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001200:	2b04      	cmp	r3, #4
 8001202:	d027      	beq.n	8001254 <HAL_ADC_ConfigChannel+0x108>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001208:	2b05      	cmp	r3, #5
 800120a:	d023      	beq.n	8001254 <HAL_ADC_ConfigChannel+0x108>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001210:	2b06      	cmp	r3, #6
 8001212:	d01f      	beq.n	8001254 <HAL_ADC_ConfigChannel+0x108>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001218:	2b07      	cmp	r3, #7
 800121a:	d01b      	beq.n	8001254 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	2107      	movs	r1, #7
 8001228:	400b      	ands	r3, r1
 800122a:	429a      	cmp	r2, r3
 800122c:	d012      	beq.n	8001254 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	695a      	ldr	r2, [r3, #20]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2107      	movs	r1, #7
 800123a:	438a      	bics	r2, r1
 800123c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6959      	ldr	r1, [r3, #20]
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	2207      	movs	r2, #7
 800124a:	401a      	ands	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	430a      	orrs	r2, r1
 8001252:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b10      	cmp	r3, #16
 800125a:	d007      	beq.n	800126c <HAL_ADC_ConfigChannel+0x120>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b11      	cmp	r3, #17
 8001262:	d003      	beq.n	800126c <HAL_ADC_ConfigChannel+0x120>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b12      	cmp	r3, #18
 800126a:	d163      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800126c:	4b38      	ldr	r3, [pc, #224]	; (8001350 <HAL_ADC_ConfigChannel+0x204>)
 800126e:	6819      	ldr	r1, [r3, #0]
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b10      	cmp	r3, #16
 8001276:	d009      	beq.n	800128c <HAL_ADC_ConfigChannel+0x140>
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b11      	cmp	r3, #17
 800127e:	d102      	bne.n	8001286 <HAL_ADC_ConfigChannel+0x13a>
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	03db      	lsls	r3, r3, #15
 8001284:	e004      	b.n	8001290 <HAL_ADC_ConfigChannel+0x144>
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	045b      	lsls	r3, r3, #17
 800128a:	e001      	b.n	8001290 <HAL_ADC_ConfigChannel+0x144>
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	041b      	lsls	r3, r3, #16
 8001290:	4a2f      	ldr	r2, [pc, #188]	; (8001350 <HAL_ADC_ConfigChannel+0x204>)
 8001292:	430b      	orrs	r3, r1
 8001294:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b10      	cmp	r3, #16
 800129c:	d14a      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800129e:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <HAL_ADC_ConfigChannel+0x208>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	492d      	ldr	r1, [pc, #180]	; (8001358 <HAL_ADC_ConfigChannel+0x20c>)
 80012a4:	0018      	movs	r0, r3
 80012a6:	f7fe ff2f 	bl	8000108 <__udivsi3>
 80012aa:	0003      	movs	r3, r0
 80012ac:	001a      	movs	r2, r3
 80012ae:	0013      	movs	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	189b      	adds	r3, r3, r2
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012b8:	e002      	b.n	80012c0 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	3b01      	subs	r3, #1
 80012be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f9      	bne.n	80012ba <HAL_ADC_ConfigChannel+0x16e>
 80012c6:	e035      	b.n	8001334 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2101      	movs	r1, #1
 80012d4:	4099      	lsls	r1, r3
 80012d6:	000b      	movs	r3, r1
 80012d8:	43d9      	mvns	r1, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	400a      	ands	r2, r1
 80012e0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b10      	cmp	r3, #16
 80012e8:	d007      	beq.n	80012fa <HAL_ADC_ConfigChannel+0x1ae>
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b11      	cmp	r3, #17
 80012f0:	d003      	beq.n	80012fa <HAL_ADC_ConfigChannel+0x1ae>
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b12      	cmp	r3, #18
 80012f8:	d11c      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_ADC_ConfigChannel+0x204>)
 80012fc:	6819      	ldr	r1, [r3, #0]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b10      	cmp	r3, #16
 8001304:	d007      	beq.n	8001316 <HAL_ADC_ConfigChannel+0x1ca>
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b11      	cmp	r3, #17
 800130c:	d101      	bne.n	8001312 <HAL_ADC_ConfigChannel+0x1c6>
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <HAL_ADC_ConfigChannel+0x210>)
 8001310:	e002      	b.n	8001318 <HAL_ADC_ConfigChannel+0x1cc>
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_ADC_ConfigChannel+0x214>)
 8001314:	e000      	b.n	8001318 <HAL_ADC_ConfigChannel+0x1cc>
 8001316:	4b13      	ldr	r3, [pc, #76]	; (8001364 <HAL_ADC_ConfigChannel+0x218>)
 8001318:	4a0d      	ldr	r2, [pc, #52]	; (8001350 <HAL_ADC_ConfigChannel+0x204>)
 800131a:	400b      	ands	r3, r1
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	e009      	b.n	8001334 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001324:	2220      	movs	r2, #32
 8001326:	431a      	orrs	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800132c:	230f      	movs	r3, #15
 800132e:	18fb      	adds	r3, r7, r3
 8001330:	2201      	movs	r2, #1
 8001332:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2234      	movs	r2, #52	; 0x34
 8001338:	2100      	movs	r1, #0
 800133a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800133c:	230f      	movs	r3, #15
 800133e:	18fb      	adds	r3, r7, r3
 8001340:	781b      	ldrb	r3, [r3, #0]
}
 8001342:	0018      	movs	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	b004      	add	sp, #16
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	00001001 	.word	0x00001001
 8001350:	40012708 	.word	0x40012708
 8001354:	20000004 	.word	0x20000004
 8001358:	000f4240 	.word	0x000f4240
 800135c:	ffbfffff 	.word	0xffbfffff
 8001360:	feffffff 	.word	0xfeffffff
 8001364:	ff7fffff 	.word	0xff7fffff

08001368 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	2203      	movs	r2, #3
 8001380:	4013      	ands	r3, r2
 8001382:	2b01      	cmp	r3, #1
 8001384:	d112      	bne.n	80013ac <ADC_Enable+0x44>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2201      	movs	r2, #1
 800138e:	4013      	ands	r3, r2
 8001390:	2b01      	cmp	r3, #1
 8001392:	d009      	beq.n	80013a8 <ADC_Enable+0x40>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68da      	ldr	r2, [r3, #12]
 800139a:	2380      	movs	r3, #128	; 0x80
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	401a      	ands	r2, r3
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d101      	bne.n	80013ac <ADC_Enable+0x44>
 80013a8:	2301      	movs	r3, #1
 80013aa:	e000      	b.n	80013ae <ADC_Enable+0x46>
 80013ac:	2300      	movs	r3, #0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d152      	bne.n	8001458 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	4a2a      	ldr	r2, [pc, #168]	; (8001464 <ADC_Enable+0xfc>)
 80013ba:	4013      	ands	r3, r2
 80013bc:	d00d      	beq.n	80013da <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c2:	2210      	movs	r2, #16
 80013c4:	431a      	orrs	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ce:	2201      	movs	r2, #1
 80013d0:	431a      	orrs	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e03f      	b.n	800145a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2101      	movs	r1, #1
 80013e6:	430a      	orrs	r2, r1
 80013e8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013ea:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <ADC_Enable+0x100>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	491f      	ldr	r1, [pc, #124]	; (800146c <ADC_Enable+0x104>)
 80013f0:	0018      	movs	r0, r3
 80013f2:	f7fe fe89 	bl	8000108 <__udivsi3>
 80013f6:	0003      	movs	r3, r0
 80013f8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013fa:	e002      	b.n	8001402 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	3b01      	subs	r3, #1
 8001400:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f9      	bne.n	80013fc <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001408:	f7ff fbfa 	bl	8000c00 <HAL_GetTick>
 800140c:	0003      	movs	r3, r0
 800140e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001410:	e01b      	b.n	800144a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001412:	f7ff fbf5 	bl	8000c00 <HAL_GetTick>
 8001416:	0002      	movs	r2, r0
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d914      	bls.n	800144a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2201      	movs	r2, #1
 8001428:	4013      	ands	r3, r2
 800142a:	2b01      	cmp	r3, #1
 800142c:	d00d      	beq.n	800144a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001432:	2210      	movs	r2, #16
 8001434:	431a      	orrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800143e:	2201      	movs	r2, #1
 8001440:	431a      	orrs	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e007      	b.n	800145a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2201      	movs	r2, #1
 8001452:	4013      	ands	r3, r2
 8001454:	2b01      	cmp	r3, #1
 8001456:	d1dc      	bne.n	8001412 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	0018      	movs	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	b004      	add	sp, #16
 8001460:	bd80      	pop	{r7, pc}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	80000017 	.word	0x80000017
 8001468:	20000004 	.word	0x20000004
 800146c:	000f4240 	.word	0x000f4240

08001470 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2203      	movs	r2, #3
 8001484:	4013      	ands	r3, r2
 8001486:	2b01      	cmp	r3, #1
 8001488:	d112      	bne.n	80014b0 <ADC_Disable+0x40>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2201      	movs	r2, #1
 8001492:	4013      	ands	r3, r2
 8001494:	2b01      	cmp	r3, #1
 8001496:	d009      	beq.n	80014ac <ADC_Disable+0x3c>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	401a      	ands	r2, r3
 80014a4:	2380      	movs	r3, #128	; 0x80
 80014a6:	021b      	lsls	r3, r3, #8
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d101      	bne.n	80014b0 <ADC_Disable+0x40>
 80014ac:	2301      	movs	r3, #1
 80014ae:	e000      	b.n	80014b2 <ADC_Disable+0x42>
 80014b0:	2300      	movs	r3, #0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d048      	beq.n	8001548 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2205      	movs	r2, #5
 80014be:	4013      	ands	r3, r2
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d110      	bne.n	80014e6 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2102      	movs	r1, #2
 80014d0:	430a      	orrs	r2, r1
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2203      	movs	r2, #3
 80014da:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014dc:	f7ff fb90 	bl	8000c00 <HAL_GetTick>
 80014e0:	0003      	movs	r3, r0
 80014e2:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80014e4:	e029      	b.n	800153a <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ea:	2210      	movs	r2, #16
 80014ec:	431a      	orrs	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f6:	2201      	movs	r2, #1
 80014f8:	431a      	orrs	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e023      	b.n	800154a <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001502:	f7ff fb7d 	bl	8000c00 <HAL_GetTick>
 8001506:	0002      	movs	r2, r0
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d914      	bls.n	800153a <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2201      	movs	r2, #1
 8001518:	4013      	ands	r3, r2
 800151a:	2b01      	cmp	r3, #1
 800151c:	d10d      	bne.n	800153a <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001522:	2210      	movs	r2, #16
 8001524:	431a      	orrs	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152e:	2201      	movs	r2, #1
 8001530:	431a      	orrs	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e007      	b.n	800154a <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2201      	movs	r2, #1
 8001542:	4013      	ands	r3, r2
 8001544:	2b01      	cmp	r3, #1
 8001546:	d0dc      	beq.n	8001502 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	0018      	movs	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	b004      	add	sp, #16
 8001550:	bd80      	pop	{r7, pc}

08001552 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b084      	sub	sp, #16
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2204      	movs	r2, #4
 8001566:	4013      	ands	r3, r2
 8001568:	d03a      	beq.n	80015e0 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2204      	movs	r2, #4
 8001572:	4013      	ands	r3, r2
 8001574:	2b04      	cmp	r3, #4
 8001576:	d10d      	bne.n	8001594 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2202      	movs	r2, #2
 8001580:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001582:	d107      	bne.n	8001594 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2110      	movs	r1, #16
 8001590:	430a      	orrs	r2, r1
 8001592:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001594:	f7ff fb34 	bl	8000c00 <HAL_GetTick>
 8001598:	0003      	movs	r3, r0
 800159a:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800159c:	e01a      	b.n	80015d4 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800159e:	f7ff fb2f 	bl	8000c00 <HAL_GetTick>
 80015a2:	0002      	movs	r2, r0
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d913      	bls.n	80015d4 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	2204      	movs	r2, #4
 80015b4:	4013      	ands	r3, r2
 80015b6:	d00d      	beq.n	80015d4 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015bc:	2210      	movs	r2, #16
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c8:	2201      	movs	r2, #1
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e006      	b.n	80015e2 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2204      	movs	r2, #4
 80015dc:	4013      	ands	r3, r2
 80015de:	d1de      	bne.n	800159e <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	0018      	movs	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b004      	add	sp, #16
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	0002      	movs	r2, r0
 80015f4:	1dfb      	adds	r3, r7, #7
 80015f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015f8:	1dfb      	adds	r3, r7, #7
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b7f      	cmp	r3, #127	; 0x7f
 80015fe:	d809      	bhi.n	8001614 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001600:	1dfb      	adds	r3, r7, #7
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	001a      	movs	r2, r3
 8001606:	231f      	movs	r3, #31
 8001608:	401a      	ands	r2, r3
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <__NVIC_EnableIRQ+0x30>)
 800160c:	2101      	movs	r1, #1
 800160e:	4091      	lsls	r1, r2
 8001610:	000a      	movs	r2, r1
 8001612:	601a      	str	r2, [r3, #0]
  }
}
 8001614:	46c0      	nop			; (mov r8, r8)
 8001616:	46bd      	mov	sp, r7
 8001618:	b002      	add	sp, #8
 800161a:	bd80      	pop	{r7, pc}
 800161c:	e000e100 	.word	0xe000e100

08001620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	0002      	movs	r2, r0
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	1dfb      	adds	r3, r7, #7
 800162c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800162e:	1dfb      	adds	r3, r7, #7
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b7f      	cmp	r3, #127	; 0x7f
 8001634:	d828      	bhi.n	8001688 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001636:	4a2f      	ldr	r2, [pc, #188]	; (80016f4 <__NVIC_SetPriority+0xd4>)
 8001638:	1dfb      	adds	r3, r7, #7
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b25b      	sxtb	r3, r3
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	33c0      	adds	r3, #192	; 0xc0
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	589b      	ldr	r3, [r3, r2]
 8001646:	1dfa      	adds	r2, r7, #7
 8001648:	7812      	ldrb	r2, [r2, #0]
 800164a:	0011      	movs	r1, r2
 800164c:	2203      	movs	r2, #3
 800164e:	400a      	ands	r2, r1
 8001650:	00d2      	lsls	r2, r2, #3
 8001652:	21ff      	movs	r1, #255	; 0xff
 8001654:	4091      	lsls	r1, r2
 8001656:	000a      	movs	r2, r1
 8001658:	43d2      	mvns	r2, r2
 800165a:	401a      	ands	r2, r3
 800165c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	019b      	lsls	r3, r3, #6
 8001662:	22ff      	movs	r2, #255	; 0xff
 8001664:	401a      	ands	r2, r3
 8001666:	1dfb      	adds	r3, r7, #7
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	0018      	movs	r0, r3
 800166c:	2303      	movs	r3, #3
 800166e:	4003      	ands	r3, r0
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001674:	481f      	ldr	r0, [pc, #124]	; (80016f4 <__NVIC_SetPriority+0xd4>)
 8001676:	1dfb      	adds	r3, r7, #7
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	b25b      	sxtb	r3, r3
 800167c:	089b      	lsrs	r3, r3, #2
 800167e:	430a      	orrs	r2, r1
 8001680:	33c0      	adds	r3, #192	; 0xc0
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001686:	e031      	b.n	80016ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001688:	4a1b      	ldr	r2, [pc, #108]	; (80016f8 <__NVIC_SetPriority+0xd8>)
 800168a:	1dfb      	adds	r3, r7, #7
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	0019      	movs	r1, r3
 8001690:	230f      	movs	r3, #15
 8001692:	400b      	ands	r3, r1
 8001694:	3b08      	subs	r3, #8
 8001696:	089b      	lsrs	r3, r3, #2
 8001698:	3306      	adds	r3, #6
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	18d3      	adds	r3, r2, r3
 800169e:	3304      	adds	r3, #4
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	1dfa      	adds	r2, r7, #7
 80016a4:	7812      	ldrb	r2, [r2, #0]
 80016a6:	0011      	movs	r1, r2
 80016a8:	2203      	movs	r2, #3
 80016aa:	400a      	ands	r2, r1
 80016ac:	00d2      	lsls	r2, r2, #3
 80016ae:	21ff      	movs	r1, #255	; 0xff
 80016b0:	4091      	lsls	r1, r2
 80016b2:	000a      	movs	r2, r1
 80016b4:	43d2      	mvns	r2, r2
 80016b6:	401a      	ands	r2, r3
 80016b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	019b      	lsls	r3, r3, #6
 80016be:	22ff      	movs	r2, #255	; 0xff
 80016c0:	401a      	ands	r2, r3
 80016c2:	1dfb      	adds	r3, r7, #7
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	0018      	movs	r0, r3
 80016c8:	2303      	movs	r3, #3
 80016ca:	4003      	ands	r3, r0
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016d0:	4809      	ldr	r0, [pc, #36]	; (80016f8 <__NVIC_SetPriority+0xd8>)
 80016d2:	1dfb      	adds	r3, r7, #7
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	001c      	movs	r4, r3
 80016d8:	230f      	movs	r3, #15
 80016da:	4023      	ands	r3, r4
 80016dc:	3b08      	subs	r3, #8
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	430a      	orrs	r2, r1
 80016e2:	3306      	adds	r3, #6
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	18c3      	adds	r3, r0, r3
 80016e8:	3304      	adds	r3, #4
 80016ea:	601a      	str	r2, [r3, #0]
}
 80016ec:	46c0      	nop			; (mov r8, r8)
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b003      	add	sp, #12
 80016f2:	bd90      	pop	{r4, r7, pc}
 80016f4:	e000e100 	.word	0xe000e100
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	1e5a      	subs	r2, r3, #1
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	045b      	lsls	r3, r3, #17
 800170c:	429a      	cmp	r2, r3
 800170e:	d301      	bcc.n	8001714 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001710:	2301      	movs	r3, #1
 8001712:	e010      	b.n	8001736 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001714:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <SysTick_Config+0x44>)
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	3a01      	subs	r2, #1
 800171a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171c:	2301      	movs	r3, #1
 800171e:	425b      	negs	r3, r3
 8001720:	2103      	movs	r1, #3
 8001722:	0018      	movs	r0, r3
 8001724:	f7ff ff7c 	bl	8001620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <SysTick_Config+0x44>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172e:	4b04      	ldr	r3, [pc, #16]	; (8001740 <SysTick_Config+0x44>)
 8001730:	2207      	movs	r2, #7
 8001732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001734:	2300      	movs	r3, #0
}
 8001736:	0018      	movs	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	b002      	add	sp, #8
 800173c:	bd80      	pop	{r7, pc}
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	e000e010 	.word	0xe000e010

08001744 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
 800174e:	210f      	movs	r1, #15
 8001750:	187b      	adds	r3, r7, r1
 8001752:	1c02      	adds	r2, r0, #0
 8001754:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	187b      	adds	r3, r7, r1
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	b25b      	sxtb	r3, r3
 800175e:	0011      	movs	r1, r2
 8001760:	0018      	movs	r0, r3
 8001762:	f7ff ff5d 	bl	8001620 <__NVIC_SetPriority>
}
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	46bd      	mov	sp, r7
 800176a:	b004      	add	sp, #16
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	0002      	movs	r2, r0
 8001776:	1dfb      	adds	r3, r7, #7
 8001778:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177a:	1dfb      	adds	r3, r7, #7
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	b25b      	sxtb	r3, r3
 8001780:	0018      	movs	r0, r3
 8001782:	f7ff ff33 	bl	80015ec <__NVIC_EnableIRQ>
}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	46bd      	mov	sp, r7
 800178a:	b002      	add	sp, #8
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	0018      	movs	r0, r3
 800179a:	f7ff ffaf 	bl	80016fc <SysTick_Config>
 800179e:	0003      	movs	r3, r0
}
 80017a0:	0018      	movs	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b002      	add	sp, #8
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e036      	b.n	800182c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2221      	movs	r2, #33	; 0x21
 80017c2:	2102      	movs	r1, #2
 80017c4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4a18      	ldr	r2, [pc, #96]	; (8001834 <HAL_DMA_Init+0x8c>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80017de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	4313      	orrs	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	0018      	movs	r0, r3
 8001810:	f000 f932 	bl	8001a78 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2221      	movs	r2, #33	; 0x21
 800181e:	2101      	movs	r1, #1
 8001820:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2220      	movs	r2, #32
 8001826:	2100      	movs	r1, #0
 8001828:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800182a:	2300      	movs	r3, #0
}  
 800182c:	0018      	movs	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	b004      	add	sp, #16
 8001832:	bd80      	pop	{r7, pc}
 8001834:	ffffc00f 	.word	0xffffc00f

08001838 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2221      	movs	r2, #33	; 0x21
 8001844:	5c9b      	ldrb	r3, [r3, r2]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d008      	beq.n	800185e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2204      	movs	r2, #4
 8001850:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2220      	movs	r2, #32
 8001856:	2100      	movs	r1, #0
 8001858:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e020      	b.n	80018a0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	210e      	movs	r1, #14
 800186a:	438a      	bics	r2, r1
 800186c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2101      	movs	r1, #1
 800187a:	438a      	bics	r2, r1
 800187c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001886:	2101      	movs	r1, #1
 8001888:	4091      	lsls	r1, r2
 800188a:	000a      	movs	r2, r1
 800188c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2221      	movs	r2, #33	; 0x21
 8001892:	2101      	movs	r1, #1
 8001894:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2220      	movs	r2, #32
 800189a:	2100      	movs	r1, #0
 800189c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	0018      	movs	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	b002      	add	sp, #8
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018b0:	210f      	movs	r1, #15
 80018b2:	187b      	adds	r3, r7, r1
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2221      	movs	r2, #33	; 0x21
 80018bc:	5c9b      	ldrb	r3, [r3, r2]
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d006      	beq.n	80018d2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2204      	movs	r2, #4
 80018c8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80018ca:	187b      	adds	r3, r7, r1
 80018cc:	2201      	movs	r2, #1
 80018ce:	701a      	strb	r2, [r3, #0]
 80018d0:	e028      	b.n	8001924 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	210e      	movs	r1, #14
 80018de:	438a      	bics	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2101      	movs	r1, #1
 80018ee:	438a      	bics	r2, r1
 80018f0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018fa:	2101      	movs	r1, #1
 80018fc:	4091      	lsls	r1, r2
 80018fe:	000a      	movs	r2, r1
 8001900:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2221      	movs	r2, #33	; 0x21
 8001906:	2101      	movs	r1, #1
 8001908:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2220      	movs	r2, #32
 800190e:	2100      	movs	r1, #0
 8001910:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001916:	2b00      	cmp	r3, #0
 8001918:	d004      	beq.n	8001924 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	0010      	movs	r0, r2
 8001922:	4798      	blx	r3
    } 
  }
  return status;
 8001924:	230f      	movs	r3, #15
 8001926:	18fb      	adds	r3, r7, r3
 8001928:	781b      	ldrb	r3, [r3, #0]
}
 800192a:	0018      	movs	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	b004      	add	sp, #16
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b084      	sub	sp, #16
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	2204      	movs	r2, #4
 8001950:	409a      	lsls	r2, r3
 8001952:	0013      	movs	r3, r2
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	4013      	ands	r3, r2
 8001958:	d024      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x72>
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2204      	movs	r2, #4
 800195e:	4013      	ands	r3, r2
 8001960:	d020      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2220      	movs	r2, #32
 800196a:	4013      	ands	r3, r2
 800196c:	d107      	bne.n	800197e <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2104      	movs	r1, #4
 800197a:	438a      	bics	r2, r1
 800197c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001986:	2104      	movs	r1, #4
 8001988:	4091      	lsls	r1, r2
 800198a:	000a      	movs	r2, r1
 800198c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001992:	2b00      	cmp	r3, #0
 8001994:	d100      	bne.n	8001998 <HAL_DMA_IRQHandler+0x66>
 8001996:	e06a      	b.n	8001a6e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	0010      	movs	r0, r2
 80019a0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80019a2:	e064      	b.n	8001a6e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	2202      	movs	r2, #2
 80019aa:	409a      	lsls	r2, r3
 80019ac:	0013      	movs	r3, r2
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	4013      	ands	r3, r2
 80019b2:	d02b      	beq.n	8001a0c <HAL_DMA_IRQHandler+0xda>
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2202      	movs	r2, #2
 80019b8:	4013      	ands	r3, r2
 80019ba:	d027      	beq.n	8001a0c <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2220      	movs	r2, #32
 80019c4:	4013      	ands	r3, r2
 80019c6:	d10b      	bne.n	80019e0 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	210a      	movs	r1, #10
 80019d4:	438a      	bics	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2221      	movs	r2, #33	; 0x21
 80019dc:	2101      	movs	r1, #1
 80019de:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e8:	2102      	movs	r1, #2
 80019ea:	4091      	lsls	r1, r2
 80019ec:	000a      	movs	r2, r1
 80019ee:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2220      	movs	r2, #32
 80019f4:	2100      	movs	r1, #0
 80019f6:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d036      	beq.n	8001a6e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	0010      	movs	r0, r2
 8001a08:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001a0a:	e030      	b.n	8001a6e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	2208      	movs	r2, #8
 8001a12:	409a      	lsls	r2, r3
 8001a14:	0013      	movs	r3, r2
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d028      	beq.n	8001a6e <HAL_DMA_IRQHandler+0x13c>
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2208      	movs	r2, #8
 8001a20:	4013      	ands	r3, r2
 8001a22:	d024      	beq.n	8001a6e <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	210e      	movs	r1, #14
 8001a30:	438a      	bics	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	4091      	lsls	r1, r2
 8001a40:	000a      	movs	r2, r1
 8001a42:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2221      	movs	r2, #33	; 0x21
 8001a4e:	2101      	movs	r1, #1
 8001a50:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2220      	movs	r2, #32
 8001a56:	2100      	movs	r1, #0
 8001a58:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d005      	beq.n	8001a6e <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	0010      	movs	r0, r2
 8001a6a:	4798      	blx	r3
    }
   }
}  
 8001a6c:	e7ff      	b.n	8001a6e <HAL_DMA_IRQHandler+0x13c>
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	46bd      	mov	sp, r7
 8001a72:	b004      	add	sp, #16
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a08      	ldr	r2, [pc, #32]	; (8001aa8 <DMA_CalcBaseAndBitshift+0x30>)
 8001a86:	4694      	mov	ip, r2
 8001a88:	4463      	add	r3, ip
 8001a8a:	2114      	movs	r1, #20
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f7fe fb3b 	bl	8000108 <__udivsi3>
 8001a92:	0003      	movs	r3, r0
 8001a94:	009a      	lsls	r2, r3, #2
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a03      	ldr	r2, [pc, #12]	; (8001aac <DMA_CalcBaseAndBitshift+0x34>)
 8001a9e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001aa0:	46c0      	nop			; (mov r8, r8)
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b002      	add	sp, #8
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	bffdfff8 	.word	0xbffdfff8
 8001aac:	40020000 	.word	0x40020000

08001ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001abe:	e14f      	b.n	8001d60 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	4091      	lsls	r1, r2
 8001aca:	000a      	movs	r2, r1
 8001acc:	4013      	ands	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d100      	bne.n	8001ad8 <HAL_GPIO_Init+0x28>
 8001ad6:	e140      	b.n	8001d5a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2203      	movs	r2, #3
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d005      	beq.n	8001af0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2203      	movs	r2, #3
 8001aea:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d130      	bne.n	8001b52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2203      	movs	r2, #3
 8001afc:	409a      	lsls	r2, r3
 8001afe:	0013      	movs	r3, r2
 8001b00:	43da      	mvns	r2, r3
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	409a      	lsls	r2, r3
 8001b12:	0013      	movs	r3, r2
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b26:	2201      	movs	r2, #1
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	0013      	movs	r3, r2
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	091b      	lsrs	r3, r3, #4
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	401a      	ands	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	409a      	lsls	r2, r3
 8001b44:	0013      	movs	r3, r2
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2203      	movs	r2, #3
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d017      	beq.n	8001b8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	2203      	movs	r2, #3
 8001b6a:	409a      	lsls	r2, r3
 8001b6c:	0013      	movs	r3, r2
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	0013      	movs	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2203      	movs	r2, #3
 8001b94:	4013      	ands	r3, r2
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d123      	bne.n	8001be2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	08da      	lsrs	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3208      	adds	r2, #8
 8001ba2:	0092      	lsls	r2, r2, #2
 8001ba4:	58d3      	ldr	r3, [r2, r3]
 8001ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	2207      	movs	r2, #7
 8001bac:	4013      	ands	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	220f      	movs	r2, #15
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	0013      	movs	r3, r2
 8001bb6:	43da      	mvns	r2, r3
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	691a      	ldr	r2, [r3, #16]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	2107      	movs	r1, #7
 8001bc6:	400b      	ands	r3, r1
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	0013      	movs	r3, r2
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	08da      	lsrs	r2, r3, #3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3208      	adds	r2, #8
 8001bdc:	0092      	lsls	r2, r2, #2
 8001bde:	6939      	ldr	r1, [r7, #16]
 8001be0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	2203      	movs	r2, #3
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	0013      	movs	r3, r2
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2203      	movs	r2, #3
 8001c00:	401a      	ands	r2, r3
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	409a      	lsls	r2, r3
 8001c08:	0013      	movs	r3, r2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	23c0      	movs	r3, #192	; 0xc0
 8001c1c:	029b      	lsls	r3, r3, #10
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d100      	bne.n	8001c24 <HAL_GPIO_Init+0x174>
 8001c22:	e09a      	b.n	8001d5a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c24:	4b54      	ldr	r3, [pc, #336]	; (8001d78 <HAL_GPIO_Init+0x2c8>)
 8001c26:	699a      	ldr	r2, [r3, #24]
 8001c28:	4b53      	ldr	r3, [pc, #332]	; (8001d78 <HAL_GPIO_Init+0x2c8>)
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	619a      	str	r2, [r3, #24]
 8001c30:	4b51      	ldr	r3, [pc, #324]	; (8001d78 <HAL_GPIO_Init+0x2c8>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	2201      	movs	r2, #1
 8001c36:	4013      	ands	r3, r2
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c3c:	4a4f      	ldr	r2, [pc, #316]	; (8001d7c <HAL_GPIO_Init+0x2cc>)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	589b      	ldr	r3, [r3, r2]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	4013      	ands	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	220f      	movs	r2, #15
 8001c54:	409a      	lsls	r2, r3
 8001c56:	0013      	movs	r3, r2
 8001c58:	43da      	mvns	r2, r3
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	2390      	movs	r3, #144	; 0x90
 8001c64:	05db      	lsls	r3, r3, #23
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d013      	beq.n	8001c92 <HAL_GPIO_Init+0x1e2>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a44      	ldr	r2, [pc, #272]	; (8001d80 <HAL_GPIO_Init+0x2d0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d00d      	beq.n	8001c8e <HAL_GPIO_Init+0x1de>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a43      	ldr	r2, [pc, #268]	; (8001d84 <HAL_GPIO_Init+0x2d4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d007      	beq.n	8001c8a <HAL_GPIO_Init+0x1da>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a42      	ldr	r2, [pc, #264]	; (8001d88 <HAL_GPIO_Init+0x2d8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d101      	bne.n	8001c86 <HAL_GPIO_Init+0x1d6>
 8001c82:	2303      	movs	r3, #3
 8001c84:	e006      	b.n	8001c94 <HAL_GPIO_Init+0x1e4>
 8001c86:	2305      	movs	r3, #5
 8001c88:	e004      	b.n	8001c94 <HAL_GPIO_Init+0x1e4>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e002      	b.n	8001c94 <HAL_GPIO_Init+0x1e4>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <HAL_GPIO_Init+0x1e4>
 8001c92:	2300      	movs	r3, #0
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	2103      	movs	r1, #3
 8001c98:	400a      	ands	r2, r1
 8001c9a:	0092      	lsls	r2, r2, #2
 8001c9c:	4093      	lsls	r3, r2
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ca4:	4935      	ldr	r1, [pc, #212]	; (8001d7c <HAL_GPIO_Init+0x2cc>)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	089b      	lsrs	r3, r3, #2
 8001caa:	3302      	adds	r3, #2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cb2:	4b36      	ldr	r3, [pc, #216]	; (8001d8c <HAL_GPIO_Init+0x2dc>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	43da      	mvns	r2, r3
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	2380      	movs	r3, #128	; 0x80
 8001cc8:	025b      	lsls	r3, r3, #9
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001cd6:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <HAL_GPIO_Init+0x2dc>)
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001cdc:	4b2b      	ldr	r3, [pc, #172]	; (8001d8c <HAL_GPIO_Init+0x2dc>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	43da      	mvns	r2, r3
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	029b      	lsls	r3, r3, #10
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d00:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <HAL_GPIO_Init+0x2dc>)
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d06:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <HAL_GPIO_Init+0x2dc>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4013      	ands	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	035b      	lsls	r3, r3, #13
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d2a:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <HAL_GPIO_Init+0x2dc>)
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001d30:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <HAL_GPIO_Init+0x2dc>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	43da      	mvns	r2, r3
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	039b      	lsls	r3, r3, #14
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d54:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <HAL_GPIO_Init+0x2dc>)
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	40da      	lsrs	r2, r3
 8001d68:	1e13      	subs	r3, r2, #0
 8001d6a:	d000      	beq.n	8001d6e <HAL_GPIO_Init+0x2be>
 8001d6c:	e6a8      	b.n	8001ac0 <HAL_GPIO_Init+0x10>
  } 
}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	46c0      	nop			; (mov r8, r8)
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b006      	add	sp, #24
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40010000 	.word	0x40010000
 8001d80:	48000400 	.word	0x48000400
 8001d84:	48000800 	.word	0x48000800
 8001d88:	48000c00 	.word	0x48000c00
 8001d8c:	40010400 	.word	0x40010400

08001d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	0008      	movs	r0, r1
 8001d9a:	0011      	movs	r1, r2
 8001d9c:	1cbb      	adds	r3, r7, #2
 8001d9e:	1c02      	adds	r2, r0, #0
 8001da0:	801a      	strh	r2, [r3, #0]
 8001da2:	1c7b      	adds	r3, r7, #1
 8001da4:	1c0a      	adds	r2, r1, #0
 8001da6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001da8:	1c7b      	adds	r3, r7, #1
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d004      	beq.n	8001dba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001db0:	1cbb      	adds	r3, r7, #2
 8001db2:	881a      	ldrh	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001db8:	e003      	b.n	8001dc2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dba:	1cbb      	adds	r3, r7, #2
 8001dbc:	881a      	ldrh	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	b002      	add	sp, #8
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	1dbb      	adds	r3, r7, #6
 8001dd6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	1dba      	adds	r2, r7, #6
 8001dde:	8812      	ldrh	r2, [r2, #0]
 8001de0:	4013      	ands	r3, r2
 8001de2:	d008      	beq.n	8001df6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001de6:	1dba      	adds	r2, r7, #6
 8001de8:	8812      	ldrh	r2, [r2, #0]
 8001dea:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dec:	1dbb      	adds	r3, r7, #6
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	0018      	movs	r0, r3
 8001df2:	f000 f807 	bl	8001e04 <HAL_GPIO_EXTI_Callback>
  }
}
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	b002      	add	sp, #8
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	40010400 	.word	0x40010400

08001e04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	0002      	movs	r2, r0
 8001e0c:	1dbb      	adds	r3, r7, #6
 8001e0e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001e10:	46c0      	nop			; (mov r8, r8)
 8001e12:	46bd      	mov	sp, r7
 8001e14:	b002      	add	sp, #8
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e301      	b.n	800242e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	4013      	ands	r3, r2
 8001e32:	d100      	bne.n	8001e36 <HAL_RCC_OscConfig+0x1e>
 8001e34:	e08d      	b.n	8001f52 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e36:	4bc3      	ldr	r3, [pc, #780]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d00e      	beq.n	8001e60 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e42:	4bc0      	ldr	r3, [pc, #768]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	220c      	movs	r2, #12
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b08      	cmp	r3, #8
 8001e4c:	d116      	bne.n	8001e7c <HAL_RCC_OscConfig+0x64>
 8001e4e:	4bbd      	ldr	r3, [pc, #756]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	2380      	movs	r3, #128	; 0x80
 8001e54:	025b      	lsls	r3, r3, #9
 8001e56:	401a      	ands	r2, r3
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	025b      	lsls	r3, r3, #9
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d10d      	bne.n	8001e7c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	4bb8      	ldr	r3, [pc, #736]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	029b      	lsls	r3, r3, #10
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d100      	bne.n	8001e6e <HAL_RCC_OscConfig+0x56>
 8001e6c:	e070      	b.n	8001f50 <HAL_RCC_OscConfig+0x138>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d000      	beq.n	8001e78 <HAL_RCC_OscConfig+0x60>
 8001e76:	e06b      	b.n	8001f50 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e2d8      	b.n	800242e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d107      	bne.n	8001e94 <HAL_RCC_OscConfig+0x7c>
 8001e84:	4baf      	ldr	r3, [pc, #700]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4bae      	ldr	r3, [pc, #696]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001e8a:	2180      	movs	r1, #128	; 0x80
 8001e8c:	0249      	lsls	r1, r1, #9
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	e02f      	b.n	8001ef4 <HAL_RCC_OscConfig+0xdc>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10c      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x9e>
 8001e9c:	4ba9      	ldr	r3, [pc, #676]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4ba8      	ldr	r3, [pc, #672]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001ea2:	49a9      	ldr	r1, [pc, #676]	; (8002148 <HAL_RCC_OscConfig+0x330>)
 8001ea4:	400a      	ands	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	4ba6      	ldr	r3, [pc, #664]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4ba5      	ldr	r3, [pc, #660]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001eae:	49a7      	ldr	r1, [pc, #668]	; (800214c <HAL_RCC_OscConfig+0x334>)
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	e01e      	b.n	8001ef4 <HAL_RCC_OscConfig+0xdc>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b05      	cmp	r3, #5
 8001ebc:	d10e      	bne.n	8001edc <HAL_RCC_OscConfig+0xc4>
 8001ebe:	4ba1      	ldr	r3, [pc, #644]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	4ba0      	ldr	r3, [pc, #640]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	02c9      	lsls	r1, r1, #11
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	4b9d      	ldr	r3, [pc, #628]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4b9c      	ldr	r3, [pc, #624]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001ed2:	2180      	movs	r1, #128	; 0x80
 8001ed4:	0249      	lsls	r1, r1, #9
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	e00b      	b.n	8001ef4 <HAL_RCC_OscConfig+0xdc>
 8001edc:	4b99      	ldr	r3, [pc, #612]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b98      	ldr	r3, [pc, #608]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001ee2:	4999      	ldr	r1, [pc, #612]	; (8002148 <HAL_RCC_OscConfig+0x330>)
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	4b96      	ldr	r3, [pc, #600]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b95      	ldr	r3, [pc, #596]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001eee:	4997      	ldr	r1, [pc, #604]	; (800214c <HAL_RCC_OscConfig+0x334>)
 8001ef0:	400a      	ands	r2, r1
 8001ef2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d014      	beq.n	8001f26 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7fe fe80 	bl	8000c00 <HAL_GetTick>
 8001f00:	0003      	movs	r3, r0
 8001f02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f06:	f7fe fe7b 	bl	8000c00 <HAL_GetTick>
 8001f0a:	0002      	movs	r2, r0
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b64      	cmp	r3, #100	; 0x64
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e28a      	b.n	800242e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f18:	4b8a      	ldr	r3, [pc, #552]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	029b      	lsls	r3, r3, #10
 8001f20:	4013      	ands	r3, r2
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0xee>
 8001f24:	e015      	b.n	8001f52 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7fe fe6b 	bl	8000c00 <HAL_GetTick>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f30:	f7fe fe66 	bl	8000c00 <HAL_GetTick>
 8001f34:	0002      	movs	r2, r0
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	; 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e275      	b.n	800242e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f42:	4b80      	ldr	r3, [pc, #512]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	029b      	lsls	r3, r3, #10
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x118>
 8001f4e:	e000      	b.n	8001f52 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f50:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2202      	movs	r2, #2
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d100      	bne.n	8001f5e <HAL_RCC_OscConfig+0x146>
 8001f5c:	e069      	b.n	8002032 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f5e:	4b79      	ldr	r3, [pc, #484]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	220c      	movs	r2, #12
 8001f64:	4013      	ands	r3, r2
 8001f66:	d00b      	beq.n	8001f80 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f68:	4b76      	ldr	r3, [pc, #472]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	220c      	movs	r2, #12
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d11c      	bne.n	8001fae <HAL_RCC_OscConfig+0x196>
 8001f74:	4b73      	ldr	r3, [pc, #460]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	025b      	lsls	r3, r3, #9
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d116      	bne.n	8001fae <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f80:	4b70      	ldr	r3, [pc, #448]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2202      	movs	r2, #2
 8001f86:	4013      	ands	r3, r2
 8001f88:	d005      	beq.n	8001f96 <HAL_RCC_OscConfig+0x17e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d001      	beq.n	8001f96 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e24b      	b.n	800242e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f96:	4b6b      	ldr	r3, [pc, #428]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	22f8      	movs	r2, #248	; 0xf8
 8001f9c:	4393      	bics	r3, r2
 8001f9e:	0019      	movs	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	00da      	lsls	r2, r3, #3
 8001fa6:	4b67      	ldr	r3, [pc, #412]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fac:	e041      	b.n	8002032 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d024      	beq.n	8002000 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb6:	4b63      	ldr	r3, [pc, #396]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	4b62      	ldr	r3, [pc, #392]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc2:	f7fe fe1d 	bl	8000c00 <HAL_GetTick>
 8001fc6:	0003      	movs	r3, r0
 8001fc8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fcc:	f7fe fe18 	bl	8000c00 <HAL_GetTick>
 8001fd0:	0002      	movs	r2, r0
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e227      	b.n	800242e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fde:	4b59      	ldr	r3, [pc, #356]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d0f1      	beq.n	8001fcc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe8:	4b56      	ldr	r3, [pc, #344]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	22f8      	movs	r2, #248	; 0xf8
 8001fee:	4393      	bics	r3, r2
 8001ff0:	0019      	movs	r1, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	00da      	lsls	r2, r3, #3
 8001ff8:	4b52      	ldr	r3, [pc, #328]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	e018      	b.n	8002032 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002000:	4b50      	ldr	r3, [pc, #320]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b4f      	ldr	r3, [pc, #316]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8002006:	2101      	movs	r1, #1
 8002008:	438a      	bics	r2, r1
 800200a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7fe fdf8 	bl	8000c00 <HAL_GetTick>
 8002010:	0003      	movs	r3, r0
 8002012:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002016:	f7fe fdf3 	bl	8000c00 <HAL_GetTick>
 800201a:	0002      	movs	r2, r0
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e202      	b.n	800242e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002028:	4b46      	ldr	r3, [pc, #280]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2202      	movs	r2, #2
 800202e:	4013      	ands	r3, r2
 8002030:	d1f1      	bne.n	8002016 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2208      	movs	r2, #8
 8002038:	4013      	ands	r3, r2
 800203a:	d036      	beq.n	80020aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d019      	beq.n	8002078 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002044:	4b3f      	ldr	r3, [pc, #252]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8002046:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002048:	4b3e      	ldr	r3, [pc, #248]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 800204a:	2101      	movs	r1, #1
 800204c:	430a      	orrs	r2, r1
 800204e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002050:	f7fe fdd6 	bl	8000c00 <HAL_GetTick>
 8002054:	0003      	movs	r3, r0
 8002056:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800205a:	f7fe fdd1 	bl	8000c00 <HAL_GetTick>
 800205e:	0002      	movs	r2, r0
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e1e0      	b.n	800242e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206c:	4b35      	ldr	r3, [pc, #212]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	2202      	movs	r2, #2
 8002072:	4013      	ands	r3, r2
 8002074:	d0f1      	beq.n	800205a <HAL_RCC_OscConfig+0x242>
 8002076:	e018      	b.n	80020aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002078:	4b32      	ldr	r3, [pc, #200]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 800207a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800207c:	4b31      	ldr	r3, [pc, #196]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 800207e:	2101      	movs	r1, #1
 8002080:	438a      	bics	r2, r1
 8002082:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002084:	f7fe fdbc 	bl	8000c00 <HAL_GetTick>
 8002088:	0003      	movs	r3, r0
 800208a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800208e:	f7fe fdb7 	bl	8000c00 <HAL_GetTick>
 8002092:	0002      	movs	r2, r0
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e1c6      	b.n	800242e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a0:	4b28      	ldr	r3, [pc, #160]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	2202      	movs	r2, #2
 80020a6:	4013      	ands	r3, r2
 80020a8:	d1f1      	bne.n	800208e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2204      	movs	r2, #4
 80020b0:	4013      	ands	r3, r2
 80020b2:	d100      	bne.n	80020b6 <HAL_RCC_OscConfig+0x29e>
 80020b4:	e0b4      	b.n	8002220 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b6:	201f      	movs	r0, #31
 80020b8:	183b      	adds	r3, r7, r0
 80020ba:	2200      	movs	r2, #0
 80020bc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020be:	4b21      	ldr	r3, [pc, #132]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 80020c0:	69da      	ldr	r2, [r3, #28]
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	055b      	lsls	r3, r3, #21
 80020c6:	4013      	ands	r3, r2
 80020c8:	d110      	bne.n	80020ec <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ca:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 80020cc:	69da      	ldr	r2, [r3, #28]
 80020ce:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 80020d0:	2180      	movs	r1, #128	; 0x80
 80020d2:	0549      	lsls	r1, r1, #21
 80020d4:	430a      	orrs	r2, r1
 80020d6:	61da      	str	r2, [r3, #28]
 80020d8:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 80020da:	69da      	ldr	r2, [r3, #28]
 80020dc:	2380      	movs	r3, #128	; 0x80
 80020de:	055b      	lsls	r3, r3, #21
 80020e0:	4013      	ands	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80020e6:	183b      	adds	r3, r7, r0
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ec:	4b18      	ldr	r3, [pc, #96]	; (8002150 <HAL_RCC_OscConfig+0x338>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4013      	ands	r3, r2
 80020f6:	d11a      	bne.n	800212e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020f8:	4b15      	ldr	r3, [pc, #84]	; (8002150 <HAL_RCC_OscConfig+0x338>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4b14      	ldr	r3, [pc, #80]	; (8002150 <HAL_RCC_OscConfig+0x338>)
 80020fe:	2180      	movs	r1, #128	; 0x80
 8002100:	0049      	lsls	r1, r1, #1
 8002102:	430a      	orrs	r2, r1
 8002104:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002106:	f7fe fd7b 	bl	8000c00 <HAL_GetTick>
 800210a:	0003      	movs	r3, r0
 800210c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002110:	f7fe fd76 	bl	8000c00 <HAL_GetTick>
 8002114:	0002      	movs	r2, r0
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	; 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e185      	b.n	800242e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_RCC_OscConfig+0x338>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	2380      	movs	r3, #128	; 0x80
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4013      	ands	r3, r2
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d10e      	bne.n	8002154 <HAL_RCC_OscConfig+0x33c>
 8002136:	4b03      	ldr	r3, [pc, #12]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 8002138:	6a1a      	ldr	r2, [r3, #32]
 800213a:	4b02      	ldr	r3, [pc, #8]	; (8002144 <HAL_RCC_OscConfig+0x32c>)
 800213c:	2101      	movs	r1, #1
 800213e:	430a      	orrs	r2, r1
 8002140:	621a      	str	r2, [r3, #32]
 8002142:	e035      	b.n	80021b0 <HAL_RCC_OscConfig+0x398>
 8002144:	40021000 	.word	0x40021000
 8002148:	fffeffff 	.word	0xfffeffff
 800214c:	fffbffff 	.word	0xfffbffff
 8002150:	40007000 	.word	0x40007000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10c      	bne.n	8002176 <HAL_RCC_OscConfig+0x35e>
 800215c:	4bb6      	ldr	r3, [pc, #728]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 800215e:	6a1a      	ldr	r2, [r3, #32]
 8002160:	4bb5      	ldr	r3, [pc, #724]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002162:	2101      	movs	r1, #1
 8002164:	438a      	bics	r2, r1
 8002166:	621a      	str	r2, [r3, #32]
 8002168:	4bb3      	ldr	r3, [pc, #716]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 800216a:	6a1a      	ldr	r2, [r3, #32]
 800216c:	4bb2      	ldr	r3, [pc, #712]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 800216e:	2104      	movs	r1, #4
 8002170:	438a      	bics	r2, r1
 8002172:	621a      	str	r2, [r3, #32]
 8002174:	e01c      	b.n	80021b0 <HAL_RCC_OscConfig+0x398>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b05      	cmp	r3, #5
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0x380>
 800217e:	4bae      	ldr	r3, [pc, #696]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002180:	6a1a      	ldr	r2, [r3, #32]
 8002182:	4bad      	ldr	r3, [pc, #692]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002184:	2104      	movs	r1, #4
 8002186:	430a      	orrs	r2, r1
 8002188:	621a      	str	r2, [r3, #32]
 800218a:	4bab      	ldr	r3, [pc, #684]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 800218c:	6a1a      	ldr	r2, [r3, #32]
 800218e:	4baa      	ldr	r3, [pc, #680]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002190:	2101      	movs	r1, #1
 8002192:	430a      	orrs	r2, r1
 8002194:	621a      	str	r2, [r3, #32]
 8002196:	e00b      	b.n	80021b0 <HAL_RCC_OscConfig+0x398>
 8002198:	4ba7      	ldr	r3, [pc, #668]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 800219a:	6a1a      	ldr	r2, [r3, #32]
 800219c:	4ba6      	ldr	r3, [pc, #664]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 800219e:	2101      	movs	r1, #1
 80021a0:	438a      	bics	r2, r1
 80021a2:	621a      	str	r2, [r3, #32]
 80021a4:	4ba4      	ldr	r3, [pc, #656]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80021a6:	6a1a      	ldr	r2, [r3, #32]
 80021a8:	4ba3      	ldr	r3, [pc, #652]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80021aa:	2104      	movs	r1, #4
 80021ac:	438a      	bics	r2, r1
 80021ae:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d014      	beq.n	80021e2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b8:	f7fe fd22 	bl	8000c00 <HAL_GetTick>
 80021bc:	0003      	movs	r3, r0
 80021be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c0:	e009      	b.n	80021d6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c2:	f7fe fd1d 	bl	8000c00 <HAL_GetTick>
 80021c6:	0002      	movs	r2, r0
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	4a9b      	ldr	r2, [pc, #620]	; (800243c <HAL_RCC_OscConfig+0x624>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e12b      	b.n	800242e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d6:	4b98      	ldr	r3, [pc, #608]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	2202      	movs	r2, #2
 80021dc:	4013      	ands	r3, r2
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0x3aa>
 80021e0:	e013      	b.n	800220a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e2:	f7fe fd0d 	bl	8000c00 <HAL_GetTick>
 80021e6:	0003      	movs	r3, r0
 80021e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ea:	e009      	b.n	8002200 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ec:	f7fe fd08 	bl	8000c00 <HAL_GetTick>
 80021f0:	0002      	movs	r2, r0
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	4a91      	ldr	r2, [pc, #580]	; (800243c <HAL_RCC_OscConfig+0x624>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e116      	b.n	800242e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002200:	4b8d      	ldr	r3, [pc, #564]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	2202      	movs	r2, #2
 8002206:	4013      	ands	r3, r2
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800220a:	231f      	movs	r3, #31
 800220c:	18fb      	adds	r3, r7, r3
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d105      	bne.n	8002220 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002214:	4b88      	ldr	r3, [pc, #544]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002216:	69da      	ldr	r2, [r3, #28]
 8002218:	4b87      	ldr	r3, [pc, #540]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 800221a:	4989      	ldr	r1, [pc, #548]	; (8002440 <HAL_RCC_OscConfig+0x628>)
 800221c:	400a      	ands	r2, r1
 800221e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2210      	movs	r2, #16
 8002226:	4013      	ands	r3, r2
 8002228:	d063      	beq.n	80022f2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d12a      	bne.n	8002288 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002232:	4b81      	ldr	r3, [pc, #516]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002236:	4b80      	ldr	r3, [pc, #512]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002238:	2104      	movs	r1, #4
 800223a:	430a      	orrs	r2, r1
 800223c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800223e:	4b7e      	ldr	r3, [pc, #504]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002242:	4b7d      	ldr	r3, [pc, #500]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002244:	2101      	movs	r1, #1
 8002246:	430a      	orrs	r2, r1
 8002248:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224a:	f7fe fcd9 	bl	8000c00 <HAL_GetTick>
 800224e:	0003      	movs	r3, r0
 8002250:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002254:	f7fe fcd4 	bl	8000c00 <HAL_GetTick>
 8002258:	0002      	movs	r2, r0
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e0e3      	b.n	800242e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002266:	4b74      	ldr	r3, [pc, #464]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226a:	2202      	movs	r2, #2
 800226c:	4013      	ands	r3, r2
 800226e:	d0f1      	beq.n	8002254 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002270:	4b71      	ldr	r3, [pc, #452]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002274:	22f8      	movs	r2, #248	; 0xf8
 8002276:	4393      	bics	r3, r2
 8002278:	0019      	movs	r1, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	00da      	lsls	r2, r3, #3
 8002280:	4b6d      	ldr	r3, [pc, #436]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002282:	430a      	orrs	r2, r1
 8002284:	635a      	str	r2, [r3, #52]	; 0x34
 8002286:	e034      	b.n	80022f2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	3305      	adds	r3, #5
 800228e:	d111      	bne.n	80022b4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002290:	4b69      	ldr	r3, [pc, #420]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002294:	4b68      	ldr	r3, [pc, #416]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002296:	2104      	movs	r1, #4
 8002298:	438a      	bics	r2, r1
 800229a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800229c:	4b66      	ldr	r3, [pc, #408]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 800229e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a0:	22f8      	movs	r2, #248	; 0xf8
 80022a2:	4393      	bics	r3, r2
 80022a4:	0019      	movs	r1, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	00da      	lsls	r2, r3, #3
 80022ac:	4b62      	ldr	r3, [pc, #392]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80022ae:	430a      	orrs	r2, r1
 80022b0:	635a      	str	r2, [r3, #52]	; 0x34
 80022b2:	e01e      	b.n	80022f2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80022b4:	4b60      	ldr	r3, [pc, #384]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80022b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022b8:	4b5f      	ldr	r3, [pc, #380]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80022ba:	2104      	movs	r1, #4
 80022bc:	430a      	orrs	r2, r1
 80022be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80022c0:	4b5d      	ldr	r3, [pc, #372]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80022c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022c4:	4b5c      	ldr	r3, [pc, #368]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80022c6:	2101      	movs	r1, #1
 80022c8:	438a      	bics	r2, r1
 80022ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022cc:	f7fe fc98 	bl	8000c00 <HAL_GetTick>
 80022d0:	0003      	movs	r3, r0
 80022d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80022d6:	f7fe fc93 	bl	8000c00 <HAL_GetTick>
 80022da:	0002      	movs	r2, r0
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e0a2      	b.n	800242e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80022e8:	4b53      	ldr	r3, [pc, #332]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80022ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ec:	2202      	movs	r2, #2
 80022ee:	4013      	ands	r3, r2
 80022f0:	d1f1      	bne.n	80022d6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d100      	bne.n	80022fc <HAL_RCC_OscConfig+0x4e4>
 80022fa:	e097      	b.n	800242c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022fc:	4b4e      	ldr	r3, [pc, #312]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	220c      	movs	r2, #12
 8002302:	4013      	ands	r3, r2
 8002304:	2b08      	cmp	r3, #8
 8002306:	d100      	bne.n	800230a <HAL_RCC_OscConfig+0x4f2>
 8002308:	e06b      	b.n	80023e2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d14c      	bne.n	80023ac <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002312:	4b49      	ldr	r3, [pc, #292]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	4b48      	ldr	r3, [pc, #288]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002318:	494a      	ldr	r1, [pc, #296]	; (8002444 <HAL_RCC_OscConfig+0x62c>)
 800231a:	400a      	ands	r2, r1
 800231c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231e:	f7fe fc6f 	bl	8000c00 <HAL_GetTick>
 8002322:	0003      	movs	r3, r0
 8002324:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002328:	f7fe fc6a 	bl	8000c00 <HAL_GetTick>
 800232c:	0002      	movs	r2, r0
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e079      	b.n	800242e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800233a:	4b3f      	ldr	r3, [pc, #252]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	049b      	lsls	r3, r3, #18
 8002342:	4013      	ands	r3, r2
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002346:	4b3c      	ldr	r3, [pc, #240]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	220f      	movs	r2, #15
 800234c:	4393      	bics	r3, r2
 800234e:	0019      	movs	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002354:	4b38      	ldr	r3, [pc, #224]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002356:	430a      	orrs	r2, r1
 8002358:	62da      	str	r2, [r3, #44]	; 0x2c
 800235a:	4b37      	ldr	r3, [pc, #220]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	4a3a      	ldr	r2, [pc, #232]	; (8002448 <HAL_RCC_OscConfig+0x630>)
 8002360:	4013      	ands	r3, r2
 8002362:	0019      	movs	r1, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	431a      	orrs	r2, r3
 800236e:	4b32      	ldr	r3, [pc, #200]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002370:	430a      	orrs	r2, r1
 8002372:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002374:	4b30      	ldr	r3, [pc, #192]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b2f      	ldr	r3, [pc, #188]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 800237a:	2180      	movs	r1, #128	; 0x80
 800237c:	0449      	lsls	r1, r1, #17
 800237e:	430a      	orrs	r2, r1
 8002380:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002382:	f7fe fc3d 	bl	8000c00 <HAL_GetTick>
 8002386:	0003      	movs	r3, r0
 8002388:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800238c:	f7fe fc38 	bl	8000c00 <HAL_GetTick>
 8002390:	0002      	movs	r2, r0
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e047      	b.n	800242e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800239e:	4b26      	ldr	r3, [pc, #152]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	2380      	movs	r3, #128	; 0x80
 80023a4:	049b      	lsls	r3, r3, #18
 80023a6:	4013      	ands	r3, r2
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x574>
 80023aa:	e03f      	b.n	800242c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ac:	4b22      	ldr	r3, [pc, #136]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b21      	ldr	r3, [pc, #132]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80023b2:	4924      	ldr	r1, [pc, #144]	; (8002444 <HAL_RCC_OscConfig+0x62c>)
 80023b4:	400a      	ands	r2, r1
 80023b6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7fe fc22 	bl	8000c00 <HAL_GetTick>
 80023bc:	0003      	movs	r3, r0
 80023be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c2:	f7fe fc1d 	bl	8000c00 <HAL_GetTick>
 80023c6:	0002      	movs	r2, r0
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e02c      	b.n	800242e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d4:	4b18      	ldr	r3, [pc, #96]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	049b      	lsls	r3, r3, #18
 80023dc:	4013      	ands	r3, r2
 80023de:	d1f0      	bne.n	80023c2 <HAL_RCC_OscConfig+0x5aa>
 80023e0:	e024      	b.n	800242c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e01f      	b.n	800242e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80023ee:	4b12      	ldr	r3, [pc, #72]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80023f4:	4b10      	ldr	r3, [pc, #64]	; (8002438 <HAL_RCC_OscConfig+0x620>)
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	025b      	lsls	r3, r3, #9
 8002400:	401a      	ands	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	429a      	cmp	r2, r3
 8002408:	d10e      	bne.n	8002428 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	220f      	movs	r2, #15
 800240e:	401a      	ands	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002414:	429a      	cmp	r2, r3
 8002416:	d107      	bne.n	8002428 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	23f0      	movs	r3, #240	; 0xf0
 800241c:	039b      	lsls	r3, r3, #14
 800241e:	401a      	ands	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002424:	429a      	cmp	r2, r3
 8002426:	d001      	beq.n	800242c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	0018      	movs	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	b008      	add	sp, #32
 8002434:	bd80      	pop	{r7, pc}
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	40021000 	.word	0x40021000
 800243c:	00001388 	.word	0x00001388
 8002440:	efffffff 	.word	0xefffffff
 8002444:	feffffff 	.word	0xfeffffff
 8002448:	ffc2ffff 	.word	0xffc2ffff

0800244c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0b3      	b.n	80025c8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002460:	4b5b      	ldr	r3, [pc, #364]	; (80025d0 <HAL_RCC_ClockConfig+0x184>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2201      	movs	r2, #1
 8002466:	4013      	ands	r3, r2
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d911      	bls.n	8002492 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b58      	ldr	r3, [pc, #352]	; (80025d0 <HAL_RCC_ClockConfig+0x184>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2201      	movs	r2, #1
 8002474:	4393      	bics	r3, r2
 8002476:	0019      	movs	r1, r3
 8002478:	4b55      	ldr	r3, [pc, #340]	; (80025d0 <HAL_RCC_ClockConfig+0x184>)
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002480:	4b53      	ldr	r3, [pc, #332]	; (80025d0 <HAL_RCC_ClockConfig+0x184>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2201      	movs	r2, #1
 8002486:	4013      	ands	r3, r2
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d001      	beq.n	8002492 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e09a      	b.n	80025c8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2202      	movs	r2, #2
 8002498:	4013      	ands	r3, r2
 800249a:	d015      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2204      	movs	r2, #4
 80024a2:	4013      	ands	r3, r2
 80024a4:	d006      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80024a6:	4b4b      	ldr	r3, [pc, #300]	; (80025d4 <HAL_RCC_ClockConfig+0x188>)
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	4b4a      	ldr	r3, [pc, #296]	; (80025d4 <HAL_RCC_ClockConfig+0x188>)
 80024ac:	21e0      	movs	r1, #224	; 0xe0
 80024ae:	00c9      	lsls	r1, r1, #3
 80024b0:	430a      	orrs	r2, r1
 80024b2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b4:	4b47      	ldr	r3, [pc, #284]	; (80025d4 <HAL_RCC_ClockConfig+0x188>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	22f0      	movs	r2, #240	; 0xf0
 80024ba:	4393      	bics	r3, r2
 80024bc:	0019      	movs	r1, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	4b44      	ldr	r3, [pc, #272]	; (80025d4 <HAL_RCC_ClockConfig+0x188>)
 80024c4:	430a      	orrs	r2, r1
 80024c6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2201      	movs	r2, #1
 80024ce:	4013      	ands	r3, r2
 80024d0:	d040      	beq.n	8002554 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d107      	bne.n	80024ea <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	4b3e      	ldr	r3, [pc, #248]	; (80025d4 <HAL_RCC_ClockConfig+0x188>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	2380      	movs	r3, #128	; 0x80
 80024e0:	029b      	lsls	r3, r3, #10
 80024e2:	4013      	ands	r3, r2
 80024e4:	d114      	bne.n	8002510 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e06e      	b.n	80025c8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d107      	bne.n	8002502 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f2:	4b38      	ldr	r3, [pc, #224]	; (80025d4 <HAL_RCC_ClockConfig+0x188>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	2380      	movs	r3, #128	; 0x80
 80024f8:	049b      	lsls	r3, r3, #18
 80024fa:	4013      	ands	r3, r2
 80024fc:	d108      	bne.n	8002510 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e062      	b.n	80025c8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002502:	4b34      	ldr	r3, [pc, #208]	; (80025d4 <HAL_RCC_ClockConfig+0x188>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2202      	movs	r2, #2
 8002508:	4013      	ands	r3, r2
 800250a:	d101      	bne.n	8002510 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e05b      	b.n	80025c8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002510:	4b30      	ldr	r3, [pc, #192]	; (80025d4 <HAL_RCC_ClockConfig+0x188>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2203      	movs	r2, #3
 8002516:	4393      	bics	r3, r2
 8002518:	0019      	movs	r1, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	4b2d      	ldr	r3, [pc, #180]	; (80025d4 <HAL_RCC_ClockConfig+0x188>)
 8002520:	430a      	orrs	r2, r1
 8002522:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002524:	f7fe fb6c 	bl	8000c00 <HAL_GetTick>
 8002528:	0003      	movs	r3, r0
 800252a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252c:	e009      	b.n	8002542 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800252e:	f7fe fb67 	bl	8000c00 <HAL_GetTick>
 8002532:	0002      	movs	r2, r0
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	4a27      	ldr	r2, [pc, #156]	; (80025d8 <HAL_RCC_ClockConfig+0x18c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e042      	b.n	80025c8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002542:	4b24      	ldr	r3, [pc, #144]	; (80025d4 <HAL_RCC_ClockConfig+0x188>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	220c      	movs	r2, #12
 8002548:	401a      	ands	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	429a      	cmp	r2, r3
 8002552:	d1ec      	bne.n	800252e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002554:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <HAL_RCC_ClockConfig+0x184>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2201      	movs	r2, #1
 800255a:	4013      	ands	r3, r2
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d211      	bcs.n	8002586 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002562:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <HAL_RCC_ClockConfig+0x184>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2201      	movs	r2, #1
 8002568:	4393      	bics	r3, r2
 800256a:	0019      	movs	r1, r3
 800256c:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <HAL_RCC_ClockConfig+0x184>)
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002574:	4b16      	ldr	r3, [pc, #88]	; (80025d0 <HAL_RCC_ClockConfig+0x184>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2201      	movs	r2, #1
 800257a:	4013      	ands	r3, r2
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d001      	beq.n	8002586 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e020      	b.n	80025c8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2204      	movs	r2, #4
 800258c:	4013      	ands	r3, r2
 800258e:	d009      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002590:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <HAL_RCC_ClockConfig+0x188>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	4a11      	ldr	r2, [pc, #68]	; (80025dc <HAL_RCC_ClockConfig+0x190>)
 8002596:	4013      	ands	r3, r2
 8002598:	0019      	movs	r1, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	4b0d      	ldr	r3, [pc, #52]	; (80025d4 <HAL_RCC_ClockConfig+0x188>)
 80025a0:	430a      	orrs	r2, r1
 80025a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025a4:	f000 f820 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 80025a8:	0001      	movs	r1, r0
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <HAL_RCC_ClockConfig+0x188>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	091b      	lsrs	r3, r3, #4
 80025b0:	220f      	movs	r2, #15
 80025b2:	4013      	ands	r3, r2
 80025b4:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <HAL_RCC_ClockConfig+0x194>)
 80025b6:	5cd3      	ldrb	r3, [r2, r3]
 80025b8:	000a      	movs	r2, r1
 80025ba:	40da      	lsrs	r2, r3
 80025bc:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <HAL_RCC_ClockConfig+0x198>)
 80025be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80025c0:	2003      	movs	r0, #3
 80025c2:	f7fe fad7 	bl	8000b74 <HAL_InitTick>
  
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	0018      	movs	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b004      	add	sp, #16
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40022000 	.word	0x40022000
 80025d4:	40021000 	.word	0x40021000
 80025d8:	00001388 	.word	0x00001388
 80025dc:	fffff8ff 	.word	0xfffff8ff
 80025e0:	08003568 	.word	0x08003568
 80025e4:	20000004 	.word	0x20000004

080025e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e8:	b590      	push	{r4, r7, lr}
 80025ea:	b08f      	sub	sp, #60	; 0x3c
 80025ec:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80025ee:	2314      	movs	r3, #20
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	4a2b      	ldr	r2, [pc, #172]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025f6:	c313      	stmia	r3!, {r0, r1, r4}
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80025fc:	1d3b      	adds	r3, r7, #4
 80025fe:	4a29      	ldr	r2, [pc, #164]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002600:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002602:	c313      	stmia	r3!, {r0, r1, r4}
 8002604:	6812      	ldr	r2, [r2, #0]
 8002606:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800260c:	2300      	movs	r3, #0
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002610:	2300      	movs	r3, #0
 8002612:	637b      	str	r3, [r7, #52]	; 0x34
 8002614:	2300      	movs	r3, #0
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800261c:	4b22      	ldr	r3, [pc, #136]	; (80026a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002624:	220c      	movs	r2, #12
 8002626:	4013      	ands	r3, r2
 8002628:	2b04      	cmp	r3, #4
 800262a:	d002      	beq.n	8002632 <HAL_RCC_GetSysClockFreq+0x4a>
 800262c:	2b08      	cmp	r3, #8
 800262e:	d003      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0x50>
 8002630:	e02d      	b.n	800268e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002632:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002634:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002636:	e02d      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263a:	0c9b      	lsrs	r3, r3, #18
 800263c:	220f      	movs	r2, #15
 800263e:	4013      	ands	r3, r2
 8002640:	2214      	movs	r2, #20
 8002642:	18ba      	adds	r2, r7, r2
 8002644:	5cd3      	ldrb	r3, [r2, r3]
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002648:	4b17      	ldr	r3, [pc, #92]	; (80026a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264c:	220f      	movs	r2, #15
 800264e:	4013      	ands	r3, r2
 8002650:	1d3a      	adds	r2, r7, #4
 8002652:	5cd3      	ldrb	r3, [r2, r3]
 8002654:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	025b      	lsls	r3, r3, #9
 800265c:	4013      	ands	r3, r2
 800265e:	d009      	beq.n	8002674 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002660:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002662:	4812      	ldr	r0, [pc, #72]	; (80026ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002664:	f7fd fd50 	bl	8000108 <__udivsi3>
 8002668:	0003      	movs	r3, r0
 800266a:	001a      	movs	r2, r3
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	4353      	muls	r3, r2
 8002670:	637b      	str	r3, [r7, #52]	; 0x34
 8002672:	e009      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002674:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002676:	000a      	movs	r2, r1
 8002678:	0152      	lsls	r2, r2, #5
 800267a:	1a52      	subs	r2, r2, r1
 800267c:	0193      	lsls	r3, r2, #6
 800267e:	1a9b      	subs	r3, r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	185b      	adds	r3, r3, r1
 8002684:	021b      	lsls	r3, r3, #8
 8002686:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800268c:	e002      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800268e:	4b07      	ldr	r3, [pc, #28]	; (80026ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002690:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002692:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002696:	0018      	movs	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	b00f      	add	sp, #60	; 0x3c
 800269c:	bd90      	pop	{r4, r7, pc}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	08003548 	.word	0x08003548
 80026a4:	08003558 	.word	0x08003558
 80026a8:	40021000 	.word	0x40021000
 80026ac:	007a1200 	.word	0x007a1200

080026b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b4:	4b02      	ldr	r3, [pc, #8]	; (80026c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80026b6:	681b      	ldr	r3, [r3, #0]
}
 80026b8:	0018      	movs	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	20000004 	.word	0x20000004

080026c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80026c8:	f7ff fff2 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 80026cc:	0001      	movs	r1, r0
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	0a1b      	lsrs	r3, r3, #8
 80026d4:	2207      	movs	r2, #7
 80026d6:	4013      	ands	r3, r2
 80026d8:	4a04      	ldr	r2, [pc, #16]	; (80026ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80026da:	5cd3      	ldrb	r3, [r2, r3]
 80026dc:	40d9      	lsrs	r1, r3
 80026de:	000b      	movs	r3, r1
}    
 80026e0:	0018      	movs	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	40021000 	.word	0x40021000
 80026ec:	08003578 	.word	0x08003578

080026f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e044      	b.n	800278c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002706:	2b00      	cmp	r3, #0
 8002708:	d107      	bne.n	800271a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2274      	movs	r2, #116	; 0x74
 800270e:	2100      	movs	r1, #0
 8002710:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	0018      	movs	r0, r3
 8002716:	f7fe f909 	bl	800092c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2224      	movs	r2, #36	; 0x24
 800271e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2101      	movs	r1, #1
 800272c:	438a      	bics	r2, r1
 800272e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	0018      	movs	r0, r3
 8002734:	f000 fb24 	bl	8002d80 <UART_SetConfig>
 8002738:	0003      	movs	r3, r0
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e024      	b.n	800278c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	0018      	movs	r0, r3
 800274e:	f000 fc57 	bl	8003000 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	490d      	ldr	r1, [pc, #52]	; (8002794 <HAL_UART_Init+0xa4>)
 800275e:	400a      	ands	r2, r1
 8002760:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	212a      	movs	r1, #42	; 0x2a
 800276e:	438a      	bics	r2, r1
 8002770:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2101      	movs	r1, #1
 800277e:	430a      	orrs	r2, r1
 8002780:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	0018      	movs	r0, r3
 8002786:	f000 fcef 	bl	8003168 <UART_CheckIdleState>
 800278a:	0003      	movs	r3, r0
}
 800278c:	0018      	movs	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	b002      	add	sp, #8
 8002792:	bd80      	pop	{r7, pc}
 8002794:	ffffb7ff 	.word	0xffffb7ff

08002798 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b0ab      	sub	sp, #172	; 0xac
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	22a4      	movs	r2, #164	; 0xa4
 80027a8:	18b9      	adds	r1, r7, r2
 80027aa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	20a0      	movs	r0, #160	; 0xa0
 80027b4:	1839      	adds	r1, r7, r0
 80027b6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	219c      	movs	r1, #156	; 0x9c
 80027c0:	1879      	adds	r1, r7, r1
 80027c2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80027c4:	0011      	movs	r1, r2
 80027c6:	18bb      	adds	r3, r7, r2
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a99      	ldr	r2, [pc, #612]	; (8002a30 <HAL_UART_IRQHandler+0x298>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	2298      	movs	r2, #152	; 0x98
 80027d0:	18bc      	adds	r4, r7, r2
 80027d2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80027d4:	18bb      	adds	r3, r7, r2
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d114      	bne.n	8002806 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80027dc:	187b      	adds	r3, r7, r1
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2220      	movs	r2, #32
 80027e2:	4013      	ands	r3, r2
 80027e4:	d00f      	beq.n	8002806 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027e6:	183b      	adds	r3, r7, r0
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2220      	movs	r2, #32
 80027ec:	4013      	ands	r3, r2
 80027ee:	d00a      	beq.n	8002806 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d100      	bne.n	80027fa <HAL_UART_IRQHandler+0x62>
 80027f8:	e296      	b.n	8002d28 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	0010      	movs	r0, r2
 8002802:	4798      	blx	r3
      }
      return;
 8002804:	e290      	b.n	8002d28 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002806:	2398      	movs	r3, #152	; 0x98
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d100      	bne.n	8002812 <HAL_UART_IRQHandler+0x7a>
 8002810:	e114      	b.n	8002a3c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002812:	239c      	movs	r3, #156	; 0x9c
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2201      	movs	r2, #1
 800281a:	4013      	ands	r3, r2
 800281c:	d106      	bne.n	800282c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800281e:	23a0      	movs	r3, #160	; 0xa0
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a83      	ldr	r2, [pc, #524]	; (8002a34 <HAL_UART_IRQHandler+0x29c>)
 8002826:	4013      	ands	r3, r2
 8002828:	d100      	bne.n	800282c <HAL_UART_IRQHandler+0x94>
 800282a:	e107      	b.n	8002a3c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800282c:	23a4      	movs	r3, #164	; 0xa4
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2201      	movs	r2, #1
 8002834:	4013      	ands	r3, r2
 8002836:	d012      	beq.n	800285e <HAL_UART_IRQHandler+0xc6>
 8002838:	23a0      	movs	r3, #160	; 0xa0
 800283a:	18fb      	adds	r3, r7, r3
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	2380      	movs	r3, #128	; 0x80
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4013      	ands	r3, r2
 8002844:	d00b      	beq.n	800285e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2201      	movs	r2, #1
 800284c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2280      	movs	r2, #128	; 0x80
 8002852:	589b      	ldr	r3, [r3, r2]
 8002854:	2201      	movs	r2, #1
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2180      	movs	r1, #128	; 0x80
 800285c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800285e:	23a4      	movs	r3, #164	; 0xa4
 8002860:	18fb      	adds	r3, r7, r3
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2202      	movs	r2, #2
 8002866:	4013      	ands	r3, r2
 8002868:	d011      	beq.n	800288e <HAL_UART_IRQHandler+0xf6>
 800286a:	239c      	movs	r3, #156	; 0x9c
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2201      	movs	r2, #1
 8002872:	4013      	ands	r3, r2
 8002874:	d00b      	beq.n	800288e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2202      	movs	r2, #2
 800287c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2280      	movs	r2, #128	; 0x80
 8002882:	589b      	ldr	r3, [r3, r2]
 8002884:	2204      	movs	r2, #4
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2180      	movs	r1, #128	; 0x80
 800288c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800288e:	23a4      	movs	r3, #164	; 0xa4
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2204      	movs	r2, #4
 8002896:	4013      	ands	r3, r2
 8002898:	d011      	beq.n	80028be <HAL_UART_IRQHandler+0x126>
 800289a:	239c      	movs	r3, #156	; 0x9c
 800289c:	18fb      	adds	r3, r7, r3
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2201      	movs	r2, #1
 80028a2:	4013      	ands	r3, r2
 80028a4:	d00b      	beq.n	80028be <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2204      	movs	r2, #4
 80028ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2280      	movs	r2, #128	; 0x80
 80028b2:	589b      	ldr	r3, [r3, r2]
 80028b4:	2202      	movs	r2, #2
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2180      	movs	r1, #128	; 0x80
 80028bc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80028be:	23a4      	movs	r3, #164	; 0xa4
 80028c0:	18fb      	adds	r3, r7, r3
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2208      	movs	r2, #8
 80028c6:	4013      	ands	r3, r2
 80028c8:	d017      	beq.n	80028fa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028ca:	23a0      	movs	r3, #160	; 0xa0
 80028cc:	18fb      	adds	r3, r7, r3
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2220      	movs	r2, #32
 80028d2:	4013      	ands	r3, r2
 80028d4:	d105      	bne.n	80028e2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80028d6:	239c      	movs	r3, #156	; 0x9c
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2201      	movs	r2, #1
 80028de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028e0:	d00b      	beq.n	80028fa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2208      	movs	r2, #8
 80028e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2280      	movs	r2, #128	; 0x80
 80028ee:	589b      	ldr	r3, [r3, r2]
 80028f0:	2208      	movs	r2, #8
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2180      	movs	r1, #128	; 0x80
 80028f8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80028fa:	23a4      	movs	r3, #164	; 0xa4
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	2380      	movs	r3, #128	; 0x80
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	4013      	ands	r3, r2
 8002906:	d013      	beq.n	8002930 <HAL_UART_IRQHandler+0x198>
 8002908:	23a0      	movs	r3, #160	; 0xa0
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	2380      	movs	r3, #128	; 0x80
 8002910:	04db      	lsls	r3, r3, #19
 8002912:	4013      	ands	r3, r2
 8002914:	d00c      	beq.n	8002930 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2280      	movs	r2, #128	; 0x80
 800291c:	0112      	lsls	r2, r2, #4
 800291e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2280      	movs	r2, #128	; 0x80
 8002924:	589b      	ldr	r3, [r3, r2]
 8002926:	2220      	movs	r2, #32
 8002928:	431a      	orrs	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2180      	movs	r1, #128	; 0x80
 800292e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2280      	movs	r2, #128	; 0x80
 8002934:	589b      	ldr	r3, [r3, r2]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d100      	bne.n	800293c <HAL_UART_IRQHandler+0x1a4>
 800293a:	e1f7      	b.n	8002d2c <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800293c:	23a4      	movs	r3, #164	; 0xa4
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2220      	movs	r2, #32
 8002944:	4013      	ands	r3, r2
 8002946:	d00e      	beq.n	8002966 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002948:	23a0      	movs	r3, #160	; 0xa0
 800294a:	18fb      	adds	r3, r7, r3
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2220      	movs	r2, #32
 8002950:	4013      	ands	r3, r2
 8002952:	d008      	beq.n	8002966 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002958:	2b00      	cmp	r3, #0
 800295a:	d004      	beq.n	8002966 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	0010      	movs	r0, r2
 8002964:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2280      	movs	r2, #128	; 0x80
 800296a:	589b      	ldr	r3, [r3, r2]
 800296c:	2194      	movs	r1, #148	; 0x94
 800296e:	187a      	adds	r2, r7, r1
 8002970:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2240      	movs	r2, #64	; 0x40
 800297a:	4013      	ands	r3, r2
 800297c:	2b40      	cmp	r3, #64	; 0x40
 800297e:	d004      	beq.n	800298a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002980:	187b      	adds	r3, r7, r1
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2228      	movs	r2, #40	; 0x28
 8002986:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002988:	d047      	beq.n	8002a1a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	0018      	movs	r0, r3
 800298e:	f000 fcf7 	bl	8003380 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2240      	movs	r2, #64	; 0x40
 800299a:	4013      	ands	r3, r2
 800299c:	2b40      	cmp	r3, #64	; 0x40
 800299e:	d137      	bne.n	8002a10 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029a0:	f3ef 8310 	mrs	r3, PRIMASK
 80029a4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80029a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029a8:	2090      	movs	r0, #144	; 0x90
 80029aa:	183a      	adds	r2, r7, r0
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	2301      	movs	r3, #1
 80029b0:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029b4:	f383 8810 	msr	PRIMASK, r3
}
 80029b8:	46c0      	nop			; (mov r8, r8)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2140      	movs	r1, #64	; 0x40
 80029c6:	438a      	bics	r2, r1
 80029c8:	609a      	str	r2, [r3, #8]
 80029ca:	183b      	adds	r3, r7, r0
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029d2:	f383 8810 	msr	PRIMASK, r3
}
 80029d6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d012      	beq.n	8002a06 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	4a14      	ldr	r2, [pc, #80]	; (8002a38 <HAL_UART_IRQHandler+0x2a0>)
 80029e6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ec:	0018      	movs	r0, r3
 80029ee:	f7fe ff5b 	bl	80018a8 <HAL_DMA_Abort_IT>
 80029f2:	1e03      	subs	r3, r0, #0
 80029f4:	d01a      	beq.n	8002a2c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a00:	0018      	movs	r0, r3
 8002a02:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a04:	e012      	b.n	8002a2c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f000 f9a5 	bl	8002d58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a0e:	e00d      	b.n	8002a2c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	0018      	movs	r0, r3
 8002a14:	f000 f9a0 	bl	8002d58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a18:	e008      	b.n	8002a2c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f000 f99b 	bl	8002d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2280      	movs	r2, #128	; 0x80
 8002a26:	2100      	movs	r1, #0
 8002a28:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002a2a:	e17f      	b.n	8002d2c <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a2c:	46c0      	nop			; (mov r8, r8)
    return;
 8002a2e:	e17d      	b.n	8002d2c <HAL_UART_IRQHandler+0x594>
 8002a30:	0000080f 	.word	0x0000080f
 8002a34:	04000120 	.word	0x04000120
 8002a38:	08003445 	.word	0x08003445

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d000      	beq.n	8002a46 <HAL_UART_IRQHandler+0x2ae>
 8002a44:	e131      	b.n	8002caa <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a46:	23a4      	movs	r3, #164	; 0xa4
 8002a48:	18fb      	adds	r3, r7, r3
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2210      	movs	r2, #16
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d100      	bne.n	8002a54 <HAL_UART_IRQHandler+0x2bc>
 8002a52:	e12a      	b.n	8002caa <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a54:	23a0      	movs	r3, #160	; 0xa0
 8002a56:	18fb      	adds	r3, r7, r3
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2210      	movs	r2, #16
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d100      	bne.n	8002a62 <HAL_UART_IRQHandler+0x2ca>
 8002a60:	e123      	b.n	8002caa <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2210      	movs	r2, #16
 8002a68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2240      	movs	r2, #64	; 0x40
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b40      	cmp	r3, #64	; 0x40
 8002a76:	d000      	beq.n	8002a7a <HAL_UART_IRQHandler+0x2e2>
 8002a78:	e09b      	b.n	8002bb2 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	217e      	movs	r1, #126	; 0x7e
 8002a84:	187b      	adds	r3, r7, r1
 8002a86:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002a88:	187b      	adds	r3, r7, r1
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d100      	bne.n	8002a92 <HAL_UART_IRQHandler+0x2fa>
 8002a90:	e14e      	b.n	8002d30 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2258      	movs	r2, #88	; 0x58
 8002a96:	5a9b      	ldrh	r3, [r3, r2]
 8002a98:	187a      	adds	r2, r7, r1
 8002a9a:	8812      	ldrh	r2, [r2, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d300      	bcc.n	8002aa2 <HAL_UART_IRQHandler+0x30a>
 8002aa0:	e146      	b.n	8002d30 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	187a      	adds	r2, r7, r1
 8002aa6:	215a      	movs	r1, #90	; 0x5a
 8002aa8:	8812      	ldrh	r2, [r2, #0]
 8002aaa:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	2b20      	cmp	r3, #32
 8002ab4:	d06e      	beq.n	8002b94 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8002aba:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002abe:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac6:	f383 8810 	msr	PRIMASK, r3
}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	499a      	ldr	r1, [pc, #616]	; (8002d40 <HAL_UART_IRQHandler+0x5a8>)
 8002ad8:	400a      	ands	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ade:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae2:	f383 8810 	msr	PRIMASK, r3
}
 8002ae6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8002aec:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002af0:	677b      	str	r3, [r7, #116]	; 0x74
 8002af2:	2301      	movs	r3, #1
 8002af4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002af8:	f383 8810 	msr	PRIMASK, r3
}
 8002afc:	46c0      	nop			; (mov r8, r8)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2101      	movs	r1, #1
 8002b0a:	438a      	bics	r2, r1
 8002b0c:	609a      	str	r2, [r3, #8]
 8002b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b10:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b14:	f383 8810 	msr	PRIMASK, r3
}
 8002b18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b1e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b22:	673b      	str	r3, [r7, #112]	; 0x70
 8002b24:	2301      	movs	r3, #1
 8002b26:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b2a:	f383 8810 	msr	PRIMASK, r3
}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2140      	movs	r1, #64	; 0x40
 8002b3c:	438a      	bics	r2, r1
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b42:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b46:	f383 8810 	msr	PRIMASK, r3
}
 8002b4a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b58:	f3ef 8310 	mrs	r3, PRIMASK
 8002b5c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b62:	2301      	movs	r3, #1
 8002b64:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b68:	f383 8810 	msr	PRIMASK, r3
}
 8002b6c:	46c0      	nop			; (mov r8, r8)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2110      	movs	r1, #16
 8002b7a:	438a      	bics	r2, r1
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b80:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b84:	f383 8810 	msr	PRIMASK, r3
}
 8002b88:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f7fe fe52 	bl	8001838 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2258      	movs	r2, #88	; 0x58
 8002b98:	5a9a      	ldrh	r2, [r3, r2]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	215a      	movs	r1, #90	; 0x5a
 8002b9e:	5a5b      	ldrh	r3, [r3, r1]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	0011      	movs	r1, r2
 8002baa:	0018      	movs	r0, r3
 8002bac:	f000 f8dc 	bl	8002d68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002bb0:	e0be      	b.n	8002d30 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2258      	movs	r2, #88	; 0x58
 8002bb6:	5a99      	ldrh	r1, [r3, r2]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	225a      	movs	r2, #90	; 0x5a
 8002bbc:	5a9b      	ldrh	r3, [r3, r2]
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	208e      	movs	r0, #142	; 0x8e
 8002bc2:	183b      	adds	r3, r7, r0
 8002bc4:	1a8a      	subs	r2, r1, r2
 8002bc6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	225a      	movs	r2, #90	; 0x5a
 8002bcc:	5a9b      	ldrh	r3, [r3, r2]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d100      	bne.n	8002bd6 <HAL_UART_IRQHandler+0x43e>
 8002bd4:	e0ae      	b.n	8002d34 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8002bd6:	183b      	adds	r3, r7, r0
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d100      	bne.n	8002be0 <HAL_UART_IRQHandler+0x448>
 8002bde:	e0a9      	b.n	8002d34 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002be0:	f3ef 8310 	mrs	r3, PRIMASK
 8002be4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002be6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002be8:	2488      	movs	r4, #136	; 0x88
 8002bea:	193a      	adds	r2, r7, r4
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	2301      	movs	r3, #1
 8002bf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	f383 8810 	msr	PRIMASK, r3
}
 8002bf8:	46c0      	nop			; (mov r8, r8)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	494f      	ldr	r1, [pc, #316]	; (8002d44 <HAL_UART_IRQHandler+0x5ac>)
 8002c06:	400a      	ands	r2, r1
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	193b      	adds	r3, r7, r4
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f383 8810 	msr	PRIMASK, r3
}
 8002c16:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c18:	f3ef 8310 	mrs	r3, PRIMASK
 8002c1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c1e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c20:	2484      	movs	r4, #132	; 0x84
 8002c22:	193a      	adds	r2, r7, r4
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	2301      	movs	r3, #1
 8002c28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f383 8810 	msr	PRIMASK, r3
}
 8002c30:	46c0      	nop			; (mov r8, r8)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	438a      	bics	r2, r1
 8002c40:	609a      	str	r2, [r3, #8]
 8002c42:	193b      	adds	r3, r7, r4
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	f383 8810 	msr	PRIMASK, r3
}
 8002c4e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2220      	movs	r2, #32
 8002c54:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c62:	f3ef 8310 	mrs	r3, PRIMASK
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c6a:	2480      	movs	r4, #128	; 0x80
 8002c6c:	193a      	adds	r2, r7, r4
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	2301      	movs	r3, #1
 8002c72:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c76:	f383 8810 	msr	PRIMASK, r3
}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2110      	movs	r1, #16
 8002c88:	438a      	bics	r2, r1
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	193b      	adds	r3, r7, r4
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c94:	f383 8810 	msr	PRIMASK, r3
}
 8002c98:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c9a:	183b      	adds	r3, r7, r0
 8002c9c:	881a      	ldrh	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	0011      	movs	r1, r2
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f000 f860 	bl	8002d68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ca8:	e044      	b.n	8002d34 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002caa:	23a4      	movs	r3, #164	; 0xa4
 8002cac:	18fb      	adds	r3, r7, r3
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	035b      	lsls	r3, r3, #13
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d010      	beq.n	8002cda <HAL_UART_IRQHandler+0x542>
 8002cb8:	239c      	movs	r3, #156	; 0x9c
 8002cba:	18fb      	adds	r3, r7, r3
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	03db      	lsls	r3, r3, #15
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d009      	beq.n	8002cda <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2280      	movs	r2, #128	; 0x80
 8002ccc:	0352      	lsls	r2, r2, #13
 8002cce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f000 fbf8 	bl	80034c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cd8:	e02f      	b.n	8002d3a <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002cda:	23a4      	movs	r3, #164	; 0xa4
 8002cdc:	18fb      	adds	r3, r7, r3
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2280      	movs	r2, #128	; 0x80
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d00f      	beq.n	8002d06 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002ce6:	23a0      	movs	r3, #160	; 0xa0
 8002ce8:	18fb      	adds	r3, r7, r3
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2280      	movs	r2, #128	; 0x80
 8002cee:	4013      	ands	r3, r2
 8002cf0:	d009      	beq.n	8002d06 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d01e      	beq.n	8002d38 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	0010      	movs	r0, r2
 8002d02:	4798      	blx	r3
    }
    return;
 8002d04:	e018      	b.n	8002d38 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d06:	23a4      	movs	r3, #164	; 0xa4
 8002d08:	18fb      	adds	r3, r7, r3
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2240      	movs	r2, #64	; 0x40
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d013      	beq.n	8002d3a <HAL_UART_IRQHandler+0x5a2>
 8002d12:	23a0      	movs	r3, #160	; 0xa0
 8002d14:	18fb      	adds	r3, r7, r3
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2240      	movs	r2, #64	; 0x40
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d00d      	beq.n	8002d3a <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	0018      	movs	r0, r3
 8002d22:	f000 fba6 	bl	8003472 <UART_EndTransmit_IT>
    return;
 8002d26:	e008      	b.n	8002d3a <HAL_UART_IRQHandler+0x5a2>
      return;
 8002d28:	46c0      	nop			; (mov r8, r8)
 8002d2a:	e006      	b.n	8002d3a <HAL_UART_IRQHandler+0x5a2>
    return;
 8002d2c:	46c0      	nop			; (mov r8, r8)
 8002d2e:	e004      	b.n	8002d3a <HAL_UART_IRQHandler+0x5a2>
      return;
 8002d30:	46c0      	nop			; (mov r8, r8)
 8002d32:	e002      	b.n	8002d3a <HAL_UART_IRQHandler+0x5a2>
      return;
 8002d34:	46c0      	nop			; (mov r8, r8)
 8002d36:	e000      	b.n	8002d3a <HAL_UART_IRQHandler+0x5a2>
    return;
 8002d38:	46c0      	nop			; (mov r8, r8)
  }

}
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b02b      	add	sp, #172	; 0xac
 8002d3e:	bd90      	pop	{r4, r7, pc}
 8002d40:	fffffeff 	.word	0xfffffeff
 8002d44:	fffffedf 	.word	0xfffffedf

08002d48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d50:	46c0      	nop			; (mov r8, r8)
 8002d52:	46bd      	mov	sp, r7
 8002d54:	b002      	add	sp, #8
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d60:	46c0      	nop			; (mov r8, r8)
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b002      	add	sp, #8
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	000a      	movs	r2, r1
 8002d72:	1cbb      	adds	r3, r7, #2
 8002d74:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b002      	add	sp, #8
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d88:	231e      	movs	r3, #30
 8002d8a:	18fb      	adds	r3, r7, r3
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a8d      	ldr	r2, [pc, #564]	; (8002fe4 <UART_SetConfig+0x264>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	0019      	movs	r1, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	4a88      	ldr	r2, [pc, #544]	; (8002fe8 <UART_SetConfig+0x268>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	0019      	movs	r1, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	4a7f      	ldr	r2, [pc, #508]	; (8002fec <UART_SetConfig+0x26c>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	0019      	movs	r1, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a7b      	ldr	r2, [pc, #492]	; (8002ff0 <UART_SetConfig+0x270>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d127      	bne.n	8002e56 <UART_SetConfig+0xd6>
 8002e06:	4b7b      	ldr	r3, [pc, #492]	; (8002ff4 <UART_SetConfig+0x274>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d00d      	beq.n	8002e2e <UART_SetConfig+0xae>
 8002e12:	d81b      	bhi.n	8002e4c <UART_SetConfig+0xcc>
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d014      	beq.n	8002e42 <UART_SetConfig+0xc2>
 8002e18:	d818      	bhi.n	8002e4c <UART_SetConfig+0xcc>
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <UART_SetConfig+0xa4>
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d00a      	beq.n	8002e38 <UART_SetConfig+0xb8>
 8002e22:	e013      	b.n	8002e4c <UART_SetConfig+0xcc>
 8002e24:	231f      	movs	r3, #31
 8002e26:	18fb      	adds	r3, r7, r3
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
 8002e2c:	e021      	b.n	8002e72 <UART_SetConfig+0xf2>
 8002e2e:	231f      	movs	r3, #31
 8002e30:	18fb      	adds	r3, r7, r3
 8002e32:	2202      	movs	r2, #2
 8002e34:	701a      	strb	r2, [r3, #0]
 8002e36:	e01c      	b.n	8002e72 <UART_SetConfig+0xf2>
 8002e38:	231f      	movs	r3, #31
 8002e3a:	18fb      	adds	r3, r7, r3
 8002e3c:	2204      	movs	r2, #4
 8002e3e:	701a      	strb	r2, [r3, #0]
 8002e40:	e017      	b.n	8002e72 <UART_SetConfig+0xf2>
 8002e42:	231f      	movs	r3, #31
 8002e44:	18fb      	adds	r3, r7, r3
 8002e46:	2208      	movs	r2, #8
 8002e48:	701a      	strb	r2, [r3, #0]
 8002e4a:	e012      	b.n	8002e72 <UART_SetConfig+0xf2>
 8002e4c:	231f      	movs	r3, #31
 8002e4e:	18fb      	adds	r3, r7, r3
 8002e50:	2210      	movs	r2, #16
 8002e52:	701a      	strb	r2, [r3, #0]
 8002e54:	e00d      	b.n	8002e72 <UART_SetConfig+0xf2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a67      	ldr	r2, [pc, #412]	; (8002ff8 <UART_SetConfig+0x278>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d104      	bne.n	8002e6a <UART_SetConfig+0xea>
 8002e60:	231f      	movs	r3, #31
 8002e62:	18fb      	adds	r3, r7, r3
 8002e64:	2200      	movs	r2, #0
 8002e66:	701a      	strb	r2, [r3, #0]
 8002e68:	e003      	b.n	8002e72 <UART_SetConfig+0xf2>
 8002e6a:	231f      	movs	r3, #31
 8002e6c:	18fb      	adds	r3, r7, r3
 8002e6e:	2210      	movs	r2, #16
 8002e70:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69da      	ldr	r2, [r3, #28]
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	021b      	lsls	r3, r3, #8
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d15d      	bne.n	8002f3a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002e7e:	231f      	movs	r3, #31
 8002e80:	18fb      	adds	r3, r7, r3
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d015      	beq.n	8002eb4 <UART_SetConfig+0x134>
 8002e88:	dc18      	bgt.n	8002ebc <UART_SetConfig+0x13c>
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d00d      	beq.n	8002eaa <UART_SetConfig+0x12a>
 8002e8e:	dc15      	bgt.n	8002ebc <UART_SetConfig+0x13c>
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <UART_SetConfig+0x11a>
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d005      	beq.n	8002ea4 <UART_SetConfig+0x124>
 8002e98:	e010      	b.n	8002ebc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e9a:	f7ff fc13 	bl	80026c4 <HAL_RCC_GetPCLK1Freq>
 8002e9e:	0003      	movs	r3, r0
 8002ea0:	61bb      	str	r3, [r7, #24]
        break;
 8002ea2:	e012      	b.n	8002eca <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ea4:	4b55      	ldr	r3, [pc, #340]	; (8002ffc <UART_SetConfig+0x27c>)
 8002ea6:	61bb      	str	r3, [r7, #24]
        break;
 8002ea8:	e00f      	b.n	8002eca <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eaa:	f7ff fb9d 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 8002eae:	0003      	movs	r3, r0
 8002eb0:	61bb      	str	r3, [r7, #24]
        break;
 8002eb2:	e00a      	b.n	8002eca <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eb4:	2380      	movs	r3, #128	; 0x80
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	61bb      	str	r3, [r7, #24]
        break;
 8002eba:	e006      	b.n	8002eca <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ec0:	231e      	movs	r3, #30
 8002ec2:	18fb      	adds	r3, r7, r3
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]
        break;
 8002ec8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d100      	bne.n	8002ed2 <UART_SetConfig+0x152>
 8002ed0:	e07b      	b.n	8002fca <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	005a      	lsls	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	085b      	lsrs	r3, r3, #1
 8002edc:	18d2      	adds	r2, r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	0019      	movs	r1, r3
 8002ee4:	0010      	movs	r0, r2
 8002ee6:	f7fd f90f 	bl	8000108 <__udivsi3>
 8002eea:	0003      	movs	r3, r0
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	2b0f      	cmp	r3, #15
 8002ef4:	d91c      	bls.n	8002f30 <UART_SetConfig+0x1b0>
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	2380      	movs	r3, #128	; 0x80
 8002efa:	025b      	lsls	r3, r3, #9
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d217      	bcs.n	8002f30 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	200e      	movs	r0, #14
 8002f06:	183b      	adds	r3, r7, r0
 8002f08:	210f      	movs	r1, #15
 8002f0a:	438a      	bics	r2, r1
 8002f0c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	085b      	lsrs	r3, r3, #1
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2207      	movs	r2, #7
 8002f16:	4013      	ands	r3, r2
 8002f18:	b299      	uxth	r1, r3
 8002f1a:	183b      	adds	r3, r7, r0
 8002f1c:	183a      	adds	r2, r7, r0
 8002f1e:	8812      	ldrh	r2, [r2, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	183a      	adds	r2, r7, r0
 8002f2a:	8812      	ldrh	r2, [r2, #0]
 8002f2c:	60da      	str	r2, [r3, #12]
 8002f2e:	e04c      	b.n	8002fca <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002f30:	231e      	movs	r3, #30
 8002f32:	18fb      	adds	r3, r7, r3
 8002f34:	2201      	movs	r2, #1
 8002f36:	701a      	strb	r2, [r3, #0]
 8002f38:	e047      	b.n	8002fca <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f3a:	231f      	movs	r3, #31
 8002f3c:	18fb      	adds	r3, r7, r3
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d015      	beq.n	8002f70 <UART_SetConfig+0x1f0>
 8002f44:	dc18      	bgt.n	8002f78 <UART_SetConfig+0x1f8>
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d00d      	beq.n	8002f66 <UART_SetConfig+0x1e6>
 8002f4a:	dc15      	bgt.n	8002f78 <UART_SetConfig+0x1f8>
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d002      	beq.n	8002f56 <UART_SetConfig+0x1d6>
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d005      	beq.n	8002f60 <UART_SetConfig+0x1e0>
 8002f54:	e010      	b.n	8002f78 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f56:	f7ff fbb5 	bl	80026c4 <HAL_RCC_GetPCLK1Freq>
 8002f5a:	0003      	movs	r3, r0
 8002f5c:	61bb      	str	r3, [r7, #24]
        break;
 8002f5e:	e012      	b.n	8002f86 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f60:	4b26      	ldr	r3, [pc, #152]	; (8002ffc <UART_SetConfig+0x27c>)
 8002f62:	61bb      	str	r3, [r7, #24]
        break;
 8002f64:	e00f      	b.n	8002f86 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f66:	f7ff fb3f 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 8002f6a:	0003      	movs	r3, r0
 8002f6c:	61bb      	str	r3, [r7, #24]
        break;
 8002f6e:	e00a      	b.n	8002f86 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f70:	2380      	movs	r3, #128	; 0x80
 8002f72:	021b      	lsls	r3, r3, #8
 8002f74:	61bb      	str	r3, [r7, #24]
        break;
 8002f76:	e006      	b.n	8002f86 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f7c:	231e      	movs	r3, #30
 8002f7e:	18fb      	adds	r3, r7, r3
 8002f80:	2201      	movs	r2, #1
 8002f82:	701a      	strb	r2, [r3, #0]
        break;
 8002f84:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d01e      	beq.n	8002fca <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	085a      	lsrs	r2, r3, #1
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	18d2      	adds	r2, r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	0019      	movs	r1, r3
 8002f9c:	0010      	movs	r0, r2
 8002f9e:	f7fd f8b3 	bl	8000108 <__udivsi3>
 8002fa2:	0003      	movs	r3, r0
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	2b0f      	cmp	r3, #15
 8002fac:	d909      	bls.n	8002fc2 <UART_SetConfig+0x242>
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	2380      	movs	r3, #128	; 0x80
 8002fb2:	025b      	lsls	r3, r3, #9
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d204      	bcs.n	8002fc2 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	60da      	str	r2, [r3, #12]
 8002fc0:	e003      	b.n	8002fca <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002fc2:	231e      	movs	r3, #30
 8002fc4:	18fb      	adds	r3, r7, r3
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002fd6:	231e      	movs	r3, #30
 8002fd8:	18fb      	adds	r3, r7, r3
 8002fda:	781b      	ldrb	r3, [r3, #0]
}
 8002fdc:	0018      	movs	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b008      	add	sp, #32
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	ffff69f3 	.word	0xffff69f3
 8002fe8:	ffffcfff 	.word	0xffffcfff
 8002fec:	fffff4ff 	.word	0xfffff4ff
 8002ff0:	40013800 	.word	0x40013800
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40004400 	.word	0x40004400
 8002ffc:	007a1200 	.word	0x007a1200

08003000 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	2201      	movs	r2, #1
 800300e:	4013      	ands	r3, r2
 8003010:	d00b      	beq.n	800302a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	4a4a      	ldr	r2, [pc, #296]	; (8003144 <UART_AdvFeatureConfig+0x144>)
 800301a:	4013      	ands	r3, r2
 800301c:	0019      	movs	r1, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	2202      	movs	r2, #2
 8003030:	4013      	ands	r3, r2
 8003032:	d00b      	beq.n	800304c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	4a43      	ldr	r2, [pc, #268]	; (8003148 <UART_AdvFeatureConfig+0x148>)
 800303c:	4013      	ands	r3, r2
 800303e:	0019      	movs	r1, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	2204      	movs	r2, #4
 8003052:	4013      	ands	r3, r2
 8003054:	d00b      	beq.n	800306e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	4a3b      	ldr	r2, [pc, #236]	; (800314c <UART_AdvFeatureConfig+0x14c>)
 800305e:	4013      	ands	r3, r2
 8003060:	0019      	movs	r1, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	2208      	movs	r2, #8
 8003074:	4013      	ands	r3, r2
 8003076:	d00b      	beq.n	8003090 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	4a34      	ldr	r2, [pc, #208]	; (8003150 <UART_AdvFeatureConfig+0x150>)
 8003080:	4013      	ands	r3, r2
 8003082:	0019      	movs	r1, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	2210      	movs	r2, #16
 8003096:	4013      	ands	r3, r2
 8003098:	d00b      	beq.n	80030b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	4a2c      	ldr	r2, [pc, #176]	; (8003154 <UART_AdvFeatureConfig+0x154>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	0019      	movs	r1, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	2220      	movs	r2, #32
 80030b8:	4013      	ands	r3, r2
 80030ba:	d00b      	beq.n	80030d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	4a25      	ldr	r2, [pc, #148]	; (8003158 <UART_AdvFeatureConfig+0x158>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	0019      	movs	r1, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	2240      	movs	r2, #64	; 0x40
 80030da:	4013      	ands	r3, r2
 80030dc:	d01d      	beq.n	800311a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	4a1d      	ldr	r2, [pc, #116]	; (800315c <UART_AdvFeatureConfig+0x15c>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	0019      	movs	r1, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030fa:	2380      	movs	r3, #128	; 0x80
 80030fc:	035b      	lsls	r3, r3, #13
 80030fe:	429a      	cmp	r2, r3
 8003100:	d10b      	bne.n	800311a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	4a15      	ldr	r2, [pc, #84]	; (8003160 <UART_AdvFeatureConfig+0x160>)
 800310a:	4013      	ands	r3, r2
 800310c:	0019      	movs	r1, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	2280      	movs	r2, #128	; 0x80
 8003120:	4013      	ands	r3, r2
 8003122:	d00b      	beq.n	800313c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	4a0e      	ldr	r2, [pc, #56]	; (8003164 <UART_AdvFeatureConfig+0x164>)
 800312c:	4013      	ands	r3, r2
 800312e:	0019      	movs	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	605a      	str	r2, [r3, #4]
  }
}
 800313c:	46c0      	nop			; (mov r8, r8)
 800313e:	46bd      	mov	sp, r7
 8003140:	b002      	add	sp, #8
 8003142:	bd80      	pop	{r7, pc}
 8003144:	fffdffff 	.word	0xfffdffff
 8003148:	fffeffff 	.word	0xfffeffff
 800314c:	fffbffff 	.word	0xfffbffff
 8003150:	ffff7fff 	.word	0xffff7fff
 8003154:	ffffefff 	.word	0xffffefff
 8003158:	ffffdfff 	.word	0xffffdfff
 800315c:	ffefffff 	.word	0xffefffff
 8003160:	ff9fffff 	.word	0xff9fffff
 8003164:	fff7ffff 	.word	0xfff7ffff

08003168 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af02      	add	r7, sp, #8
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2280      	movs	r2, #128	; 0x80
 8003174:	2100      	movs	r1, #0
 8003176:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003178:	f7fd fd42 	bl	8000c00 <HAL_GetTick>
 800317c:	0003      	movs	r3, r0
 800317e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2208      	movs	r2, #8
 8003188:	4013      	ands	r3, r2
 800318a:	2b08      	cmp	r3, #8
 800318c:	d10c      	bne.n	80031a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2280      	movs	r2, #128	; 0x80
 8003192:	0391      	lsls	r1, r2, #14
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	4a17      	ldr	r2, [pc, #92]	; (80031f4 <UART_CheckIdleState+0x8c>)
 8003198:	9200      	str	r2, [sp, #0]
 800319a:	2200      	movs	r2, #0
 800319c:	f000 f82c 	bl	80031f8 <UART_WaitOnFlagUntilTimeout>
 80031a0:	1e03      	subs	r3, r0, #0
 80031a2:	d001      	beq.n	80031a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e021      	b.n	80031ec <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2204      	movs	r2, #4
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d10c      	bne.n	80031d0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2280      	movs	r2, #128	; 0x80
 80031ba:	03d1      	lsls	r1, r2, #15
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	4a0d      	ldr	r2, [pc, #52]	; (80031f4 <UART_CheckIdleState+0x8c>)
 80031c0:	9200      	str	r2, [sp, #0]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f000 f818 	bl	80031f8 <UART_WaitOnFlagUntilTimeout>
 80031c8:	1e03      	subs	r3, r0, #0
 80031ca:	d001      	beq.n	80031d0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e00d      	b.n	80031ec <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2220      	movs	r2, #32
 80031d4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2220      	movs	r2, #32
 80031da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2274      	movs	r2, #116	; 0x74
 80031e6:	2100      	movs	r1, #0
 80031e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	0018      	movs	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b004      	add	sp, #16
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	01ffffff 	.word	0x01ffffff

080031f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b094      	sub	sp, #80	; 0x50
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	1dfb      	adds	r3, r7, #7
 8003206:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003208:	e0a3      	b.n	8003352 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800320a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800320c:	3301      	adds	r3, #1
 800320e:	d100      	bne.n	8003212 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003210:	e09f      	b.n	8003352 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003212:	f7fd fcf5 	bl	8000c00 <HAL_GetTick>
 8003216:	0002      	movs	r2, r0
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800321e:	429a      	cmp	r2, r3
 8003220:	d302      	bcc.n	8003228 <UART_WaitOnFlagUntilTimeout+0x30>
 8003222:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003224:	2b00      	cmp	r3, #0
 8003226:	d13d      	bne.n	80032a4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003228:	f3ef 8310 	mrs	r3, PRIMASK
 800322c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800322e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003230:	647b      	str	r3, [r7, #68]	; 0x44
 8003232:	2301      	movs	r3, #1
 8003234:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003238:	f383 8810 	msr	PRIMASK, r3
}
 800323c:	46c0      	nop			; (mov r8, r8)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	494c      	ldr	r1, [pc, #304]	; (800337c <UART_WaitOnFlagUntilTimeout+0x184>)
 800324a:	400a      	ands	r2, r1
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003250:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003254:	f383 8810 	msr	PRIMASK, r3
}
 8003258:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800325a:	f3ef 8310 	mrs	r3, PRIMASK
 800325e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003262:	643b      	str	r3, [r7, #64]	; 0x40
 8003264:	2301      	movs	r3, #1
 8003266:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326a:	f383 8810 	msr	PRIMASK, r3
}
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2101      	movs	r1, #1
 800327c:	438a      	bics	r2, r1
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003282:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003286:	f383 8810 	msr	PRIMASK, r3
}
 800328a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2220      	movs	r2, #32
 8003290:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2220      	movs	r2, #32
 8003296:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2274      	movs	r2, #116	; 0x74
 800329c:	2100      	movs	r1, #0
 800329e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e067      	b.n	8003374 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2204      	movs	r2, #4
 80032ac:	4013      	ands	r3, r2
 80032ae:	d050      	beq.n	8003352 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	69da      	ldr	r2, [r3, #28]
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	401a      	ands	r2, r3
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d146      	bne.n	8003352 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2280      	movs	r2, #128	; 0x80
 80032ca:	0112      	lsls	r2, r2, #4
 80032cc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ce:	f3ef 8310 	mrs	r3, PRIMASK
 80032d2:	613b      	str	r3, [r7, #16]
  return(result);
 80032d4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032d8:	2301      	movs	r3, #1
 80032da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f383 8810 	msr	PRIMASK, r3
}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4923      	ldr	r1, [pc, #140]	; (800337c <UART_WaitOnFlagUntilTimeout+0x184>)
 80032f0:	400a      	ands	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	f383 8810 	msr	PRIMASK, r3
}
 80032fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003300:	f3ef 8310 	mrs	r3, PRIMASK
 8003304:	61fb      	str	r3, [r7, #28]
  return(result);
 8003306:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003308:	64bb      	str	r3, [r7, #72]	; 0x48
 800330a:	2301      	movs	r3, #1
 800330c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	f383 8810 	msr	PRIMASK, r3
}
 8003314:	46c0      	nop			; (mov r8, r8)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2101      	movs	r1, #1
 8003322:	438a      	bics	r2, r1
 8003324:	609a      	str	r2, [r3, #8]
 8003326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	f383 8810 	msr	PRIMASK, r3
}
 8003330:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2220      	movs	r2, #32
 800333c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2280      	movs	r2, #128	; 0x80
 8003342:	2120      	movs	r1, #32
 8003344:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2274      	movs	r2, #116	; 0x74
 800334a:	2100      	movs	r1, #0
 800334c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e010      	b.n	8003374 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	4013      	ands	r3, r2
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	425a      	negs	r2, r3
 8003362:	4153      	adcs	r3, r2
 8003364:	b2db      	uxtb	r3, r3
 8003366:	001a      	movs	r2, r3
 8003368:	1dfb      	adds	r3, r7, #7
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d100      	bne.n	8003372 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003370:	e74b      	b.n	800320a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	0018      	movs	r0, r3
 8003376:	46bd      	mov	sp, r7
 8003378:	b014      	add	sp, #80	; 0x50
 800337a:	bd80      	pop	{r7, pc}
 800337c:	fffffe5f 	.word	0xfffffe5f

08003380 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08e      	sub	sp, #56	; 0x38
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003388:	f3ef 8310 	mrs	r3, PRIMASK
 800338c:	617b      	str	r3, [r7, #20]
  return(result);
 800338e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003390:	637b      	str	r3, [r7, #52]	; 0x34
 8003392:	2301      	movs	r3, #1
 8003394:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	f383 8810 	msr	PRIMASK, r3
}
 800339c:	46c0      	nop			; (mov r8, r8)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4925      	ldr	r1, [pc, #148]	; (8003440 <UART_EndRxTransfer+0xc0>)
 80033aa:	400a      	ands	r2, r1
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	f383 8810 	msr	PRIMASK, r3
}
 80033b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ba:	f3ef 8310 	mrs	r3, PRIMASK
 80033be:	623b      	str	r3, [r7, #32]
  return(result);
 80033c0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c2:	633b      	str	r3, [r7, #48]	; 0x30
 80033c4:	2301      	movs	r3, #1
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	f383 8810 	msr	PRIMASK, r3
}
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2101      	movs	r1, #1
 80033dc:	438a      	bics	r2, r1
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e6:	f383 8810 	msr	PRIMASK, r3
}
 80033ea:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d118      	bne.n	8003426 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033f4:	f3ef 8310 	mrs	r3, PRIMASK
 80033f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80033fa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033fe:	2301      	movs	r3, #1
 8003400:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f383 8810 	msr	PRIMASK, r3
}
 8003408:	46c0      	nop			; (mov r8, r8)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2110      	movs	r1, #16
 8003416:	438a      	bics	r2, r1
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f383 8810 	msr	PRIMASK, r3
}
 8003424:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2220      	movs	r2, #32
 800342a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003438:	46c0      	nop			; (mov r8, r8)
 800343a:	46bd      	mov	sp, r7
 800343c:	b00e      	add	sp, #56	; 0x38
 800343e:	bd80      	pop	{r7, pc}
 8003440:	fffffedf 	.word	0xfffffedf

08003444 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	225a      	movs	r2, #90	; 0x5a
 8003456:	2100      	movs	r1, #0
 8003458:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2252      	movs	r2, #82	; 0x52
 800345e:	2100      	movs	r1, #0
 8003460:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	0018      	movs	r0, r3
 8003466:	f7ff fc77 	bl	8002d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	46bd      	mov	sp, r7
 800346e:	b004      	add	sp, #16
 8003470:	bd80      	pop	{r7, pc}

08003472 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b086      	sub	sp, #24
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800347a:	f3ef 8310 	mrs	r3, PRIMASK
 800347e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003480:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	2301      	movs	r3, #1
 8003486:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f383 8810 	msr	PRIMASK, r3
}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2140      	movs	r1, #64	; 0x40
 800349c:	438a      	bics	r2, r1
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f383 8810 	msr	PRIMASK, r3
}
 80034aa:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	0018      	movs	r0, r3
 80034bc:	f7ff fc44 	bl	8002d48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034c0:	46c0      	nop			; (mov r8, r8)
 80034c2:	46bd      	mov	sp, r7
 80034c4:	b006      	add	sp, #24
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80034d0:	46c0      	nop			; (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b002      	add	sp, #8
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <__libc_init_array>:
 80034d8:	b570      	push	{r4, r5, r6, lr}
 80034da:	2600      	movs	r6, #0
 80034dc:	4d0c      	ldr	r5, [pc, #48]	; (8003510 <__libc_init_array+0x38>)
 80034de:	4c0d      	ldr	r4, [pc, #52]	; (8003514 <__libc_init_array+0x3c>)
 80034e0:	1b64      	subs	r4, r4, r5
 80034e2:	10a4      	asrs	r4, r4, #2
 80034e4:	42a6      	cmp	r6, r4
 80034e6:	d109      	bne.n	80034fc <__libc_init_array+0x24>
 80034e8:	2600      	movs	r6, #0
 80034ea:	f000 f821 	bl	8003530 <_init>
 80034ee:	4d0a      	ldr	r5, [pc, #40]	; (8003518 <__libc_init_array+0x40>)
 80034f0:	4c0a      	ldr	r4, [pc, #40]	; (800351c <__libc_init_array+0x44>)
 80034f2:	1b64      	subs	r4, r4, r5
 80034f4:	10a4      	asrs	r4, r4, #2
 80034f6:	42a6      	cmp	r6, r4
 80034f8:	d105      	bne.n	8003506 <__libc_init_array+0x2e>
 80034fa:	bd70      	pop	{r4, r5, r6, pc}
 80034fc:	00b3      	lsls	r3, r6, #2
 80034fe:	58eb      	ldr	r3, [r5, r3]
 8003500:	4798      	blx	r3
 8003502:	3601      	adds	r6, #1
 8003504:	e7ee      	b.n	80034e4 <__libc_init_array+0xc>
 8003506:	00b3      	lsls	r3, r6, #2
 8003508:	58eb      	ldr	r3, [r5, r3]
 800350a:	4798      	blx	r3
 800350c:	3601      	adds	r6, #1
 800350e:	e7f2      	b.n	80034f6 <__libc_init_array+0x1e>
 8003510:	08003580 	.word	0x08003580
 8003514:	08003580 	.word	0x08003580
 8003518:	08003580 	.word	0x08003580
 800351c:	08003584 	.word	0x08003584

08003520 <memset>:
 8003520:	0003      	movs	r3, r0
 8003522:	1882      	adds	r2, r0, r2
 8003524:	4293      	cmp	r3, r2
 8003526:	d100      	bne.n	800352a <memset+0xa>
 8003528:	4770      	bx	lr
 800352a:	7019      	strb	r1, [r3, #0]
 800352c:	3301      	adds	r3, #1
 800352e:	e7f9      	b.n	8003524 <memset+0x4>

08003530 <_init>:
 8003530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003536:	bc08      	pop	{r3}
 8003538:	469e      	mov	lr, r3
 800353a:	4770      	bx	lr

0800353c <_fini>:
 800353c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003542:	bc08      	pop	{r3}
 8003544:	469e      	mov	lr, r3
 8003546:	4770      	bx	lr
