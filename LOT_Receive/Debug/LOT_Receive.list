
LOT_Receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bf8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003cb8  08003cb8  00013cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d5c  08003d5c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003d5c  08003d5c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d5c  08003d5c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d5c  08003d5c  00013d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d60  08003d60  00013d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000010  08003d74  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08003d74  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000911d  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000179c  00000000  00000000  00029155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  0002a8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000638  00000000  00000000  0002afb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010bff  00000000  00000000  0002b5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000900f  00000000  00000000  0003c1ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00064e6a  00000000  00000000  000451fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000aa068  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001868  00000000  00000000  000aa0b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003ca0 	.word	0x08003ca0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003ca0 	.word	0x08003ca0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f000 fea5 	bl	8000f78 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f000 fe0f 	bl	8000e58 <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 fa76 	bl	8000734 <__aeabi_dsub>
 8000248:	f000 fe06 	bl	8000e58 <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_dmul>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	4698      	mov	r8, r3
 800026a:	030c      	lsls	r4, r1, #12
 800026c:	004b      	lsls	r3, r1, #1
 800026e:	0006      	movs	r6, r0
 8000270:	4692      	mov	sl, r2
 8000272:	b087      	sub	sp, #28
 8000274:	0b24      	lsrs	r4, r4, #12
 8000276:	0d5b      	lsrs	r3, r3, #21
 8000278:	0fcf      	lsrs	r7, r1, #31
 800027a:	2b00      	cmp	r3, #0
 800027c:	d100      	bne.n	8000280 <__aeabi_dmul+0x24>
 800027e:	e15c      	b.n	800053a <__aeabi_dmul+0x2de>
 8000280:	4ad9      	ldr	r2, [pc, #868]	; (80005e8 <__aeabi_dmul+0x38c>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d100      	bne.n	8000288 <__aeabi_dmul+0x2c>
 8000286:	e175      	b.n	8000574 <__aeabi_dmul+0x318>
 8000288:	0f42      	lsrs	r2, r0, #29
 800028a:	00e4      	lsls	r4, r4, #3
 800028c:	4314      	orrs	r4, r2
 800028e:	2280      	movs	r2, #128	; 0x80
 8000290:	0412      	lsls	r2, r2, #16
 8000292:	4314      	orrs	r4, r2
 8000294:	4ad5      	ldr	r2, [pc, #852]	; (80005ec <__aeabi_dmul+0x390>)
 8000296:	00c5      	lsls	r5, r0, #3
 8000298:	4694      	mov	ip, r2
 800029a:	4463      	add	r3, ip
 800029c:	9300      	str	r3, [sp, #0]
 800029e:	2300      	movs	r3, #0
 80002a0:	4699      	mov	r9, r3
 80002a2:	469b      	mov	fp, r3
 80002a4:	4643      	mov	r3, r8
 80002a6:	4642      	mov	r2, r8
 80002a8:	031e      	lsls	r6, r3, #12
 80002aa:	0fd2      	lsrs	r2, r2, #31
 80002ac:	005b      	lsls	r3, r3, #1
 80002ae:	4650      	mov	r0, sl
 80002b0:	4690      	mov	r8, r2
 80002b2:	0b36      	lsrs	r6, r6, #12
 80002b4:	0d5b      	lsrs	r3, r3, #21
 80002b6:	d100      	bne.n	80002ba <__aeabi_dmul+0x5e>
 80002b8:	e120      	b.n	80004fc <__aeabi_dmul+0x2a0>
 80002ba:	4acb      	ldr	r2, [pc, #812]	; (80005e8 <__aeabi_dmul+0x38c>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d100      	bne.n	80002c2 <__aeabi_dmul+0x66>
 80002c0:	e162      	b.n	8000588 <__aeabi_dmul+0x32c>
 80002c2:	49ca      	ldr	r1, [pc, #808]	; (80005ec <__aeabi_dmul+0x390>)
 80002c4:	0f42      	lsrs	r2, r0, #29
 80002c6:	468c      	mov	ip, r1
 80002c8:	9900      	ldr	r1, [sp, #0]
 80002ca:	4463      	add	r3, ip
 80002cc:	00f6      	lsls	r6, r6, #3
 80002ce:	468c      	mov	ip, r1
 80002d0:	4316      	orrs	r6, r2
 80002d2:	2280      	movs	r2, #128	; 0x80
 80002d4:	449c      	add	ip, r3
 80002d6:	0412      	lsls	r2, r2, #16
 80002d8:	4663      	mov	r3, ip
 80002da:	4316      	orrs	r6, r2
 80002dc:	00c2      	lsls	r2, r0, #3
 80002de:	2000      	movs	r0, #0
 80002e0:	9300      	str	r3, [sp, #0]
 80002e2:	9900      	ldr	r1, [sp, #0]
 80002e4:	4643      	mov	r3, r8
 80002e6:	3101      	adds	r1, #1
 80002e8:	468c      	mov	ip, r1
 80002ea:	4649      	mov	r1, r9
 80002ec:	407b      	eors	r3, r7
 80002ee:	9301      	str	r3, [sp, #4]
 80002f0:	290f      	cmp	r1, #15
 80002f2:	d826      	bhi.n	8000342 <__aeabi_dmul+0xe6>
 80002f4:	4bbe      	ldr	r3, [pc, #760]	; (80005f0 <__aeabi_dmul+0x394>)
 80002f6:	0089      	lsls	r1, r1, #2
 80002f8:	5859      	ldr	r1, [r3, r1]
 80002fa:	468f      	mov	pc, r1
 80002fc:	4643      	mov	r3, r8
 80002fe:	9301      	str	r3, [sp, #4]
 8000300:	0034      	movs	r4, r6
 8000302:	0015      	movs	r5, r2
 8000304:	4683      	mov	fp, r0
 8000306:	465b      	mov	r3, fp
 8000308:	2b02      	cmp	r3, #2
 800030a:	d016      	beq.n	800033a <__aeabi_dmul+0xde>
 800030c:	2b03      	cmp	r3, #3
 800030e:	d100      	bne.n	8000312 <__aeabi_dmul+0xb6>
 8000310:	e203      	b.n	800071a <__aeabi_dmul+0x4be>
 8000312:	2b01      	cmp	r3, #1
 8000314:	d000      	beq.n	8000318 <__aeabi_dmul+0xbc>
 8000316:	e0cd      	b.n	80004b4 <__aeabi_dmul+0x258>
 8000318:	2200      	movs	r2, #0
 800031a:	2400      	movs	r4, #0
 800031c:	2500      	movs	r5, #0
 800031e:	9b01      	ldr	r3, [sp, #4]
 8000320:	0512      	lsls	r2, r2, #20
 8000322:	4322      	orrs	r2, r4
 8000324:	07db      	lsls	r3, r3, #31
 8000326:	431a      	orrs	r2, r3
 8000328:	0028      	movs	r0, r5
 800032a:	0011      	movs	r1, r2
 800032c:	b007      	add	sp, #28
 800032e:	bcf0      	pop	{r4, r5, r6, r7}
 8000330:	46bb      	mov	fp, r7
 8000332:	46b2      	mov	sl, r6
 8000334:	46a9      	mov	r9, r5
 8000336:	46a0      	mov	r8, r4
 8000338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800033a:	2400      	movs	r4, #0
 800033c:	2500      	movs	r5, #0
 800033e:	4aaa      	ldr	r2, [pc, #680]	; (80005e8 <__aeabi_dmul+0x38c>)
 8000340:	e7ed      	b.n	800031e <__aeabi_dmul+0xc2>
 8000342:	0c28      	lsrs	r0, r5, #16
 8000344:	042d      	lsls	r5, r5, #16
 8000346:	0c2d      	lsrs	r5, r5, #16
 8000348:	002b      	movs	r3, r5
 800034a:	0c11      	lsrs	r1, r2, #16
 800034c:	0412      	lsls	r2, r2, #16
 800034e:	0c12      	lsrs	r2, r2, #16
 8000350:	4353      	muls	r3, r2
 8000352:	4698      	mov	r8, r3
 8000354:	0013      	movs	r3, r2
 8000356:	002f      	movs	r7, r5
 8000358:	4343      	muls	r3, r0
 800035a:	4699      	mov	r9, r3
 800035c:	434f      	muls	r7, r1
 800035e:	444f      	add	r7, r9
 8000360:	46bb      	mov	fp, r7
 8000362:	4647      	mov	r7, r8
 8000364:	000b      	movs	r3, r1
 8000366:	0c3f      	lsrs	r7, r7, #16
 8000368:	46ba      	mov	sl, r7
 800036a:	4343      	muls	r3, r0
 800036c:	44da      	add	sl, fp
 800036e:	9302      	str	r3, [sp, #8]
 8000370:	45d1      	cmp	r9, sl
 8000372:	d904      	bls.n	800037e <__aeabi_dmul+0x122>
 8000374:	2780      	movs	r7, #128	; 0x80
 8000376:	027f      	lsls	r7, r7, #9
 8000378:	46b9      	mov	r9, r7
 800037a:	444b      	add	r3, r9
 800037c:	9302      	str	r3, [sp, #8]
 800037e:	4653      	mov	r3, sl
 8000380:	0c1b      	lsrs	r3, r3, #16
 8000382:	469b      	mov	fp, r3
 8000384:	4653      	mov	r3, sl
 8000386:	041f      	lsls	r7, r3, #16
 8000388:	4643      	mov	r3, r8
 800038a:	041b      	lsls	r3, r3, #16
 800038c:	0c1b      	lsrs	r3, r3, #16
 800038e:	4698      	mov	r8, r3
 8000390:	003b      	movs	r3, r7
 8000392:	4443      	add	r3, r8
 8000394:	9304      	str	r3, [sp, #16]
 8000396:	0c33      	lsrs	r3, r6, #16
 8000398:	0436      	lsls	r6, r6, #16
 800039a:	0c36      	lsrs	r6, r6, #16
 800039c:	4698      	mov	r8, r3
 800039e:	0033      	movs	r3, r6
 80003a0:	4343      	muls	r3, r0
 80003a2:	4699      	mov	r9, r3
 80003a4:	4643      	mov	r3, r8
 80003a6:	4343      	muls	r3, r0
 80003a8:	002f      	movs	r7, r5
 80003aa:	469a      	mov	sl, r3
 80003ac:	4643      	mov	r3, r8
 80003ae:	4377      	muls	r7, r6
 80003b0:	435d      	muls	r5, r3
 80003b2:	0c38      	lsrs	r0, r7, #16
 80003b4:	444d      	add	r5, r9
 80003b6:	1945      	adds	r5, r0, r5
 80003b8:	45a9      	cmp	r9, r5
 80003ba:	d903      	bls.n	80003c4 <__aeabi_dmul+0x168>
 80003bc:	2380      	movs	r3, #128	; 0x80
 80003be:	025b      	lsls	r3, r3, #9
 80003c0:	4699      	mov	r9, r3
 80003c2:	44ca      	add	sl, r9
 80003c4:	043f      	lsls	r7, r7, #16
 80003c6:	0c28      	lsrs	r0, r5, #16
 80003c8:	0c3f      	lsrs	r7, r7, #16
 80003ca:	042d      	lsls	r5, r5, #16
 80003cc:	19ed      	adds	r5, r5, r7
 80003ce:	0c27      	lsrs	r7, r4, #16
 80003d0:	0424      	lsls	r4, r4, #16
 80003d2:	0c24      	lsrs	r4, r4, #16
 80003d4:	0003      	movs	r3, r0
 80003d6:	0020      	movs	r0, r4
 80003d8:	4350      	muls	r0, r2
 80003da:	437a      	muls	r2, r7
 80003dc:	4691      	mov	r9, r2
 80003de:	003a      	movs	r2, r7
 80003e0:	4453      	add	r3, sl
 80003e2:	9305      	str	r3, [sp, #20]
 80003e4:	0c03      	lsrs	r3, r0, #16
 80003e6:	469a      	mov	sl, r3
 80003e8:	434a      	muls	r2, r1
 80003ea:	4361      	muls	r1, r4
 80003ec:	4449      	add	r1, r9
 80003ee:	4451      	add	r1, sl
 80003f0:	44ab      	add	fp, r5
 80003f2:	4589      	cmp	r9, r1
 80003f4:	d903      	bls.n	80003fe <__aeabi_dmul+0x1a2>
 80003f6:	2380      	movs	r3, #128	; 0x80
 80003f8:	025b      	lsls	r3, r3, #9
 80003fa:	4699      	mov	r9, r3
 80003fc:	444a      	add	r2, r9
 80003fe:	0400      	lsls	r0, r0, #16
 8000400:	0c0b      	lsrs	r3, r1, #16
 8000402:	0c00      	lsrs	r0, r0, #16
 8000404:	0409      	lsls	r1, r1, #16
 8000406:	1809      	adds	r1, r1, r0
 8000408:	0020      	movs	r0, r4
 800040a:	4699      	mov	r9, r3
 800040c:	4643      	mov	r3, r8
 800040e:	4370      	muls	r0, r6
 8000410:	435c      	muls	r4, r3
 8000412:	437e      	muls	r6, r7
 8000414:	435f      	muls	r7, r3
 8000416:	0c03      	lsrs	r3, r0, #16
 8000418:	4698      	mov	r8, r3
 800041a:	19a4      	adds	r4, r4, r6
 800041c:	4444      	add	r4, r8
 800041e:	444a      	add	r2, r9
 8000420:	9703      	str	r7, [sp, #12]
 8000422:	42a6      	cmp	r6, r4
 8000424:	d904      	bls.n	8000430 <__aeabi_dmul+0x1d4>
 8000426:	2380      	movs	r3, #128	; 0x80
 8000428:	025b      	lsls	r3, r3, #9
 800042a:	4698      	mov	r8, r3
 800042c:	4447      	add	r7, r8
 800042e:	9703      	str	r7, [sp, #12]
 8000430:	0423      	lsls	r3, r4, #16
 8000432:	9e02      	ldr	r6, [sp, #8]
 8000434:	469a      	mov	sl, r3
 8000436:	9b05      	ldr	r3, [sp, #20]
 8000438:	445e      	add	r6, fp
 800043a:	4698      	mov	r8, r3
 800043c:	42ae      	cmp	r6, r5
 800043e:	41ad      	sbcs	r5, r5
 8000440:	1876      	adds	r6, r6, r1
 8000442:	428e      	cmp	r6, r1
 8000444:	4189      	sbcs	r1, r1
 8000446:	0400      	lsls	r0, r0, #16
 8000448:	0c00      	lsrs	r0, r0, #16
 800044a:	4450      	add	r0, sl
 800044c:	4440      	add	r0, r8
 800044e:	426d      	negs	r5, r5
 8000450:	1947      	adds	r7, r0, r5
 8000452:	46b8      	mov	r8, r7
 8000454:	4693      	mov	fp, r2
 8000456:	4249      	negs	r1, r1
 8000458:	4689      	mov	r9, r1
 800045a:	44c3      	add	fp, r8
 800045c:	44d9      	add	r9, fp
 800045e:	4298      	cmp	r0, r3
 8000460:	4180      	sbcs	r0, r0
 8000462:	45a8      	cmp	r8, r5
 8000464:	41ad      	sbcs	r5, r5
 8000466:	4593      	cmp	fp, r2
 8000468:	4192      	sbcs	r2, r2
 800046a:	4589      	cmp	r9, r1
 800046c:	4189      	sbcs	r1, r1
 800046e:	426d      	negs	r5, r5
 8000470:	4240      	negs	r0, r0
 8000472:	4328      	orrs	r0, r5
 8000474:	0c24      	lsrs	r4, r4, #16
 8000476:	4252      	negs	r2, r2
 8000478:	4249      	negs	r1, r1
 800047a:	430a      	orrs	r2, r1
 800047c:	9b03      	ldr	r3, [sp, #12]
 800047e:	1900      	adds	r0, r0, r4
 8000480:	1880      	adds	r0, r0, r2
 8000482:	18c7      	adds	r7, r0, r3
 8000484:	464b      	mov	r3, r9
 8000486:	0ddc      	lsrs	r4, r3, #23
 8000488:	9b04      	ldr	r3, [sp, #16]
 800048a:	0275      	lsls	r5, r6, #9
 800048c:	431d      	orrs	r5, r3
 800048e:	1e6a      	subs	r2, r5, #1
 8000490:	4195      	sbcs	r5, r2
 8000492:	464b      	mov	r3, r9
 8000494:	0df6      	lsrs	r6, r6, #23
 8000496:	027f      	lsls	r7, r7, #9
 8000498:	4335      	orrs	r5, r6
 800049a:	025a      	lsls	r2, r3, #9
 800049c:	433c      	orrs	r4, r7
 800049e:	4315      	orrs	r5, r2
 80004a0:	01fb      	lsls	r3, r7, #7
 80004a2:	d400      	bmi.n	80004a6 <__aeabi_dmul+0x24a>
 80004a4:	e11c      	b.n	80006e0 <__aeabi_dmul+0x484>
 80004a6:	2101      	movs	r1, #1
 80004a8:	086a      	lsrs	r2, r5, #1
 80004aa:	400d      	ands	r5, r1
 80004ac:	4315      	orrs	r5, r2
 80004ae:	07e2      	lsls	r2, r4, #31
 80004b0:	4315      	orrs	r5, r2
 80004b2:	0864      	lsrs	r4, r4, #1
 80004b4:	494f      	ldr	r1, [pc, #316]	; (80005f4 <__aeabi_dmul+0x398>)
 80004b6:	4461      	add	r1, ip
 80004b8:	2900      	cmp	r1, #0
 80004ba:	dc00      	bgt.n	80004be <__aeabi_dmul+0x262>
 80004bc:	e0b0      	b.n	8000620 <__aeabi_dmul+0x3c4>
 80004be:	076b      	lsls	r3, r5, #29
 80004c0:	d009      	beq.n	80004d6 <__aeabi_dmul+0x27a>
 80004c2:	220f      	movs	r2, #15
 80004c4:	402a      	ands	r2, r5
 80004c6:	2a04      	cmp	r2, #4
 80004c8:	d005      	beq.n	80004d6 <__aeabi_dmul+0x27a>
 80004ca:	1d2a      	adds	r2, r5, #4
 80004cc:	42aa      	cmp	r2, r5
 80004ce:	41ad      	sbcs	r5, r5
 80004d0:	426d      	negs	r5, r5
 80004d2:	1964      	adds	r4, r4, r5
 80004d4:	0015      	movs	r5, r2
 80004d6:	01e3      	lsls	r3, r4, #7
 80004d8:	d504      	bpl.n	80004e4 <__aeabi_dmul+0x288>
 80004da:	2180      	movs	r1, #128	; 0x80
 80004dc:	4a46      	ldr	r2, [pc, #280]	; (80005f8 <__aeabi_dmul+0x39c>)
 80004de:	00c9      	lsls	r1, r1, #3
 80004e0:	4014      	ands	r4, r2
 80004e2:	4461      	add	r1, ip
 80004e4:	4a45      	ldr	r2, [pc, #276]	; (80005fc <__aeabi_dmul+0x3a0>)
 80004e6:	4291      	cmp	r1, r2
 80004e8:	dd00      	ble.n	80004ec <__aeabi_dmul+0x290>
 80004ea:	e726      	b.n	800033a <__aeabi_dmul+0xde>
 80004ec:	0762      	lsls	r2, r4, #29
 80004ee:	08ed      	lsrs	r5, r5, #3
 80004f0:	0264      	lsls	r4, r4, #9
 80004f2:	0549      	lsls	r1, r1, #21
 80004f4:	4315      	orrs	r5, r2
 80004f6:	0b24      	lsrs	r4, r4, #12
 80004f8:	0d4a      	lsrs	r2, r1, #21
 80004fa:	e710      	b.n	800031e <__aeabi_dmul+0xc2>
 80004fc:	4652      	mov	r2, sl
 80004fe:	4332      	orrs	r2, r6
 8000500:	d100      	bne.n	8000504 <__aeabi_dmul+0x2a8>
 8000502:	e07f      	b.n	8000604 <__aeabi_dmul+0x3a8>
 8000504:	2e00      	cmp	r6, #0
 8000506:	d100      	bne.n	800050a <__aeabi_dmul+0x2ae>
 8000508:	e0dc      	b.n	80006c4 <__aeabi_dmul+0x468>
 800050a:	0030      	movs	r0, r6
 800050c:	f000 fd3e 	bl	8000f8c <__clzsi2>
 8000510:	0002      	movs	r2, r0
 8000512:	3a0b      	subs	r2, #11
 8000514:	231d      	movs	r3, #29
 8000516:	0001      	movs	r1, r0
 8000518:	1a9b      	subs	r3, r3, r2
 800051a:	4652      	mov	r2, sl
 800051c:	3908      	subs	r1, #8
 800051e:	40da      	lsrs	r2, r3
 8000520:	408e      	lsls	r6, r1
 8000522:	4316      	orrs	r6, r2
 8000524:	4652      	mov	r2, sl
 8000526:	408a      	lsls	r2, r1
 8000528:	9b00      	ldr	r3, [sp, #0]
 800052a:	4935      	ldr	r1, [pc, #212]	; (8000600 <__aeabi_dmul+0x3a4>)
 800052c:	1a18      	subs	r0, r3, r0
 800052e:	0003      	movs	r3, r0
 8000530:	468c      	mov	ip, r1
 8000532:	4463      	add	r3, ip
 8000534:	2000      	movs	r0, #0
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	e6d3      	b.n	80002e2 <__aeabi_dmul+0x86>
 800053a:	0025      	movs	r5, r4
 800053c:	4305      	orrs	r5, r0
 800053e:	d04a      	beq.n	80005d6 <__aeabi_dmul+0x37a>
 8000540:	2c00      	cmp	r4, #0
 8000542:	d100      	bne.n	8000546 <__aeabi_dmul+0x2ea>
 8000544:	e0b0      	b.n	80006a8 <__aeabi_dmul+0x44c>
 8000546:	0020      	movs	r0, r4
 8000548:	f000 fd20 	bl	8000f8c <__clzsi2>
 800054c:	0001      	movs	r1, r0
 800054e:	0002      	movs	r2, r0
 8000550:	390b      	subs	r1, #11
 8000552:	231d      	movs	r3, #29
 8000554:	0010      	movs	r0, r2
 8000556:	1a5b      	subs	r3, r3, r1
 8000558:	0031      	movs	r1, r6
 800055a:	0035      	movs	r5, r6
 800055c:	3808      	subs	r0, #8
 800055e:	4084      	lsls	r4, r0
 8000560:	40d9      	lsrs	r1, r3
 8000562:	4085      	lsls	r5, r0
 8000564:	430c      	orrs	r4, r1
 8000566:	4826      	ldr	r0, [pc, #152]	; (8000600 <__aeabi_dmul+0x3a4>)
 8000568:	1a83      	subs	r3, r0, r2
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	2300      	movs	r3, #0
 800056e:	4699      	mov	r9, r3
 8000570:	469b      	mov	fp, r3
 8000572:	e697      	b.n	80002a4 <__aeabi_dmul+0x48>
 8000574:	0005      	movs	r5, r0
 8000576:	4325      	orrs	r5, r4
 8000578:	d126      	bne.n	80005c8 <__aeabi_dmul+0x36c>
 800057a:	2208      	movs	r2, #8
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2302      	movs	r3, #2
 8000580:	2400      	movs	r4, #0
 8000582:	4691      	mov	r9, r2
 8000584:	469b      	mov	fp, r3
 8000586:	e68d      	b.n	80002a4 <__aeabi_dmul+0x48>
 8000588:	4652      	mov	r2, sl
 800058a:	9b00      	ldr	r3, [sp, #0]
 800058c:	4332      	orrs	r2, r6
 800058e:	d110      	bne.n	80005b2 <__aeabi_dmul+0x356>
 8000590:	4915      	ldr	r1, [pc, #84]	; (80005e8 <__aeabi_dmul+0x38c>)
 8000592:	2600      	movs	r6, #0
 8000594:	468c      	mov	ip, r1
 8000596:	4463      	add	r3, ip
 8000598:	4649      	mov	r1, r9
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2302      	movs	r3, #2
 800059e:	4319      	orrs	r1, r3
 80005a0:	4689      	mov	r9, r1
 80005a2:	2002      	movs	r0, #2
 80005a4:	e69d      	b.n	80002e2 <__aeabi_dmul+0x86>
 80005a6:	465b      	mov	r3, fp
 80005a8:	9701      	str	r7, [sp, #4]
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	d000      	beq.n	80005b0 <__aeabi_dmul+0x354>
 80005ae:	e6ad      	b.n	800030c <__aeabi_dmul+0xb0>
 80005b0:	e6c3      	b.n	800033a <__aeabi_dmul+0xde>
 80005b2:	4a0d      	ldr	r2, [pc, #52]	; (80005e8 <__aeabi_dmul+0x38c>)
 80005b4:	2003      	movs	r0, #3
 80005b6:	4694      	mov	ip, r2
 80005b8:	4463      	add	r3, ip
 80005ba:	464a      	mov	r2, r9
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2303      	movs	r3, #3
 80005c0:	431a      	orrs	r2, r3
 80005c2:	4691      	mov	r9, r2
 80005c4:	4652      	mov	r2, sl
 80005c6:	e68c      	b.n	80002e2 <__aeabi_dmul+0x86>
 80005c8:	220c      	movs	r2, #12
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	2303      	movs	r3, #3
 80005ce:	0005      	movs	r5, r0
 80005d0:	4691      	mov	r9, r2
 80005d2:	469b      	mov	fp, r3
 80005d4:	e666      	b.n	80002a4 <__aeabi_dmul+0x48>
 80005d6:	2304      	movs	r3, #4
 80005d8:	4699      	mov	r9, r3
 80005da:	2300      	movs	r3, #0
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	3301      	adds	r3, #1
 80005e0:	2400      	movs	r4, #0
 80005e2:	469b      	mov	fp, r3
 80005e4:	e65e      	b.n	80002a4 <__aeabi_dmul+0x48>
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	000007ff 	.word	0x000007ff
 80005ec:	fffffc01 	.word	0xfffffc01
 80005f0:	08003d04 	.word	0x08003d04
 80005f4:	000003ff 	.word	0x000003ff
 80005f8:	feffffff 	.word	0xfeffffff
 80005fc:	000007fe 	.word	0x000007fe
 8000600:	fffffc0d 	.word	0xfffffc0d
 8000604:	4649      	mov	r1, r9
 8000606:	2301      	movs	r3, #1
 8000608:	4319      	orrs	r1, r3
 800060a:	4689      	mov	r9, r1
 800060c:	2600      	movs	r6, #0
 800060e:	2001      	movs	r0, #1
 8000610:	e667      	b.n	80002e2 <__aeabi_dmul+0x86>
 8000612:	2300      	movs	r3, #0
 8000614:	2480      	movs	r4, #128	; 0x80
 8000616:	2500      	movs	r5, #0
 8000618:	4a43      	ldr	r2, [pc, #268]	; (8000728 <__aeabi_dmul+0x4cc>)
 800061a:	9301      	str	r3, [sp, #4]
 800061c:	0324      	lsls	r4, r4, #12
 800061e:	e67e      	b.n	800031e <__aeabi_dmul+0xc2>
 8000620:	2001      	movs	r0, #1
 8000622:	1a40      	subs	r0, r0, r1
 8000624:	2838      	cmp	r0, #56	; 0x38
 8000626:	dd00      	ble.n	800062a <__aeabi_dmul+0x3ce>
 8000628:	e676      	b.n	8000318 <__aeabi_dmul+0xbc>
 800062a:	281f      	cmp	r0, #31
 800062c:	dd5b      	ble.n	80006e6 <__aeabi_dmul+0x48a>
 800062e:	221f      	movs	r2, #31
 8000630:	0023      	movs	r3, r4
 8000632:	4252      	negs	r2, r2
 8000634:	1a51      	subs	r1, r2, r1
 8000636:	40cb      	lsrs	r3, r1
 8000638:	0019      	movs	r1, r3
 800063a:	2820      	cmp	r0, #32
 800063c:	d003      	beq.n	8000646 <__aeabi_dmul+0x3ea>
 800063e:	4a3b      	ldr	r2, [pc, #236]	; (800072c <__aeabi_dmul+0x4d0>)
 8000640:	4462      	add	r2, ip
 8000642:	4094      	lsls	r4, r2
 8000644:	4325      	orrs	r5, r4
 8000646:	1e6a      	subs	r2, r5, #1
 8000648:	4195      	sbcs	r5, r2
 800064a:	002a      	movs	r2, r5
 800064c:	430a      	orrs	r2, r1
 800064e:	2107      	movs	r1, #7
 8000650:	000d      	movs	r5, r1
 8000652:	2400      	movs	r4, #0
 8000654:	4015      	ands	r5, r2
 8000656:	4211      	tst	r1, r2
 8000658:	d05b      	beq.n	8000712 <__aeabi_dmul+0x4b6>
 800065a:	210f      	movs	r1, #15
 800065c:	2400      	movs	r4, #0
 800065e:	4011      	ands	r1, r2
 8000660:	2904      	cmp	r1, #4
 8000662:	d053      	beq.n	800070c <__aeabi_dmul+0x4b0>
 8000664:	1d11      	adds	r1, r2, #4
 8000666:	4291      	cmp	r1, r2
 8000668:	4192      	sbcs	r2, r2
 800066a:	4252      	negs	r2, r2
 800066c:	18a4      	adds	r4, r4, r2
 800066e:	000a      	movs	r2, r1
 8000670:	0223      	lsls	r3, r4, #8
 8000672:	d54b      	bpl.n	800070c <__aeabi_dmul+0x4b0>
 8000674:	2201      	movs	r2, #1
 8000676:	2400      	movs	r4, #0
 8000678:	2500      	movs	r5, #0
 800067a:	e650      	b.n	800031e <__aeabi_dmul+0xc2>
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	031b      	lsls	r3, r3, #12
 8000680:	421c      	tst	r4, r3
 8000682:	d009      	beq.n	8000698 <__aeabi_dmul+0x43c>
 8000684:	421e      	tst	r6, r3
 8000686:	d107      	bne.n	8000698 <__aeabi_dmul+0x43c>
 8000688:	4333      	orrs	r3, r6
 800068a:	031c      	lsls	r4, r3, #12
 800068c:	4643      	mov	r3, r8
 800068e:	0015      	movs	r5, r2
 8000690:	0b24      	lsrs	r4, r4, #12
 8000692:	4a25      	ldr	r2, [pc, #148]	; (8000728 <__aeabi_dmul+0x4cc>)
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	e642      	b.n	800031e <__aeabi_dmul+0xc2>
 8000698:	2280      	movs	r2, #128	; 0x80
 800069a:	0312      	lsls	r2, r2, #12
 800069c:	4314      	orrs	r4, r2
 800069e:	0324      	lsls	r4, r4, #12
 80006a0:	4a21      	ldr	r2, [pc, #132]	; (8000728 <__aeabi_dmul+0x4cc>)
 80006a2:	0b24      	lsrs	r4, r4, #12
 80006a4:	9701      	str	r7, [sp, #4]
 80006a6:	e63a      	b.n	800031e <__aeabi_dmul+0xc2>
 80006a8:	f000 fc70 	bl	8000f8c <__clzsi2>
 80006ac:	0001      	movs	r1, r0
 80006ae:	0002      	movs	r2, r0
 80006b0:	3115      	adds	r1, #21
 80006b2:	3220      	adds	r2, #32
 80006b4:	291c      	cmp	r1, #28
 80006b6:	dc00      	bgt.n	80006ba <__aeabi_dmul+0x45e>
 80006b8:	e74b      	b.n	8000552 <__aeabi_dmul+0x2f6>
 80006ba:	0034      	movs	r4, r6
 80006bc:	3808      	subs	r0, #8
 80006be:	2500      	movs	r5, #0
 80006c0:	4084      	lsls	r4, r0
 80006c2:	e750      	b.n	8000566 <__aeabi_dmul+0x30a>
 80006c4:	f000 fc62 	bl	8000f8c <__clzsi2>
 80006c8:	0003      	movs	r3, r0
 80006ca:	001a      	movs	r2, r3
 80006cc:	3215      	adds	r2, #21
 80006ce:	3020      	adds	r0, #32
 80006d0:	2a1c      	cmp	r2, #28
 80006d2:	dc00      	bgt.n	80006d6 <__aeabi_dmul+0x47a>
 80006d4:	e71e      	b.n	8000514 <__aeabi_dmul+0x2b8>
 80006d6:	4656      	mov	r6, sl
 80006d8:	3b08      	subs	r3, #8
 80006da:	2200      	movs	r2, #0
 80006dc:	409e      	lsls	r6, r3
 80006de:	e723      	b.n	8000528 <__aeabi_dmul+0x2cc>
 80006e0:	9b00      	ldr	r3, [sp, #0]
 80006e2:	469c      	mov	ip, r3
 80006e4:	e6e6      	b.n	80004b4 <__aeabi_dmul+0x258>
 80006e6:	4912      	ldr	r1, [pc, #72]	; (8000730 <__aeabi_dmul+0x4d4>)
 80006e8:	0022      	movs	r2, r4
 80006ea:	4461      	add	r1, ip
 80006ec:	002e      	movs	r6, r5
 80006ee:	408d      	lsls	r5, r1
 80006f0:	408a      	lsls	r2, r1
 80006f2:	40c6      	lsrs	r6, r0
 80006f4:	1e69      	subs	r1, r5, #1
 80006f6:	418d      	sbcs	r5, r1
 80006f8:	4332      	orrs	r2, r6
 80006fa:	432a      	orrs	r2, r5
 80006fc:	40c4      	lsrs	r4, r0
 80006fe:	0753      	lsls	r3, r2, #29
 8000700:	d0b6      	beq.n	8000670 <__aeabi_dmul+0x414>
 8000702:	210f      	movs	r1, #15
 8000704:	4011      	ands	r1, r2
 8000706:	2904      	cmp	r1, #4
 8000708:	d1ac      	bne.n	8000664 <__aeabi_dmul+0x408>
 800070a:	e7b1      	b.n	8000670 <__aeabi_dmul+0x414>
 800070c:	0765      	lsls	r5, r4, #29
 800070e:	0264      	lsls	r4, r4, #9
 8000710:	0b24      	lsrs	r4, r4, #12
 8000712:	08d2      	lsrs	r2, r2, #3
 8000714:	4315      	orrs	r5, r2
 8000716:	2200      	movs	r2, #0
 8000718:	e601      	b.n	800031e <__aeabi_dmul+0xc2>
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	0312      	lsls	r2, r2, #12
 800071e:	4314      	orrs	r4, r2
 8000720:	0324      	lsls	r4, r4, #12
 8000722:	4a01      	ldr	r2, [pc, #4]	; (8000728 <__aeabi_dmul+0x4cc>)
 8000724:	0b24      	lsrs	r4, r4, #12
 8000726:	e5fa      	b.n	800031e <__aeabi_dmul+0xc2>
 8000728:	000007ff 	.word	0x000007ff
 800072c:	0000043e 	.word	0x0000043e
 8000730:	0000041e 	.word	0x0000041e

08000734 <__aeabi_dsub>:
 8000734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000736:	4657      	mov	r7, sl
 8000738:	464e      	mov	r6, r9
 800073a:	4645      	mov	r5, r8
 800073c:	46de      	mov	lr, fp
 800073e:	b5e0      	push	{r5, r6, r7, lr}
 8000740:	001e      	movs	r6, r3
 8000742:	0017      	movs	r7, r2
 8000744:	004a      	lsls	r2, r1, #1
 8000746:	030b      	lsls	r3, r1, #12
 8000748:	0d52      	lsrs	r2, r2, #21
 800074a:	0a5b      	lsrs	r3, r3, #9
 800074c:	4690      	mov	r8, r2
 800074e:	0f42      	lsrs	r2, r0, #29
 8000750:	431a      	orrs	r2, r3
 8000752:	0fcd      	lsrs	r5, r1, #31
 8000754:	4ccd      	ldr	r4, [pc, #820]	; (8000a8c <__aeabi_dsub+0x358>)
 8000756:	0331      	lsls	r1, r6, #12
 8000758:	00c3      	lsls	r3, r0, #3
 800075a:	4694      	mov	ip, r2
 800075c:	0070      	lsls	r0, r6, #1
 800075e:	0f7a      	lsrs	r2, r7, #29
 8000760:	0a49      	lsrs	r1, r1, #9
 8000762:	00ff      	lsls	r7, r7, #3
 8000764:	469a      	mov	sl, r3
 8000766:	46b9      	mov	r9, r7
 8000768:	0d40      	lsrs	r0, r0, #21
 800076a:	0ff6      	lsrs	r6, r6, #31
 800076c:	4311      	orrs	r1, r2
 800076e:	42a0      	cmp	r0, r4
 8000770:	d100      	bne.n	8000774 <__aeabi_dsub+0x40>
 8000772:	e0b1      	b.n	80008d8 <__aeabi_dsub+0x1a4>
 8000774:	2201      	movs	r2, #1
 8000776:	4056      	eors	r6, r2
 8000778:	46b3      	mov	fp, r6
 800077a:	42b5      	cmp	r5, r6
 800077c:	d100      	bne.n	8000780 <__aeabi_dsub+0x4c>
 800077e:	e088      	b.n	8000892 <__aeabi_dsub+0x15e>
 8000780:	4642      	mov	r2, r8
 8000782:	1a12      	subs	r2, r2, r0
 8000784:	2a00      	cmp	r2, #0
 8000786:	dc00      	bgt.n	800078a <__aeabi_dsub+0x56>
 8000788:	e0ae      	b.n	80008e8 <__aeabi_dsub+0x1b4>
 800078a:	2800      	cmp	r0, #0
 800078c:	d100      	bne.n	8000790 <__aeabi_dsub+0x5c>
 800078e:	e0c1      	b.n	8000914 <__aeabi_dsub+0x1e0>
 8000790:	48be      	ldr	r0, [pc, #760]	; (8000a8c <__aeabi_dsub+0x358>)
 8000792:	4580      	cmp	r8, r0
 8000794:	d100      	bne.n	8000798 <__aeabi_dsub+0x64>
 8000796:	e151      	b.n	8000a3c <__aeabi_dsub+0x308>
 8000798:	2080      	movs	r0, #128	; 0x80
 800079a:	0400      	lsls	r0, r0, #16
 800079c:	4301      	orrs	r1, r0
 800079e:	2a38      	cmp	r2, #56	; 0x38
 80007a0:	dd00      	ble.n	80007a4 <__aeabi_dsub+0x70>
 80007a2:	e17b      	b.n	8000a9c <__aeabi_dsub+0x368>
 80007a4:	2a1f      	cmp	r2, #31
 80007a6:	dd00      	ble.n	80007aa <__aeabi_dsub+0x76>
 80007a8:	e1ee      	b.n	8000b88 <__aeabi_dsub+0x454>
 80007aa:	2020      	movs	r0, #32
 80007ac:	003e      	movs	r6, r7
 80007ae:	1a80      	subs	r0, r0, r2
 80007b0:	000c      	movs	r4, r1
 80007b2:	40d6      	lsrs	r6, r2
 80007b4:	40d1      	lsrs	r1, r2
 80007b6:	4087      	lsls	r7, r0
 80007b8:	4662      	mov	r2, ip
 80007ba:	4084      	lsls	r4, r0
 80007bc:	1a52      	subs	r2, r2, r1
 80007be:	1e78      	subs	r0, r7, #1
 80007c0:	4187      	sbcs	r7, r0
 80007c2:	4694      	mov	ip, r2
 80007c4:	4334      	orrs	r4, r6
 80007c6:	4327      	orrs	r7, r4
 80007c8:	1bdc      	subs	r4, r3, r7
 80007ca:	42a3      	cmp	r3, r4
 80007cc:	419b      	sbcs	r3, r3
 80007ce:	4662      	mov	r2, ip
 80007d0:	425b      	negs	r3, r3
 80007d2:	1ad3      	subs	r3, r2, r3
 80007d4:	4699      	mov	r9, r3
 80007d6:	464b      	mov	r3, r9
 80007d8:	021b      	lsls	r3, r3, #8
 80007da:	d400      	bmi.n	80007de <__aeabi_dsub+0xaa>
 80007dc:	e118      	b.n	8000a10 <__aeabi_dsub+0x2dc>
 80007de:	464b      	mov	r3, r9
 80007e0:	0258      	lsls	r0, r3, #9
 80007e2:	0a43      	lsrs	r3, r0, #9
 80007e4:	4699      	mov	r9, r3
 80007e6:	464b      	mov	r3, r9
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d100      	bne.n	80007ee <__aeabi_dsub+0xba>
 80007ec:	e137      	b.n	8000a5e <__aeabi_dsub+0x32a>
 80007ee:	4648      	mov	r0, r9
 80007f0:	f000 fbcc 	bl	8000f8c <__clzsi2>
 80007f4:	0001      	movs	r1, r0
 80007f6:	3908      	subs	r1, #8
 80007f8:	2320      	movs	r3, #32
 80007fa:	0022      	movs	r2, r4
 80007fc:	4648      	mov	r0, r9
 80007fe:	1a5b      	subs	r3, r3, r1
 8000800:	40da      	lsrs	r2, r3
 8000802:	4088      	lsls	r0, r1
 8000804:	408c      	lsls	r4, r1
 8000806:	4643      	mov	r3, r8
 8000808:	4310      	orrs	r0, r2
 800080a:	4588      	cmp	r8, r1
 800080c:	dd00      	ble.n	8000810 <__aeabi_dsub+0xdc>
 800080e:	e136      	b.n	8000a7e <__aeabi_dsub+0x34a>
 8000810:	1ac9      	subs	r1, r1, r3
 8000812:	1c4b      	adds	r3, r1, #1
 8000814:	2b1f      	cmp	r3, #31
 8000816:	dd00      	ble.n	800081a <__aeabi_dsub+0xe6>
 8000818:	e0ea      	b.n	80009f0 <__aeabi_dsub+0x2bc>
 800081a:	2220      	movs	r2, #32
 800081c:	0026      	movs	r6, r4
 800081e:	1ad2      	subs	r2, r2, r3
 8000820:	0001      	movs	r1, r0
 8000822:	4094      	lsls	r4, r2
 8000824:	40de      	lsrs	r6, r3
 8000826:	40d8      	lsrs	r0, r3
 8000828:	2300      	movs	r3, #0
 800082a:	4091      	lsls	r1, r2
 800082c:	1e62      	subs	r2, r4, #1
 800082e:	4194      	sbcs	r4, r2
 8000830:	4681      	mov	r9, r0
 8000832:	4698      	mov	r8, r3
 8000834:	4331      	orrs	r1, r6
 8000836:	430c      	orrs	r4, r1
 8000838:	0763      	lsls	r3, r4, #29
 800083a:	d009      	beq.n	8000850 <__aeabi_dsub+0x11c>
 800083c:	230f      	movs	r3, #15
 800083e:	4023      	ands	r3, r4
 8000840:	2b04      	cmp	r3, #4
 8000842:	d005      	beq.n	8000850 <__aeabi_dsub+0x11c>
 8000844:	1d23      	adds	r3, r4, #4
 8000846:	42a3      	cmp	r3, r4
 8000848:	41a4      	sbcs	r4, r4
 800084a:	4264      	negs	r4, r4
 800084c:	44a1      	add	r9, r4
 800084e:	001c      	movs	r4, r3
 8000850:	464b      	mov	r3, r9
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dsub+0x124>
 8000856:	e0de      	b.n	8000a16 <__aeabi_dsub+0x2e2>
 8000858:	4641      	mov	r1, r8
 800085a:	4b8c      	ldr	r3, [pc, #560]	; (8000a8c <__aeabi_dsub+0x358>)
 800085c:	3101      	adds	r1, #1
 800085e:	4299      	cmp	r1, r3
 8000860:	d100      	bne.n	8000864 <__aeabi_dsub+0x130>
 8000862:	e0e7      	b.n	8000a34 <__aeabi_dsub+0x300>
 8000864:	464b      	mov	r3, r9
 8000866:	488a      	ldr	r0, [pc, #552]	; (8000a90 <__aeabi_dsub+0x35c>)
 8000868:	08e4      	lsrs	r4, r4, #3
 800086a:	4003      	ands	r3, r0
 800086c:	0018      	movs	r0, r3
 800086e:	0549      	lsls	r1, r1, #21
 8000870:	075b      	lsls	r3, r3, #29
 8000872:	0240      	lsls	r0, r0, #9
 8000874:	4323      	orrs	r3, r4
 8000876:	0d4a      	lsrs	r2, r1, #21
 8000878:	0b04      	lsrs	r4, r0, #12
 800087a:	0512      	lsls	r2, r2, #20
 800087c:	07ed      	lsls	r5, r5, #31
 800087e:	4322      	orrs	r2, r4
 8000880:	432a      	orrs	r2, r5
 8000882:	0018      	movs	r0, r3
 8000884:	0011      	movs	r1, r2
 8000886:	bcf0      	pop	{r4, r5, r6, r7}
 8000888:	46bb      	mov	fp, r7
 800088a:	46b2      	mov	sl, r6
 800088c:	46a9      	mov	r9, r5
 800088e:	46a0      	mov	r8, r4
 8000890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000892:	4642      	mov	r2, r8
 8000894:	1a12      	subs	r2, r2, r0
 8000896:	2a00      	cmp	r2, #0
 8000898:	dd52      	ble.n	8000940 <__aeabi_dsub+0x20c>
 800089a:	2800      	cmp	r0, #0
 800089c:	d100      	bne.n	80008a0 <__aeabi_dsub+0x16c>
 800089e:	e09c      	b.n	80009da <__aeabi_dsub+0x2a6>
 80008a0:	45a0      	cmp	r8, r4
 80008a2:	d100      	bne.n	80008a6 <__aeabi_dsub+0x172>
 80008a4:	e0ca      	b.n	8000a3c <__aeabi_dsub+0x308>
 80008a6:	2080      	movs	r0, #128	; 0x80
 80008a8:	0400      	lsls	r0, r0, #16
 80008aa:	4301      	orrs	r1, r0
 80008ac:	2a38      	cmp	r2, #56	; 0x38
 80008ae:	dd00      	ble.n	80008b2 <__aeabi_dsub+0x17e>
 80008b0:	e149      	b.n	8000b46 <__aeabi_dsub+0x412>
 80008b2:	2a1f      	cmp	r2, #31
 80008b4:	dc00      	bgt.n	80008b8 <__aeabi_dsub+0x184>
 80008b6:	e197      	b.n	8000be8 <__aeabi_dsub+0x4b4>
 80008b8:	0010      	movs	r0, r2
 80008ba:	000e      	movs	r6, r1
 80008bc:	3820      	subs	r0, #32
 80008be:	40c6      	lsrs	r6, r0
 80008c0:	2a20      	cmp	r2, #32
 80008c2:	d004      	beq.n	80008ce <__aeabi_dsub+0x19a>
 80008c4:	2040      	movs	r0, #64	; 0x40
 80008c6:	1a82      	subs	r2, r0, r2
 80008c8:	4091      	lsls	r1, r2
 80008ca:	430f      	orrs	r7, r1
 80008cc:	46b9      	mov	r9, r7
 80008ce:	464c      	mov	r4, r9
 80008d0:	1e62      	subs	r2, r4, #1
 80008d2:	4194      	sbcs	r4, r2
 80008d4:	4334      	orrs	r4, r6
 80008d6:	e13a      	b.n	8000b4e <__aeabi_dsub+0x41a>
 80008d8:	000a      	movs	r2, r1
 80008da:	433a      	orrs	r2, r7
 80008dc:	d028      	beq.n	8000930 <__aeabi_dsub+0x1fc>
 80008de:	46b3      	mov	fp, r6
 80008e0:	42b5      	cmp	r5, r6
 80008e2:	d02b      	beq.n	800093c <__aeabi_dsub+0x208>
 80008e4:	4a6b      	ldr	r2, [pc, #428]	; (8000a94 <__aeabi_dsub+0x360>)
 80008e6:	4442      	add	r2, r8
 80008e8:	2a00      	cmp	r2, #0
 80008ea:	d05d      	beq.n	80009a8 <__aeabi_dsub+0x274>
 80008ec:	4642      	mov	r2, r8
 80008ee:	4644      	mov	r4, r8
 80008f0:	1a82      	subs	r2, r0, r2
 80008f2:	2c00      	cmp	r4, #0
 80008f4:	d000      	beq.n	80008f8 <__aeabi_dsub+0x1c4>
 80008f6:	e0f5      	b.n	8000ae4 <__aeabi_dsub+0x3b0>
 80008f8:	4665      	mov	r5, ip
 80008fa:	431d      	orrs	r5, r3
 80008fc:	d100      	bne.n	8000900 <__aeabi_dsub+0x1cc>
 80008fe:	e19c      	b.n	8000c3a <__aeabi_dsub+0x506>
 8000900:	1e55      	subs	r5, r2, #1
 8000902:	2a01      	cmp	r2, #1
 8000904:	d100      	bne.n	8000908 <__aeabi_dsub+0x1d4>
 8000906:	e1fb      	b.n	8000d00 <__aeabi_dsub+0x5cc>
 8000908:	4c60      	ldr	r4, [pc, #384]	; (8000a8c <__aeabi_dsub+0x358>)
 800090a:	42a2      	cmp	r2, r4
 800090c:	d100      	bne.n	8000910 <__aeabi_dsub+0x1dc>
 800090e:	e1bd      	b.n	8000c8c <__aeabi_dsub+0x558>
 8000910:	002a      	movs	r2, r5
 8000912:	e0f0      	b.n	8000af6 <__aeabi_dsub+0x3c2>
 8000914:	0008      	movs	r0, r1
 8000916:	4338      	orrs	r0, r7
 8000918:	d100      	bne.n	800091c <__aeabi_dsub+0x1e8>
 800091a:	e0c3      	b.n	8000aa4 <__aeabi_dsub+0x370>
 800091c:	1e50      	subs	r0, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_dsub+0x1f0>
 8000922:	e1a8      	b.n	8000c76 <__aeabi_dsub+0x542>
 8000924:	4c59      	ldr	r4, [pc, #356]	; (8000a8c <__aeabi_dsub+0x358>)
 8000926:	42a2      	cmp	r2, r4
 8000928:	d100      	bne.n	800092c <__aeabi_dsub+0x1f8>
 800092a:	e087      	b.n	8000a3c <__aeabi_dsub+0x308>
 800092c:	0002      	movs	r2, r0
 800092e:	e736      	b.n	800079e <__aeabi_dsub+0x6a>
 8000930:	2201      	movs	r2, #1
 8000932:	4056      	eors	r6, r2
 8000934:	46b3      	mov	fp, r6
 8000936:	42b5      	cmp	r5, r6
 8000938:	d000      	beq.n	800093c <__aeabi_dsub+0x208>
 800093a:	e721      	b.n	8000780 <__aeabi_dsub+0x4c>
 800093c:	4a55      	ldr	r2, [pc, #340]	; (8000a94 <__aeabi_dsub+0x360>)
 800093e:	4442      	add	r2, r8
 8000940:	2a00      	cmp	r2, #0
 8000942:	d100      	bne.n	8000946 <__aeabi_dsub+0x212>
 8000944:	e0b5      	b.n	8000ab2 <__aeabi_dsub+0x37e>
 8000946:	4642      	mov	r2, r8
 8000948:	4644      	mov	r4, r8
 800094a:	1a82      	subs	r2, r0, r2
 800094c:	2c00      	cmp	r4, #0
 800094e:	d100      	bne.n	8000952 <__aeabi_dsub+0x21e>
 8000950:	e138      	b.n	8000bc4 <__aeabi_dsub+0x490>
 8000952:	4e4e      	ldr	r6, [pc, #312]	; (8000a8c <__aeabi_dsub+0x358>)
 8000954:	42b0      	cmp	r0, r6
 8000956:	d100      	bne.n	800095a <__aeabi_dsub+0x226>
 8000958:	e1de      	b.n	8000d18 <__aeabi_dsub+0x5e4>
 800095a:	2680      	movs	r6, #128	; 0x80
 800095c:	4664      	mov	r4, ip
 800095e:	0436      	lsls	r6, r6, #16
 8000960:	4334      	orrs	r4, r6
 8000962:	46a4      	mov	ip, r4
 8000964:	2a38      	cmp	r2, #56	; 0x38
 8000966:	dd00      	ble.n	800096a <__aeabi_dsub+0x236>
 8000968:	e196      	b.n	8000c98 <__aeabi_dsub+0x564>
 800096a:	2a1f      	cmp	r2, #31
 800096c:	dd00      	ble.n	8000970 <__aeabi_dsub+0x23c>
 800096e:	e224      	b.n	8000dba <__aeabi_dsub+0x686>
 8000970:	2620      	movs	r6, #32
 8000972:	1ab4      	subs	r4, r6, r2
 8000974:	46a2      	mov	sl, r4
 8000976:	4664      	mov	r4, ip
 8000978:	4656      	mov	r6, sl
 800097a:	40b4      	lsls	r4, r6
 800097c:	46a1      	mov	r9, r4
 800097e:	001c      	movs	r4, r3
 8000980:	464e      	mov	r6, r9
 8000982:	40d4      	lsrs	r4, r2
 8000984:	4326      	orrs	r6, r4
 8000986:	0034      	movs	r4, r6
 8000988:	4656      	mov	r6, sl
 800098a:	40b3      	lsls	r3, r6
 800098c:	1e5e      	subs	r6, r3, #1
 800098e:	41b3      	sbcs	r3, r6
 8000990:	431c      	orrs	r4, r3
 8000992:	4663      	mov	r3, ip
 8000994:	40d3      	lsrs	r3, r2
 8000996:	18c9      	adds	r1, r1, r3
 8000998:	19e4      	adds	r4, r4, r7
 800099a:	42bc      	cmp	r4, r7
 800099c:	41bf      	sbcs	r7, r7
 800099e:	427f      	negs	r7, r7
 80009a0:	46b9      	mov	r9, r7
 80009a2:	4680      	mov	r8, r0
 80009a4:	4489      	add	r9, r1
 80009a6:	e0d8      	b.n	8000b5a <__aeabi_dsub+0x426>
 80009a8:	4640      	mov	r0, r8
 80009aa:	4c3b      	ldr	r4, [pc, #236]	; (8000a98 <__aeabi_dsub+0x364>)
 80009ac:	3001      	adds	r0, #1
 80009ae:	4220      	tst	r0, r4
 80009b0:	d000      	beq.n	80009b4 <__aeabi_dsub+0x280>
 80009b2:	e0b4      	b.n	8000b1e <__aeabi_dsub+0x3ea>
 80009b4:	4640      	mov	r0, r8
 80009b6:	2800      	cmp	r0, #0
 80009b8:	d000      	beq.n	80009bc <__aeabi_dsub+0x288>
 80009ba:	e144      	b.n	8000c46 <__aeabi_dsub+0x512>
 80009bc:	4660      	mov	r0, ip
 80009be:	4318      	orrs	r0, r3
 80009c0:	d100      	bne.n	80009c4 <__aeabi_dsub+0x290>
 80009c2:	e190      	b.n	8000ce6 <__aeabi_dsub+0x5b2>
 80009c4:	0008      	movs	r0, r1
 80009c6:	4338      	orrs	r0, r7
 80009c8:	d000      	beq.n	80009cc <__aeabi_dsub+0x298>
 80009ca:	e1aa      	b.n	8000d22 <__aeabi_dsub+0x5ee>
 80009cc:	4661      	mov	r1, ip
 80009ce:	08db      	lsrs	r3, r3, #3
 80009d0:	0749      	lsls	r1, r1, #29
 80009d2:	430b      	orrs	r3, r1
 80009d4:	4661      	mov	r1, ip
 80009d6:	08cc      	lsrs	r4, r1, #3
 80009d8:	e027      	b.n	8000a2a <__aeabi_dsub+0x2f6>
 80009da:	0008      	movs	r0, r1
 80009dc:	4338      	orrs	r0, r7
 80009de:	d061      	beq.n	8000aa4 <__aeabi_dsub+0x370>
 80009e0:	1e50      	subs	r0, r2, #1
 80009e2:	2a01      	cmp	r2, #1
 80009e4:	d100      	bne.n	80009e8 <__aeabi_dsub+0x2b4>
 80009e6:	e139      	b.n	8000c5c <__aeabi_dsub+0x528>
 80009e8:	42a2      	cmp	r2, r4
 80009ea:	d027      	beq.n	8000a3c <__aeabi_dsub+0x308>
 80009ec:	0002      	movs	r2, r0
 80009ee:	e75d      	b.n	80008ac <__aeabi_dsub+0x178>
 80009f0:	0002      	movs	r2, r0
 80009f2:	391f      	subs	r1, #31
 80009f4:	40ca      	lsrs	r2, r1
 80009f6:	0011      	movs	r1, r2
 80009f8:	2b20      	cmp	r3, #32
 80009fa:	d003      	beq.n	8000a04 <__aeabi_dsub+0x2d0>
 80009fc:	2240      	movs	r2, #64	; 0x40
 80009fe:	1ad3      	subs	r3, r2, r3
 8000a00:	4098      	lsls	r0, r3
 8000a02:	4304      	orrs	r4, r0
 8000a04:	1e63      	subs	r3, r4, #1
 8000a06:	419c      	sbcs	r4, r3
 8000a08:	2300      	movs	r3, #0
 8000a0a:	4699      	mov	r9, r3
 8000a0c:	4698      	mov	r8, r3
 8000a0e:	430c      	orrs	r4, r1
 8000a10:	0763      	lsls	r3, r4, #29
 8000a12:	d000      	beq.n	8000a16 <__aeabi_dsub+0x2e2>
 8000a14:	e712      	b.n	800083c <__aeabi_dsub+0x108>
 8000a16:	464b      	mov	r3, r9
 8000a18:	464a      	mov	r2, r9
 8000a1a:	08e4      	lsrs	r4, r4, #3
 8000a1c:	075b      	lsls	r3, r3, #29
 8000a1e:	4323      	orrs	r3, r4
 8000a20:	08d4      	lsrs	r4, r2, #3
 8000a22:	4642      	mov	r2, r8
 8000a24:	4919      	ldr	r1, [pc, #100]	; (8000a8c <__aeabi_dsub+0x358>)
 8000a26:	428a      	cmp	r2, r1
 8000a28:	d00e      	beq.n	8000a48 <__aeabi_dsub+0x314>
 8000a2a:	0324      	lsls	r4, r4, #12
 8000a2c:	0552      	lsls	r2, r2, #21
 8000a2e:	0b24      	lsrs	r4, r4, #12
 8000a30:	0d52      	lsrs	r2, r2, #21
 8000a32:	e722      	b.n	800087a <__aeabi_dsub+0x146>
 8000a34:	000a      	movs	r2, r1
 8000a36:	2400      	movs	r4, #0
 8000a38:	2300      	movs	r3, #0
 8000a3a:	e71e      	b.n	800087a <__aeabi_dsub+0x146>
 8000a3c:	08db      	lsrs	r3, r3, #3
 8000a3e:	4662      	mov	r2, ip
 8000a40:	0752      	lsls	r2, r2, #29
 8000a42:	4313      	orrs	r3, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	08d4      	lsrs	r4, r2, #3
 8000a48:	001a      	movs	r2, r3
 8000a4a:	4322      	orrs	r2, r4
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_dsub+0x31c>
 8000a4e:	e1fc      	b.n	8000e4a <__aeabi_dsub+0x716>
 8000a50:	2280      	movs	r2, #128	; 0x80
 8000a52:	0312      	lsls	r2, r2, #12
 8000a54:	4314      	orrs	r4, r2
 8000a56:	0324      	lsls	r4, r4, #12
 8000a58:	4a0c      	ldr	r2, [pc, #48]	; (8000a8c <__aeabi_dsub+0x358>)
 8000a5a:	0b24      	lsrs	r4, r4, #12
 8000a5c:	e70d      	b.n	800087a <__aeabi_dsub+0x146>
 8000a5e:	0020      	movs	r0, r4
 8000a60:	f000 fa94 	bl	8000f8c <__clzsi2>
 8000a64:	0001      	movs	r1, r0
 8000a66:	3118      	adds	r1, #24
 8000a68:	291f      	cmp	r1, #31
 8000a6a:	dc00      	bgt.n	8000a6e <__aeabi_dsub+0x33a>
 8000a6c:	e6c4      	b.n	80007f8 <__aeabi_dsub+0xc4>
 8000a6e:	3808      	subs	r0, #8
 8000a70:	4084      	lsls	r4, r0
 8000a72:	4643      	mov	r3, r8
 8000a74:	0020      	movs	r0, r4
 8000a76:	2400      	movs	r4, #0
 8000a78:	4588      	cmp	r8, r1
 8000a7a:	dc00      	bgt.n	8000a7e <__aeabi_dsub+0x34a>
 8000a7c:	e6c8      	b.n	8000810 <__aeabi_dsub+0xdc>
 8000a7e:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <__aeabi_dsub+0x35c>)
 8000a80:	1a5b      	subs	r3, r3, r1
 8000a82:	4010      	ands	r0, r2
 8000a84:	4698      	mov	r8, r3
 8000a86:	4681      	mov	r9, r0
 8000a88:	e6d6      	b.n	8000838 <__aeabi_dsub+0x104>
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	000007ff 	.word	0x000007ff
 8000a90:	ff7fffff 	.word	0xff7fffff
 8000a94:	fffff801 	.word	0xfffff801
 8000a98:	000007fe 	.word	0x000007fe
 8000a9c:	430f      	orrs	r7, r1
 8000a9e:	1e7a      	subs	r2, r7, #1
 8000aa0:	4197      	sbcs	r7, r2
 8000aa2:	e691      	b.n	80007c8 <__aeabi_dsub+0x94>
 8000aa4:	4661      	mov	r1, ip
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	0749      	lsls	r1, r1, #29
 8000aaa:	430b      	orrs	r3, r1
 8000aac:	4661      	mov	r1, ip
 8000aae:	08cc      	lsrs	r4, r1, #3
 8000ab0:	e7b8      	b.n	8000a24 <__aeabi_dsub+0x2f0>
 8000ab2:	4640      	mov	r0, r8
 8000ab4:	4cd3      	ldr	r4, [pc, #844]	; (8000e04 <__aeabi_dsub+0x6d0>)
 8000ab6:	3001      	adds	r0, #1
 8000ab8:	4220      	tst	r0, r4
 8000aba:	d000      	beq.n	8000abe <__aeabi_dsub+0x38a>
 8000abc:	e0a2      	b.n	8000c04 <__aeabi_dsub+0x4d0>
 8000abe:	4640      	mov	r0, r8
 8000ac0:	2800      	cmp	r0, #0
 8000ac2:	d000      	beq.n	8000ac6 <__aeabi_dsub+0x392>
 8000ac4:	e101      	b.n	8000cca <__aeabi_dsub+0x596>
 8000ac6:	4660      	mov	r0, ip
 8000ac8:	4318      	orrs	r0, r3
 8000aca:	d100      	bne.n	8000ace <__aeabi_dsub+0x39a>
 8000acc:	e15e      	b.n	8000d8c <__aeabi_dsub+0x658>
 8000ace:	0008      	movs	r0, r1
 8000ad0:	4338      	orrs	r0, r7
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_dsub+0x3a2>
 8000ad4:	e15f      	b.n	8000d96 <__aeabi_dsub+0x662>
 8000ad6:	4661      	mov	r1, ip
 8000ad8:	08db      	lsrs	r3, r3, #3
 8000ada:	0749      	lsls	r1, r1, #29
 8000adc:	430b      	orrs	r3, r1
 8000ade:	4661      	mov	r1, ip
 8000ae0:	08cc      	lsrs	r4, r1, #3
 8000ae2:	e7a2      	b.n	8000a2a <__aeabi_dsub+0x2f6>
 8000ae4:	4dc8      	ldr	r5, [pc, #800]	; (8000e08 <__aeabi_dsub+0x6d4>)
 8000ae6:	42a8      	cmp	r0, r5
 8000ae8:	d100      	bne.n	8000aec <__aeabi_dsub+0x3b8>
 8000aea:	e0cf      	b.n	8000c8c <__aeabi_dsub+0x558>
 8000aec:	2580      	movs	r5, #128	; 0x80
 8000aee:	4664      	mov	r4, ip
 8000af0:	042d      	lsls	r5, r5, #16
 8000af2:	432c      	orrs	r4, r5
 8000af4:	46a4      	mov	ip, r4
 8000af6:	2a38      	cmp	r2, #56	; 0x38
 8000af8:	dc56      	bgt.n	8000ba8 <__aeabi_dsub+0x474>
 8000afa:	2a1f      	cmp	r2, #31
 8000afc:	dd00      	ble.n	8000b00 <__aeabi_dsub+0x3cc>
 8000afe:	e0d1      	b.n	8000ca4 <__aeabi_dsub+0x570>
 8000b00:	2520      	movs	r5, #32
 8000b02:	001e      	movs	r6, r3
 8000b04:	1aad      	subs	r5, r5, r2
 8000b06:	4664      	mov	r4, ip
 8000b08:	40ab      	lsls	r3, r5
 8000b0a:	40ac      	lsls	r4, r5
 8000b0c:	40d6      	lsrs	r6, r2
 8000b0e:	1e5d      	subs	r5, r3, #1
 8000b10:	41ab      	sbcs	r3, r5
 8000b12:	4334      	orrs	r4, r6
 8000b14:	4323      	orrs	r3, r4
 8000b16:	4664      	mov	r4, ip
 8000b18:	40d4      	lsrs	r4, r2
 8000b1a:	1b09      	subs	r1, r1, r4
 8000b1c:	e049      	b.n	8000bb2 <__aeabi_dsub+0x47e>
 8000b1e:	4660      	mov	r0, ip
 8000b20:	1bdc      	subs	r4, r3, r7
 8000b22:	1a46      	subs	r6, r0, r1
 8000b24:	42a3      	cmp	r3, r4
 8000b26:	4180      	sbcs	r0, r0
 8000b28:	4240      	negs	r0, r0
 8000b2a:	4681      	mov	r9, r0
 8000b2c:	0030      	movs	r0, r6
 8000b2e:	464e      	mov	r6, r9
 8000b30:	1b80      	subs	r0, r0, r6
 8000b32:	4681      	mov	r9, r0
 8000b34:	0200      	lsls	r0, r0, #8
 8000b36:	d476      	bmi.n	8000c26 <__aeabi_dsub+0x4f2>
 8000b38:	464b      	mov	r3, r9
 8000b3a:	4323      	orrs	r3, r4
 8000b3c:	d000      	beq.n	8000b40 <__aeabi_dsub+0x40c>
 8000b3e:	e652      	b.n	80007e6 <__aeabi_dsub+0xb2>
 8000b40:	2400      	movs	r4, #0
 8000b42:	2500      	movs	r5, #0
 8000b44:	e771      	b.n	8000a2a <__aeabi_dsub+0x2f6>
 8000b46:	4339      	orrs	r1, r7
 8000b48:	000c      	movs	r4, r1
 8000b4a:	1e62      	subs	r2, r4, #1
 8000b4c:	4194      	sbcs	r4, r2
 8000b4e:	18e4      	adds	r4, r4, r3
 8000b50:	429c      	cmp	r4, r3
 8000b52:	419b      	sbcs	r3, r3
 8000b54:	425b      	negs	r3, r3
 8000b56:	4463      	add	r3, ip
 8000b58:	4699      	mov	r9, r3
 8000b5a:	464b      	mov	r3, r9
 8000b5c:	021b      	lsls	r3, r3, #8
 8000b5e:	d400      	bmi.n	8000b62 <__aeabi_dsub+0x42e>
 8000b60:	e756      	b.n	8000a10 <__aeabi_dsub+0x2dc>
 8000b62:	2301      	movs	r3, #1
 8000b64:	469c      	mov	ip, r3
 8000b66:	4ba8      	ldr	r3, [pc, #672]	; (8000e08 <__aeabi_dsub+0x6d4>)
 8000b68:	44e0      	add	r8, ip
 8000b6a:	4598      	cmp	r8, r3
 8000b6c:	d038      	beq.n	8000be0 <__aeabi_dsub+0x4ac>
 8000b6e:	464b      	mov	r3, r9
 8000b70:	48a6      	ldr	r0, [pc, #664]	; (8000e0c <__aeabi_dsub+0x6d8>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	4003      	ands	r3, r0
 8000b76:	0018      	movs	r0, r3
 8000b78:	0863      	lsrs	r3, r4, #1
 8000b7a:	4014      	ands	r4, r2
 8000b7c:	431c      	orrs	r4, r3
 8000b7e:	07c3      	lsls	r3, r0, #31
 8000b80:	431c      	orrs	r4, r3
 8000b82:	0843      	lsrs	r3, r0, #1
 8000b84:	4699      	mov	r9, r3
 8000b86:	e657      	b.n	8000838 <__aeabi_dsub+0x104>
 8000b88:	0010      	movs	r0, r2
 8000b8a:	000e      	movs	r6, r1
 8000b8c:	3820      	subs	r0, #32
 8000b8e:	40c6      	lsrs	r6, r0
 8000b90:	2a20      	cmp	r2, #32
 8000b92:	d004      	beq.n	8000b9e <__aeabi_dsub+0x46a>
 8000b94:	2040      	movs	r0, #64	; 0x40
 8000b96:	1a82      	subs	r2, r0, r2
 8000b98:	4091      	lsls	r1, r2
 8000b9a:	430f      	orrs	r7, r1
 8000b9c:	46b9      	mov	r9, r7
 8000b9e:	464f      	mov	r7, r9
 8000ba0:	1e7a      	subs	r2, r7, #1
 8000ba2:	4197      	sbcs	r7, r2
 8000ba4:	4337      	orrs	r7, r6
 8000ba6:	e60f      	b.n	80007c8 <__aeabi_dsub+0x94>
 8000ba8:	4662      	mov	r2, ip
 8000baa:	431a      	orrs	r2, r3
 8000bac:	0013      	movs	r3, r2
 8000bae:	1e5a      	subs	r2, r3, #1
 8000bb0:	4193      	sbcs	r3, r2
 8000bb2:	1afc      	subs	r4, r7, r3
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	41bf      	sbcs	r7, r7
 8000bb8:	427f      	negs	r7, r7
 8000bba:	1bcb      	subs	r3, r1, r7
 8000bbc:	4699      	mov	r9, r3
 8000bbe:	465d      	mov	r5, fp
 8000bc0:	4680      	mov	r8, r0
 8000bc2:	e608      	b.n	80007d6 <__aeabi_dsub+0xa2>
 8000bc4:	4666      	mov	r6, ip
 8000bc6:	431e      	orrs	r6, r3
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_dsub+0x498>
 8000bca:	e0be      	b.n	8000d4a <__aeabi_dsub+0x616>
 8000bcc:	1e56      	subs	r6, r2, #1
 8000bce:	2a01      	cmp	r2, #1
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_dsub+0x4a0>
 8000bd2:	e109      	b.n	8000de8 <__aeabi_dsub+0x6b4>
 8000bd4:	4c8c      	ldr	r4, [pc, #560]	; (8000e08 <__aeabi_dsub+0x6d4>)
 8000bd6:	42a2      	cmp	r2, r4
 8000bd8:	d100      	bne.n	8000bdc <__aeabi_dsub+0x4a8>
 8000bda:	e119      	b.n	8000e10 <__aeabi_dsub+0x6dc>
 8000bdc:	0032      	movs	r2, r6
 8000bde:	e6c1      	b.n	8000964 <__aeabi_dsub+0x230>
 8000be0:	4642      	mov	r2, r8
 8000be2:	2400      	movs	r4, #0
 8000be4:	2300      	movs	r3, #0
 8000be6:	e648      	b.n	800087a <__aeabi_dsub+0x146>
 8000be8:	2020      	movs	r0, #32
 8000bea:	000c      	movs	r4, r1
 8000bec:	1a80      	subs	r0, r0, r2
 8000bee:	003e      	movs	r6, r7
 8000bf0:	4087      	lsls	r7, r0
 8000bf2:	4084      	lsls	r4, r0
 8000bf4:	40d6      	lsrs	r6, r2
 8000bf6:	1e78      	subs	r0, r7, #1
 8000bf8:	4187      	sbcs	r7, r0
 8000bfa:	40d1      	lsrs	r1, r2
 8000bfc:	4334      	orrs	r4, r6
 8000bfe:	433c      	orrs	r4, r7
 8000c00:	448c      	add	ip, r1
 8000c02:	e7a4      	b.n	8000b4e <__aeabi_dsub+0x41a>
 8000c04:	4a80      	ldr	r2, [pc, #512]	; (8000e08 <__aeabi_dsub+0x6d4>)
 8000c06:	4290      	cmp	r0, r2
 8000c08:	d100      	bne.n	8000c0c <__aeabi_dsub+0x4d8>
 8000c0a:	e0e9      	b.n	8000de0 <__aeabi_dsub+0x6ac>
 8000c0c:	19df      	adds	r7, r3, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	419b      	sbcs	r3, r3
 8000c12:	4461      	add	r1, ip
 8000c14:	425b      	negs	r3, r3
 8000c16:	18c9      	adds	r1, r1, r3
 8000c18:	07cc      	lsls	r4, r1, #31
 8000c1a:	087f      	lsrs	r7, r7, #1
 8000c1c:	084b      	lsrs	r3, r1, #1
 8000c1e:	4699      	mov	r9, r3
 8000c20:	4680      	mov	r8, r0
 8000c22:	433c      	orrs	r4, r7
 8000c24:	e6f4      	b.n	8000a10 <__aeabi_dsub+0x2dc>
 8000c26:	1afc      	subs	r4, r7, r3
 8000c28:	42a7      	cmp	r7, r4
 8000c2a:	41bf      	sbcs	r7, r7
 8000c2c:	4663      	mov	r3, ip
 8000c2e:	427f      	negs	r7, r7
 8000c30:	1ac9      	subs	r1, r1, r3
 8000c32:	1bcb      	subs	r3, r1, r7
 8000c34:	4699      	mov	r9, r3
 8000c36:	465d      	mov	r5, fp
 8000c38:	e5d5      	b.n	80007e6 <__aeabi_dsub+0xb2>
 8000c3a:	08ff      	lsrs	r7, r7, #3
 8000c3c:	074b      	lsls	r3, r1, #29
 8000c3e:	465d      	mov	r5, fp
 8000c40:	433b      	orrs	r3, r7
 8000c42:	08cc      	lsrs	r4, r1, #3
 8000c44:	e6ee      	b.n	8000a24 <__aeabi_dsub+0x2f0>
 8000c46:	4662      	mov	r2, ip
 8000c48:	431a      	orrs	r2, r3
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_dsub+0x51a>
 8000c4c:	e082      	b.n	8000d54 <__aeabi_dsub+0x620>
 8000c4e:	000b      	movs	r3, r1
 8000c50:	433b      	orrs	r3, r7
 8000c52:	d11b      	bne.n	8000c8c <__aeabi_dsub+0x558>
 8000c54:	2480      	movs	r4, #128	; 0x80
 8000c56:	2500      	movs	r5, #0
 8000c58:	0324      	lsls	r4, r4, #12
 8000c5a:	e6f9      	b.n	8000a50 <__aeabi_dsub+0x31c>
 8000c5c:	19dc      	adds	r4, r3, r7
 8000c5e:	429c      	cmp	r4, r3
 8000c60:	419b      	sbcs	r3, r3
 8000c62:	4461      	add	r1, ip
 8000c64:	4689      	mov	r9, r1
 8000c66:	425b      	negs	r3, r3
 8000c68:	4499      	add	r9, r3
 8000c6a:	464b      	mov	r3, r9
 8000c6c:	021b      	lsls	r3, r3, #8
 8000c6e:	d444      	bmi.n	8000cfa <__aeabi_dsub+0x5c6>
 8000c70:	2301      	movs	r3, #1
 8000c72:	4698      	mov	r8, r3
 8000c74:	e6cc      	b.n	8000a10 <__aeabi_dsub+0x2dc>
 8000c76:	1bdc      	subs	r4, r3, r7
 8000c78:	4662      	mov	r2, ip
 8000c7a:	42a3      	cmp	r3, r4
 8000c7c:	419b      	sbcs	r3, r3
 8000c7e:	1a51      	subs	r1, r2, r1
 8000c80:	425b      	negs	r3, r3
 8000c82:	1acb      	subs	r3, r1, r3
 8000c84:	4699      	mov	r9, r3
 8000c86:	2301      	movs	r3, #1
 8000c88:	4698      	mov	r8, r3
 8000c8a:	e5a4      	b.n	80007d6 <__aeabi_dsub+0xa2>
 8000c8c:	08ff      	lsrs	r7, r7, #3
 8000c8e:	074b      	lsls	r3, r1, #29
 8000c90:	465d      	mov	r5, fp
 8000c92:	433b      	orrs	r3, r7
 8000c94:	08cc      	lsrs	r4, r1, #3
 8000c96:	e6d7      	b.n	8000a48 <__aeabi_dsub+0x314>
 8000c98:	4662      	mov	r2, ip
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	0014      	movs	r4, r2
 8000c9e:	1e63      	subs	r3, r4, #1
 8000ca0:	419c      	sbcs	r4, r3
 8000ca2:	e679      	b.n	8000998 <__aeabi_dsub+0x264>
 8000ca4:	0015      	movs	r5, r2
 8000ca6:	4664      	mov	r4, ip
 8000ca8:	3d20      	subs	r5, #32
 8000caa:	40ec      	lsrs	r4, r5
 8000cac:	46a0      	mov	r8, r4
 8000cae:	2a20      	cmp	r2, #32
 8000cb0:	d005      	beq.n	8000cbe <__aeabi_dsub+0x58a>
 8000cb2:	2540      	movs	r5, #64	; 0x40
 8000cb4:	4664      	mov	r4, ip
 8000cb6:	1aaa      	subs	r2, r5, r2
 8000cb8:	4094      	lsls	r4, r2
 8000cba:	4323      	orrs	r3, r4
 8000cbc:	469a      	mov	sl, r3
 8000cbe:	4654      	mov	r4, sl
 8000cc0:	1e63      	subs	r3, r4, #1
 8000cc2:	419c      	sbcs	r4, r3
 8000cc4:	4643      	mov	r3, r8
 8000cc6:	4323      	orrs	r3, r4
 8000cc8:	e773      	b.n	8000bb2 <__aeabi_dsub+0x47e>
 8000cca:	4662      	mov	r2, ip
 8000ccc:	431a      	orrs	r2, r3
 8000cce:	d023      	beq.n	8000d18 <__aeabi_dsub+0x5e4>
 8000cd0:	000a      	movs	r2, r1
 8000cd2:	433a      	orrs	r2, r7
 8000cd4:	d000      	beq.n	8000cd8 <__aeabi_dsub+0x5a4>
 8000cd6:	e0a0      	b.n	8000e1a <__aeabi_dsub+0x6e6>
 8000cd8:	4662      	mov	r2, ip
 8000cda:	08db      	lsrs	r3, r3, #3
 8000cdc:	0752      	lsls	r2, r2, #29
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	4662      	mov	r2, ip
 8000ce2:	08d4      	lsrs	r4, r2, #3
 8000ce4:	e6b0      	b.n	8000a48 <__aeabi_dsub+0x314>
 8000ce6:	000b      	movs	r3, r1
 8000ce8:	433b      	orrs	r3, r7
 8000cea:	d100      	bne.n	8000cee <__aeabi_dsub+0x5ba>
 8000cec:	e728      	b.n	8000b40 <__aeabi_dsub+0x40c>
 8000cee:	08ff      	lsrs	r7, r7, #3
 8000cf0:	074b      	lsls	r3, r1, #29
 8000cf2:	465d      	mov	r5, fp
 8000cf4:	433b      	orrs	r3, r7
 8000cf6:	08cc      	lsrs	r4, r1, #3
 8000cf8:	e697      	b.n	8000a2a <__aeabi_dsub+0x2f6>
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	4698      	mov	r8, r3
 8000cfe:	e736      	b.n	8000b6e <__aeabi_dsub+0x43a>
 8000d00:	1afc      	subs	r4, r7, r3
 8000d02:	42a7      	cmp	r7, r4
 8000d04:	41bf      	sbcs	r7, r7
 8000d06:	4663      	mov	r3, ip
 8000d08:	427f      	negs	r7, r7
 8000d0a:	1ac9      	subs	r1, r1, r3
 8000d0c:	1bcb      	subs	r3, r1, r7
 8000d0e:	4699      	mov	r9, r3
 8000d10:	2301      	movs	r3, #1
 8000d12:	465d      	mov	r5, fp
 8000d14:	4698      	mov	r8, r3
 8000d16:	e55e      	b.n	80007d6 <__aeabi_dsub+0xa2>
 8000d18:	074b      	lsls	r3, r1, #29
 8000d1a:	08ff      	lsrs	r7, r7, #3
 8000d1c:	433b      	orrs	r3, r7
 8000d1e:	08cc      	lsrs	r4, r1, #3
 8000d20:	e692      	b.n	8000a48 <__aeabi_dsub+0x314>
 8000d22:	1bdc      	subs	r4, r3, r7
 8000d24:	4660      	mov	r0, ip
 8000d26:	42a3      	cmp	r3, r4
 8000d28:	41b6      	sbcs	r6, r6
 8000d2a:	1a40      	subs	r0, r0, r1
 8000d2c:	4276      	negs	r6, r6
 8000d2e:	1b80      	subs	r0, r0, r6
 8000d30:	4681      	mov	r9, r0
 8000d32:	0200      	lsls	r0, r0, #8
 8000d34:	d560      	bpl.n	8000df8 <__aeabi_dsub+0x6c4>
 8000d36:	1afc      	subs	r4, r7, r3
 8000d38:	42a7      	cmp	r7, r4
 8000d3a:	41bf      	sbcs	r7, r7
 8000d3c:	4663      	mov	r3, ip
 8000d3e:	427f      	negs	r7, r7
 8000d40:	1ac9      	subs	r1, r1, r3
 8000d42:	1bcb      	subs	r3, r1, r7
 8000d44:	4699      	mov	r9, r3
 8000d46:	465d      	mov	r5, fp
 8000d48:	e576      	b.n	8000838 <__aeabi_dsub+0x104>
 8000d4a:	08ff      	lsrs	r7, r7, #3
 8000d4c:	074b      	lsls	r3, r1, #29
 8000d4e:	433b      	orrs	r3, r7
 8000d50:	08cc      	lsrs	r4, r1, #3
 8000d52:	e667      	b.n	8000a24 <__aeabi_dsub+0x2f0>
 8000d54:	000a      	movs	r2, r1
 8000d56:	08db      	lsrs	r3, r3, #3
 8000d58:	433a      	orrs	r2, r7
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_dsub+0x62a>
 8000d5c:	e66f      	b.n	8000a3e <__aeabi_dsub+0x30a>
 8000d5e:	4662      	mov	r2, ip
 8000d60:	0752      	lsls	r2, r2, #29
 8000d62:	4313      	orrs	r3, r2
 8000d64:	4662      	mov	r2, ip
 8000d66:	08d4      	lsrs	r4, r2, #3
 8000d68:	2280      	movs	r2, #128	; 0x80
 8000d6a:	0312      	lsls	r2, r2, #12
 8000d6c:	4214      	tst	r4, r2
 8000d6e:	d007      	beq.n	8000d80 <__aeabi_dsub+0x64c>
 8000d70:	08c8      	lsrs	r0, r1, #3
 8000d72:	4210      	tst	r0, r2
 8000d74:	d104      	bne.n	8000d80 <__aeabi_dsub+0x64c>
 8000d76:	465d      	mov	r5, fp
 8000d78:	0004      	movs	r4, r0
 8000d7a:	08fb      	lsrs	r3, r7, #3
 8000d7c:	0749      	lsls	r1, r1, #29
 8000d7e:	430b      	orrs	r3, r1
 8000d80:	0f5a      	lsrs	r2, r3, #29
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	08db      	lsrs	r3, r3, #3
 8000d86:	0752      	lsls	r2, r2, #29
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	e65d      	b.n	8000a48 <__aeabi_dsub+0x314>
 8000d8c:	074b      	lsls	r3, r1, #29
 8000d8e:	08ff      	lsrs	r7, r7, #3
 8000d90:	433b      	orrs	r3, r7
 8000d92:	08cc      	lsrs	r4, r1, #3
 8000d94:	e649      	b.n	8000a2a <__aeabi_dsub+0x2f6>
 8000d96:	19dc      	adds	r4, r3, r7
 8000d98:	429c      	cmp	r4, r3
 8000d9a:	419b      	sbcs	r3, r3
 8000d9c:	4461      	add	r1, ip
 8000d9e:	4689      	mov	r9, r1
 8000da0:	425b      	negs	r3, r3
 8000da2:	4499      	add	r9, r3
 8000da4:	464b      	mov	r3, r9
 8000da6:	021b      	lsls	r3, r3, #8
 8000da8:	d400      	bmi.n	8000dac <__aeabi_dsub+0x678>
 8000daa:	e631      	b.n	8000a10 <__aeabi_dsub+0x2dc>
 8000dac:	464a      	mov	r2, r9
 8000dae:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <__aeabi_dsub+0x6d8>)
 8000db0:	401a      	ands	r2, r3
 8000db2:	2301      	movs	r3, #1
 8000db4:	4691      	mov	r9, r2
 8000db6:	4698      	mov	r8, r3
 8000db8:	e62a      	b.n	8000a10 <__aeabi_dsub+0x2dc>
 8000dba:	0016      	movs	r6, r2
 8000dbc:	4664      	mov	r4, ip
 8000dbe:	3e20      	subs	r6, #32
 8000dc0:	40f4      	lsrs	r4, r6
 8000dc2:	46a0      	mov	r8, r4
 8000dc4:	2a20      	cmp	r2, #32
 8000dc6:	d005      	beq.n	8000dd4 <__aeabi_dsub+0x6a0>
 8000dc8:	2640      	movs	r6, #64	; 0x40
 8000dca:	4664      	mov	r4, ip
 8000dcc:	1ab2      	subs	r2, r6, r2
 8000dce:	4094      	lsls	r4, r2
 8000dd0:	4323      	orrs	r3, r4
 8000dd2:	469a      	mov	sl, r3
 8000dd4:	4654      	mov	r4, sl
 8000dd6:	1e63      	subs	r3, r4, #1
 8000dd8:	419c      	sbcs	r4, r3
 8000dda:	4643      	mov	r3, r8
 8000ddc:	431c      	orrs	r4, r3
 8000dde:	e5db      	b.n	8000998 <__aeabi_dsub+0x264>
 8000de0:	0002      	movs	r2, r0
 8000de2:	2400      	movs	r4, #0
 8000de4:	2300      	movs	r3, #0
 8000de6:	e548      	b.n	800087a <__aeabi_dsub+0x146>
 8000de8:	19dc      	adds	r4, r3, r7
 8000dea:	42bc      	cmp	r4, r7
 8000dec:	41bf      	sbcs	r7, r7
 8000dee:	4461      	add	r1, ip
 8000df0:	4689      	mov	r9, r1
 8000df2:	427f      	negs	r7, r7
 8000df4:	44b9      	add	r9, r7
 8000df6:	e738      	b.n	8000c6a <__aeabi_dsub+0x536>
 8000df8:	464b      	mov	r3, r9
 8000dfa:	4323      	orrs	r3, r4
 8000dfc:	d100      	bne.n	8000e00 <__aeabi_dsub+0x6cc>
 8000dfe:	e69f      	b.n	8000b40 <__aeabi_dsub+0x40c>
 8000e00:	e606      	b.n	8000a10 <__aeabi_dsub+0x2dc>
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	000007fe 	.word	0x000007fe
 8000e08:	000007ff 	.word	0x000007ff
 8000e0c:	ff7fffff 	.word	0xff7fffff
 8000e10:	08ff      	lsrs	r7, r7, #3
 8000e12:	074b      	lsls	r3, r1, #29
 8000e14:	433b      	orrs	r3, r7
 8000e16:	08cc      	lsrs	r4, r1, #3
 8000e18:	e616      	b.n	8000a48 <__aeabi_dsub+0x314>
 8000e1a:	4662      	mov	r2, ip
 8000e1c:	08db      	lsrs	r3, r3, #3
 8000e1e:	0752      	lsls	r2, r2, #29
 8000e20:	4313      	orrs	r3, r2
 8000e22:	4662      	mov	r2, ip
 8000e24:	08d4      	lsrs	r4, r2, #3
 8000e26:	2280      	movs	r2, #128	; 0x80
 8000e28:	0312      	lsls	r2, r2, #12
 8000e2a:	4214      	tst	r4, r2
 8000e2c:	d007      	beq.n	8000e3e <__aeabi_dsub+0x70a>
 8000e2e:	08c8      	lsrs	r0, r1, #3
 8000e30:	4210      	tst	r0, r2
 8000e32:	d104      	bne.n	8000e3e <__aeabi_dsub+0x70a>
 8000e34:	465d      	mov	r5, fp
 8000e36:	0004      	movs	r4, r0
 8000e38:	08fb      	lsrs	r3, r7, #3
 8000e3a:	0749      	lsls	r1, r1, #29
 8000e3c:	430b      	orrs	r3, r1
 8000e3e:	0f5a      	lsrs	r2, r3, #29
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	0752      	lsls	r2, r2, #29
 8000e44:	08db      	lsrs	r3, r3, #3
 8000e46:	4313      	orrs	r3, r2
 8000e48:	e5fe      	b.n	8000a48 <__aeabi_dsub+0x314>
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	4a01      	ldr	r2, [pc, #4]	; (8000e54 <__aeabi_dsub+0x720>)
 8000e4e:	001c      	movs	r4, r3
 8000e50:	e513      	b.n	800087a <__aeabi_dsub+0x146>
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	000007ff 	.word	0x000007ff

08000e58 <__aeabi_d2iz>:
 8000e58:	000a      	movs	r2, r1
 8000e5a:	b530      	push	{r4, r5, lr}
 8000e5c:	4c13      	ldr	r4, [pc, #76]	; (8000eac <__aeabi_d2iz+0x54>)
 8000e5e:	0053      	lsls	r3, r2, #1
 8000e60:	0309      	lsls	r1, r1, #12
 8000e62:	0005      	movs	r5, r0
 8000e64:	0b09      	lsrs	r1, r1, #12
 8000e66:	2000      	movs	r0, #0
 8000e68:	0d5b      	lsrs	r3, r3, #21
 8000e6a:	0fd2      	lsrs	r2, r2, #31
 8000e6c:	42a3      	cmp	r3, r4
 8000e6e:	dd04      	ble.n	8000e7a <__aeabi_d2iz+0x22>
 8000e70:	480f      	ldr	r0, [pc, #60]	; (8000eb0 <__aeabi_d2iz+0x58>)
 8000e72:	4283      	cmp	r3, r0
 8000e74:	dd02      	ble.n	8000e7c <__aeabi_d2iz+0x24>
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <__aeabi_d2iz+0x5c>)
 8000e78:	18d0      	adds	r0, r2, r3
 8000e7a:	bd30      	pop	{r4, r5, pc}
 8000e7c:	2080      	movs	r0, #128	; 0x80
 8000e7e:	0340      	lsls	r0, r0, #13
 8000e80:	4301      	orrs	r1, r0
 8000e82:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <__aeabi_d2iz+0x60>)
 8000e84:	1ac0      	subs	r0, r0, r3
 8000e86:	281f      	cmp	r0, #31
 8000e88:	dd08      	ble.n	8000e9c <__aeabi_d2iz+0x44>
 8000e8a:	480c      	ldr	r0, [pc, #48]	; (8000ebc <__aeabi_d2iz+0x64>)
 8000e8c:	1ac3      	subs	r3, r0, r3
 8000e8e:	40d9      	lsrs	r1, r3
 8000e90:	000b      	movs	r3, r1
 8000e92:	4258      	negs	r0, r3
 8000e94:	2a00      	cmp	r2, #0
 8000e96:	d1f0      	bne.n	8000e7a <__aeabi_d2iz+0x22>
 8000e98:	0018      	movs	r0, r3
 8000e9a:	e7ee      	b.n	8000e7a <__aeabi_d2iz+0x22>
 8000e9c:	4c08      	ldr	r4, [pc, #32]	; (8000ec0 <__aeabi_d2iz+0x68>)
 8000e9e:	40c5      	lsrs	r5, r0
 8000ea0:	46a4      	mov	ip, r4
 8000ea2:	4463      	add	r3, ip
 8000ea4:	4099      	lsls	r1, r3
 8000ea6:	000b      	movs	r3, r1
 8000ea8:	432b      	orrs	r3, r5
 8000eaa:	e7f2      	b.n	8000e92 <__aeabi_d2iz+0x3a>
 8000eac:	000003fe 	.word	0x000003fe
 8000eb0:	0000041d 	.word	0x0000041d
 8000eb4:	7fffffff 	.word	0x7fffffff
 8000eb8:	00000433 	.word	0x00000433
 8000ebc:	00000413 	.word	0x00000413
 8000ec0:	fffffbed 	.word	0xfffffbed

08000ec4 <__aeabi_ui2d>:
 8000ec4:	b510      	push	{r4, lr}
 8000ec6:	1e04      	subs	r4, r0, #0
 8000ec8:	d010      	beq.n	8000eec <__aeabi_ui2d+0x28>
 8000eca:	f000 f85f 	bl	8000f8c <__clzsi2>
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <__aeabi_ui2d+0x48>)
 8000ed0:	1a1b      	subs	r3, r3, r0
 8000ed2:	280a      	cmp	r0, #10
 8000ed4:	dc11      	bgt.n	8000efa <__aeabi_ui2d+0x36>
 8000ed6:	220b      	movs	r2, #11
 8000ed8:	0021      	movs	r1, r4
 8000eda:	1a12      	subs	r2, r2, r0
 8000edc:	40d1      	lsrs	r1, r2
 8000ede:	3015      	adds	r0, #21
 8000ee0:	030a      	lsls	r2, r1, #12
 8000ee2:	055b      	lsls	r3, r3, #21
 8000ee4:	4084      	lsls	r4, r0
 8000ee6:	0b12      	lsrs	r2, r2, #12
 8000ee8:	0d5b      	lsrs	r3, r3, #21
 8000eea:	e001      	b.n	8000ef0 <__aeabi_ui2d+0x2c>
 8000eec:	2300      	movs	r3, #0
 8000eee:	2200      	movs	r2, #0
 8000ef0:	051b      	lsls	r3, r3, #20
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	0020      	movs	r0, r4
 8000ef6:	0019      	movs	r1, r3
 8000ef8:	bd10      	pop	{r4, pc}
 8000efa:	0022      	movs	r2, r4
 8000efc:	380b      	subs	r0, #11
 8000efe:	4082      	lsls	r2, r0
 8000f00:	055b      	lsls	r3, r3, #21
 8000f02:	0312      	lsls	r2, r2, #12
 8000f04:	2400      	movs	r4, #0
 8000f06:	0b12      	lsrs	r2, r2, #12
 8000f08:	0d5b      	lsrs	r3, r3, #21
 8000f0a:	e7f1      	b.n	8000ef0 <__aeabi_ui2d+0x2c>
 8000f0c:	0000041e 	.word	0x0000041e

08000f10 <__aeabi_cdrcmple>:
 8000f10:	4684      	mov	ip, r0
 8000f12:	0010      	movs	r0, r2
 8000f14:	4662      	mov	r2, ip
 8000f16:	468c      	mov	ip, r1
 8000f18:	0019      	movs	r1, r3
 8000f1a:	4663      	mov	r3, ip
 8000f1c:	e000      	b.n	8000f20 <__aeabi_cdcmpeq>
 8000f1e:	46c0      	nop			; (mov r8, r8)

08000f20 <__aeabi_cdcmpeq>:
 8000f20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000f22:	f000 f8f9 	bl	8001118 <__ledf2>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d401      	bmi.n	8000f2e <__aeabi_cdcmpeq+0xe>
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	42c8      	cmn	r0, r1
 8000f2e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000f30 <__aeabi_dcmpeq>:
 8000f30:	b510      	push	{r4, lr}
 8000f32:	f000 f849 	bl	8000fc8 <__eqdf2>
 8000f36:	4240      	negs	r0, r0
 8000f38:	3001      	adds	r0, #1
 8000f3a:	bd10      	pop	{r4, pc}

08000f3c <__aeabi_dcmplt>:
 8000f3c:	b510      	push	{r4, lr}
 8000f3e:	f000 f8eb 	bl	8001118 <__ledf2>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	db01      	blt.n	8000f4a <__aeabi_dcmplt+0xe>
 8000f46:	2000      	movs	r0, #0
 8000f48:	bd10      	pop	{r4, pc}
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	bd10      	pop	{r4, pc}
 8000f4e:	46c0      	nop			; (mov r8, r8)

08000f50 <__aeabi_dcmple>:
 8000f50:	b510      	push	{r4, lr}
 8000f52:	f000 f8e1 	bl	8001118 <__ledf2>
 8000f56:	2800      	cmp	r0, #0
 8000f58:	dd01      	ble.n	8000f5e <__aeabi_dcmple+0xe>
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	bd10      	pop	{r4, pc}
 8000f5e:	2001      	movs	r0, #1
 8000f60:	bd10      	pop	{r4, pc}
 8000f62:	46c0      	nop			; (mov r8, r8)

08000f64 <__aeabi_dcmpgt>:
 8000f64:	b510      	push	{r4, lr}
 8000f66:	f000 f871 	bl	800104c <__gedf2>
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	dc01      	bgt.n	8000f72 <__aeabi_dcmpgt+0xe>
 8000f6e:	2000      	movs	r0, #0
 8000f70:	bd10      	pop	{r4, pc}
 8000f72:	2001      	movs	r0, #1
 8000f74:	bd10      	pop	{r4, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)

08000f78 <__aeabi_dcmpge>:
 8000f78:	b510      	push	{r4, lr}
 8000f7a:	f000 f867 	bl	800104c <__gedf2>
 8000f7e:	2800      	cmp	r0, #0
 8000f80:	da01      	bge.n	8000f86 <__aeabi_dcmpge+0xe>
 8000f82:	2000      	movs	r0, #0
 8000f84:	bd10      	pop	{r4, pc}
 8000f86:	2001      	movs	r0, #1
 8000f88:	bd10      	pop	{r4, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)

08000f8c <__clzsi2>:
 8000f8c:	211c      	movs	r1, #28
 8000f8e:	2301      	movs	r3, #1
 8000f90:	041b      	lsls	r3, r3, #16
 8000f92:	4298      	cmp	r0, r3
 8000f94:	d301      	bcc.n	8000f9a <__clzsi2+0xe>
 8000f96:	0c00      	lsrs	r0, r0, #16
 8000f98:	3910      	subs	r1, #16
 8000f9a:	0a1b      	lsrs	r3, r3, #8
 8000f9c:	4298      	cmp	r0, r3
 8000f9e:	d301      	bcc.n	8000fa4 <__clzsi2+0x18>
 8000fa0:	0a00      	lsrs	r0, r0, #8
 8000fa2:	3908      	subs	r1, #8
 8000fa4:	091b      	lsrs	r3, r3, #4
 8000fa6:	4298      	cmp	r0, r3
 8000fa8:	d301      	bcc.n	8000fae <__clzsi2+0x22>
 8000faa:	0900      	lsrs	r0, r0, #4
 8000fac:	3904      	subs	r1, #4
 8000fae:	a202      	add	r2, pc, #8	; (adr r2, 8000fb8 <__clzsi2+0x2c>)
 8000fb0:	5c10      	ldrb	r0, [r2, r0]
 8000fb2:	1840      	adds	r0, r0, r1
 8000fb4:	4770      	bx	lr
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	02020304 	.word	0x02020304
 8000fbc:	01010101 	.word	0x01010101
	...

08000fc8 <__eqdf2>:
 8000fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fca:	464e      	mov	r6, r9
 8000fcc:	4645      	mov	r5, r8
 8000fce:	46de      	mov	lr, fp
 8000fd0:	4657      	mov	r7, sl
 8000fd2:	4690      	mov	r8, r2
 8000fd4:	b5e0      	push	{r5, r6, r7, lr}
 8000fd6:	0017      	movs	r7, r2
 8000fd8:	031a      	lsls	r2, r3, #12
 8000fda:	0b12      	lsrs	r2, r2, #12
 8000fdc:	0005      	movs	r5, r0
 8000fde:	4684      	mov	ip, r0
 8000fe0:	4819      	ldr	r0, [pc, #100]	; (8001048 <__eqdf2+0x80>)
 8000fe2:	030e      	lsls	r6, r1, #12
 8000fe4:	004c      	lsls	r4, r1, #1
 8000fe6:	4691      	mov	r9, r2
 8000fe8:	005a      	lsls	r2, r3, #1
 8000fea:	0fdb      	lsrs	r3, r3, #31
 8000fec:	469b      	mov	fp, r3
 8000fee:	0b36      	lsrs	r6, r6, #12
 8000ff0:	0d64      	lsrs	r4, r4, #21
 8000ff2:	0fc9      	lsrs	r1, r1, #31
 8000ff4:	0d52      	lsrs	r2, r2, #21
 8000ff6:	4284      	cmp	r4, r0
 8000ff8:	d019      	beq.n	800102e <__eqdf2+0x66>
 8000ffa:	4282      	cmp	r2, r0
 8000ffc:	d010      	beq.n	8001020 <__eqdf2+0x58>
 8000ffe:	2001      	movs	r0, #1
 8001000:	4294      	cmp	r4, r2
 8001002:	d10e      	bne.n	8001022 <__eqdf2+0x5a>
 8001004:	454e      	cmp	r6, r9
 8001006:	d10c      	bne.n	8001022 <__eqdf2+0x5a>
 8001008:	2001      	movs	r0, #1
 800100a:	45c4      	cmp	ip, r8
 800100c:	d109      	bne.n	8001022 <__eqdf2+0x5a>
 800100e:	4559      	cmp	r1, fp
 8001010:	d017      	beq.n	8001042 <__eqdf2+0x7a>
 8001012:	2c00      	cmp	r4, #0
 8001014:	d105      	bne.n	8001022 <__eqdf2+0x5a>
 8001016:	0030      	movs	r0, r6
 8001018:	4328      	orrs	r0, r5
 800101a:	1e43      	subs	r3, r0, #1
 800101c:	4198      	sbcs	r0, r3
 800101e:	e000      	b.n	8001022 <__eqdf2+0x5a>
 8001020:	2001      	movs	r0, #1
 8001022:	bcf0      	pop	{r4, r5, r6, r7}
 8001024:	46bb      	mov	fp, r7
 8001026:	46b2      	mov	sl, r6
 8001028:	46a9      	mov	r9, r5
 800102a:	46a0      	mov	r8, r4
 800102c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102e:	0033      	movs	r3, r6
 8001030:	2001      	movs	r0, #1
 8001032:	432b      	orrs	r3, r5
 8001034:	d1f5      	bne.n	8001022 <__eqdf2+0x5a>
 8001036:	42a2      	cmp	r2, r4
 8001038:	d1f3      	bne.n	8001022 <__eqdf2+0x5a>
 800103a:	464b      	mov	r3, r9
 800103c:	433b      	orrs	r3, r7
 800103e:	d1f0      	bne.n	8001022 <__eqdf2+0x5a>
 8001040:	e7e2      	b.n	8001008 <__eqdf2+0x40>
 8001042:	2000      	movs	r0, #0
 8001044:	e7ed      	b.n	8001022 <__eqdf2+0x5a>
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	000007ff 	.word	0x000007ff

0800104c <__gedf2>:
 800104c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104e:	4647      	mov	r7, r8
 8001050:	46ce      	mov	lr, r9
 8001052:	0004      	movs	r4, r0
 8001054:	0018      	movs	r0, r3
 8001056:	0016      	movs	r6, r2
 8001058:	031b      	lsls	r3, r3, #12
 800105a:	0b1b      	lsrs	r3, r3, #12
 800105c:	4d2d      	ldr	r5, [pc, #180]	; (8001114 <__gedf2+0xc8>)
 800105e:	004a      	lsls	r2, r1, #1
 8001060:	4699      	mov	r9, r3
 8001062:	b580      	push	{r7, lr}
 8001064:	0043      	lsls	r3, r0, #1
 8001066:	030f      	lsls	r7, r1, #12
 8001068:	46a4      	mov	ip, r4
 800106a:	46b0      	mov	r8, r6
 800106c:	0b3f      	lsrs	r7, r7, #12
 800106e:	0d52      	lsrs	r2, r2, #21
 8001070:	0fc9      	lsrs	r1, r1, #31
 8001072:	0d5b      	lsrs	r3, r3, #21
 8001074:	0fc0      	lsrs	r0, r0, #31
 8001076:	42aa      	cmp	r2, r5
 8001078:	d021      	beq.n	80010be <__gedf2+0x72>
 800107a:	42ab      	cmp	r3, r5
 800107c:	d013      	beq.n	80010a6 <__gedf2+0x5a>
 800107e:	2a00      	cmp	r2, #0
 8001080:	d122      	bne.n	80010c8 <__gedf2+0x7c>
 8001082:	433c      	orrs	r4, r7
 8001084:	2b00      	cmp	r3, #0
 8001086:	d102      	bne.n	800108e <__gedf2+0x42>
 8001088:	464d      	mov	r5, r9
 800108a:	432e      	orrs	r6, r5
 800108c:	d022      	beq.n	80010d4 <__gedf2+0x88>
 800108e:	2c00      	cmp	r4, #0
 8001090:	d010      	beq.n	80010b4 <__gedf2+0x68>
 8001092:	4281      	cmp	r1, r0
 8001094:	d022      	beq.n	80010dc <__gedf2+0x90>
 8001096:	2002      	movs	r0, #2
 8001098:	3901      	subs	r1, #1
 800109a:	4008      	ands	r0, r1
 800109c:	3801      	subs	r0, #1
 800109e:	bcc0      	pop	{r6, r7}
 80010a0:	46b9      	mov	r9, r7
 80010a2:	46b0      	mov	r8, r6
 80010a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010a6:	464d      	mov	r5, r9
 80010a8:	432e      	orrs	r6, r5
 80010aa:	d129      	bne.n	8001100 <__gedf2+0xb4>
 80010ac:	2a00      	cmp	r2, #0
 80010ae:	d1f0      	bne.n	8001092 <__gedf2+0x46>
 80010b0:	433c      	orrs	r4, r7
 80010b2:	d1ee      	bne.n	8001092 <__gedf2+0x46>
 80010b4:	2800      	cmp	r0, #0
 80010b6:	d1f2      	bne.n	800109e <__gedf2+0x52>
 80010b8:	2001      	movs	r0, #1
 80010ba:	4240      	negs	r0, r0
 80010bc:	e7ef      	b.n	800109e <__gedf2+0x52>
 80010be:	003d      	movs	r5, r7
 80010c0:	4325      	orrs	r5, r4
 80010c2:	d11d      	bne.n	8001100 <__gedf2+0xb4>
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d0ee      	beq.n	80010a6 <__gedf2+0x5a>
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1e2      	bne.n	8001092 <__gedf2+0x46>
 80010cc:	464c      	mov	r4, r9
 80010ce:	4326      	orrs	r6, r4
 80010d0:	d1df      	bne.n	8001092 <__gedf2+0x46>
 80010d2:	e7e0      	b.n	8001096 <__gedf2+0x4a>
 80010d4:	2000      	movs	r0, #0
 80010d6:	2c00      	cmp	r4, #0
 80010d8:	d0e1      	beq.n	800109e <__gedf2+0x52>
 80010da:	e7dc      	b.n	8001096 <__gedf2+0x4a>
 80010dc:	429a      	cmp	r2, r3
 80010de:	dc0a      	bgt.n	80010f6 <__gedf2+0xaa>
 80010e0:	dbe8      	blt.n	80010b4 <__gedf2+0x68>
 80010e2:	454f      	cmp	r7, r9
 80010e4:	d8d7      	bhi.n	8001096 <__gedf2+0x4a>
 80010e6:	d00e      	beq.n	8001106 <__gedf2+0xba>
 80010e8:	2000      	movs	r0, #0
 80010ea:	454f      	cmp	r7, r9
 80010ec:	d2d7      	bcs.n	800109e <__gedf2+0x52>
 80010ee:	2900      	cmp	r1, #0
 80010f0:	d0e2      	beq.n	80010b8 <__gedf2+0x6c>
 80010f2:	0008      	movs	r0, r1
 80010f4:	e7d3      	b.n	800109e <__gedf2+0x52>
 80010f6:	4243      	negs	r3, r0
 80010f8:	4158      	adcs	r0, r3
 80010fa:	0040      	lsls	r0, r0, #1
 80010fc:	3801      	subs	r0, #1
 80010fe:	e7ce      	b.n	800109e <__gedf2+0x52>
 8001100:	2002      	movs	r0, #2
 8001102:	4240      	negs	r0, r0
 8001104:	e7cb      	b.n	800109e <__gedf2+0x52>
 8001106:	45c4      	cmp	ip, r8
 8001108:	d8c5      	bhi.n	8001096 <__gedf2+0x4a>
 800110a:	2000      	movs	r0, #0
 800110c:	45c4      	cmp	ip, r8
 800110e:	d2c6      	bcs.n	800109e <__gedf2+0x52>
 8001110:	e7ed      	b.n	80010ee <__gedf2+0xa2>
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	000007ff 	.word	0x000007ff

08001118 <__ledf2>:
 8001118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800111a:	4647      	mov	r7, r8
 800111c:	46ce      	mov	lr, r9
 800111e:	0004      	movs	r4, r0
 8001120:	0018      	movs	r0, r3
 8001122:	0016      	movs	r6, r2
 8001124:	031b      	lsls	r3, r3, #12
 8001126:	0b1b      	lsrs	r3, r3, #12
 8001128:	4d2c      	ldr	r5, [pc, #176]	; (80011dc <__ledf2+0xc4>)
 800112a:	004a      	lsls	r2, r1, #1
 800112c:	4699      	mov	r9, r3
 800112e:	b580      	push	{r7, lr}
 8001130:	0043      	lsls	r3, r0, #1
 8001132:	030f      	lsls	r7, r1, #12
 8001134:	46a4      	mov	ip, r4
 8001136:	46b0      	mov	r8, r6
 8001138:	0b3f      	lsrs	r7, r7, #12
 800113a:	0d52      	lsrs	r2, r2, #21
 800113c:	0fc9      	lsrs	r1, r1, #31
 800113e:	0d5b      	lsrs	r3, r3, #21
 8001140:	0fc0      	lsrs	r0, r0, #31
 8001142:	42aa      	cmp	r2, r5
 8001144:	d00d      	beq.n	8001162 <__ledf2+0x4a>
 8001146:	42ab      	cmp	r3, r5
 8001148:	d010      	beq.n	800116c <__ledf2+0x54>
 800114a:	2a00      	cmp	r2, #0
 800114c:	d127      	bne.n	800119e <__ledf2+0x86>
 800114e:	433c      	orrs	r4, r7
 8001150:	2b00      	cmp	r3, #0
 8001152:	d111      	bne.n	8001178 <__ledf2+0x60>
 8001154:	464d      	mov	r5, r9
 8001156:	432e      	orrs	r6, r5
 8001158:	d10e      	bne.n	8001178 <__ledf2+0x60>
 800115a:	2000      	movs	r0, #0
 800115c:	2c00      	cmp	r4, #0
 800115e:	d015      	beq.n	800118c <__ledf2+0x74>
 8001160:	e00e      	b.n	8001180 <__ledf2+0x68>
 8001162:	003d      	movs	r5, r7
 8001164:	4325      	orrs	r5, r4
 8001166:	d110      	bne.n	800118a <__ledf2+0x72>
 8001168:	4293      	cmp	r3, r2
 800116a:	d118      	bne.n	800119e <__ledf2+0x86>
 800116c:	464d      	mov	r5, r9
 800116e:	432e      	orrs	r6, r5
 8001170:	d10b      	bne.n	800118a <__ledf2+0x72>
 8001172:	2a00      	cmp	r2, #0
 8001174:	d102      	bne.n	800117c <__ledf2+0x64>
 8001176:	433c      	orrs	r4, r7
 8001178:	2c00      	cmp	r4, #0
 800117a:	d00b      	beq.n	8001194 <__ledf2+0x7c>
 800117c:	4281      	cmp	r1, r0
 800117e:	d014      	beq.n	80011aa <__ledf2+0x92>
 8001180:	2002      	movs	r0, #2
 8001182:	3901      	subs	r1, #1
 8001184:	4008      	ands	r0, r1
 8001186:	3801      	subs	r0, #1
 8001188:	e000      	b.n	800118c <__ledf2+0x74>
 800118a:	2002      	movs	r0, #2
 800118c:	bcc0      	pop	{r6, r7}
 800118e:	46b9      	mov	r9, r7
 8001190:	46b0      	mov	r8, r6
 8001192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001194:	2800      	cmp	r0, #0
 8001196:	d1f9      	bne.n	800118c <__ledf2+0x74>
 8001198:	2001      	movs	r0, #1
 800119a:	4240      	negs	r0, r0
 800119c:	e7f6      	b.n	800118c <__ledf2+0x74>
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1ec      	bne.n	800117c <__ledf2+0x64>
 80011a2:	464c      	mov	r4, r9
 80011a4:	4326      	orrs	r6, r4
 80011a6:	d1e9      	bne.n	800117c <__ledf2+0x64>
 80011a8:	e7ea      	b.n	8001180 <__ledf2+0x68>
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dd04      	ble.n	80011b8 <__ledf2+0xa0>
 80011ae:	4243      	negs	r3, r0
 80011b0:	4158      	adcs	r0, r3
 80011b2:	0040      	lsls	r0, r0, #1
 80011b4:	3801      	subs	r0, #1
 80011b6:	e7e9      	b.n	800118c <__ledf2+0x74>
 80011b8:	429a      	cmp	r2, r3
 80011ba:	dbeb      	blt.n	8001194 <__ledf2+0x7c>
 80011bc:	454f      	cmp	r7, r9
 80011be:	d8df      	bhi.n	8001180 <__ledf2+0x68>
 80011c0:	d006      	beq.n	80011d0 <__ledf2+0xb8>
 80011c2:	2000      	movs	r0, #0
 80011c4:	454f      	cmp	r7, r9
 80011c6:	d2e1      	bcs.n	800118c <__ledf2+0x74>
 80011c8:	2900      	cmp	r1, #0
 80011ca:	d0e5      	beq.n	8001198 <__ledf2+0x80>
 80011cc:	0008      	movs	r0, r1
 80011ce:	e7dd      	b.n	800118c <__ledf2+0x74>
 80011d0:	45c4      	cmp	ip, r8
 80011d2:	d8d5      	bhi.n	8001180 <__ledf2+0x68>
 80011d4:	2000      	movs	r0, #0
 80011d6:	45c4      	cmp	ip, r8
 80011d8:	d2d8      	bcs.n	800118c <__ledf2+0x74>
 80011da:	e7f5      	b.n	80011c8 <__ledf2+0xb0>
 80011dc:	000007ff 	.word	0x000007ff

080011e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e4:	f000 fc6c 	bl	8001ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e8:	f000 f80e 	bl	8001208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ec:	f000 f8a4 	bl	8001338 <MX_GPIO_Init>
  MX_DMA_Init();
 80011f0:	f000 f884 	bl	80012fc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011f4:	f000 f852 	bl	800129c <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  LOT_Receive(buffer);
 80011f8:	4b02      	ldr	r3, [pc, #8]	; (8001204 <main+0x24>)
 80011fa:	0018      	movs	r0, r3
 80011fc:	f000 f93c 	bl	8001478 <LOT_Receive>
 8001200:	e7fa      	b.n	80011f8 <main+0x18>
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	2000013c 	.word	0x2000013c

08001208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b091      	sub	sp, #68	; 0x44
 800120c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120e:	2410      	movs	r4, #16
 8001210:	193b      	adds	r3, r7, r4
 8001212:	0018      	movs	r0, r3
 8001214:	2330      	movs	r3, #48	; 0x30
 8001216:	001a      	movs	r2, r3
 8001218:	2100      	movs	r1, #0
 800121a:	f002 fd39 	bl	8003c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800121e:	003b      	movs	r3, r7
 8001220:	0018      	movs	r0, r3
 8001222:	2310      	movs	r3, #16
 8001224:	001a      	movs	r2, r3
 8001226:	2100      	movs	r1, #0
 8001228:	f002 fd32 	bl	8003c90 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800122c:	0021      	movs	r1, r4
 800122e:	187b      	adds	r3, r7, r1
 8001230:	2202      	movs	r2, #2
 8001232:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001234:	187b      	adds	r3, r7, r1
 8001236:	2201      	movs	r2, #1
 8001238:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800123a:	187b      	adds	r3, r7, r1
 800123c:	2210      	movs	r2, #16
 800123e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001240:	187b      	adds	r3, r7, r1
 8001242:	2202      	movs	r2, #2
 8001244:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001246:	187b      	adds	r3, r7, r1
 8001248:	2200      	movs	r2, #0
 800124a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800124c:	187b      	adds	r3, r7, r1
 800124e:	22a0      	movs	r2, #160	; 0xa0
 8001250:	0392      	lsls	r2, r2, #14
 8001252:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001254:	187b      	adds	r3, r7, r1
 8001256:	2200      	movs	r2, #0
 8001258:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125a:	187b      	adds	r3, r7, r1
 800125c:	0018      	movs	r0, r3
 800125e:	f001 f8e9 	bl	8002434 <HAL_RCC_OscConfig>
 8001262:	1e03      	subs	r3, r0, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001266:	f000 faf1 	bl	800184c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126a:	003b      	movs	r3, r7
 800126c:	2207      	movs	r2, #7
 800126e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001270:	003b      	movs	r3, r7
 8001272:	2202      	movs	r2, #2
 8001274:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001276:	003b      	movs	r3, r7
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800127c:	003b      	movs	r3, r7
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001282:	003b      	movs	r3, r7
 8001284:	2101      	movs	r1, #1
 8001286:	0018      	movs	r0, r3
 8001288:	f001 fbee 	bl	8002a68 <HAL_RCC_ClockConfig>
 800128c:	1e03      	subs	r3, r0, #0
 800128e:	d001      	beq.n	8001294 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001290:	f000 fadc 	bl	800184c <Error_Handler>
  }
}
 8001294:	46c0      	nop			; (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	b011      	add	sp, #68	; 0x44
 800129a:	bd90      	pop	{r4, r7, pc}

0800129c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <MX_USART2_UART_Init+0x58>)
 80012a2:	4a15      	ldr	r2, [pc, #84]	; (80012f8 <MX_USART2_UART_Init+0x5c>)
 80012a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80012a6:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <MX_USART2_UART_Init+0x58>)
 80012a8:	2296      	movs	r2, #150	; 0x96
 80012aa:	0192      	lsls	r2, r2, #6
 80012ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_USART2_UART_Init+0x58>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <MX_USART2_UART_Init+0x58>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_USART2_UART_Init+0x58>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_USART2_UART_Init+0x58>)
 80012c2:	220c      	movs	r2, #12
 80012c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <MX_USART2_UART_Init+0x58>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_USART2_UART_Init+0x58>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <MX_USART2_UART_Init+0x58>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_USART2_UART_Init+0x58>)
 80012da:	2200      	movs	r2, #0
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <MX_USART2_UART_Init+0x58>)
 80012e0:	0018      	movs	r0, r3
 80012e2:	f001 fd13 	bl	8002d0c <HAL_UART_Init>
 80012e6:	1e03      	subs	r3, r0, #0
 80012e8:	d001      	beq.n	80012ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012ea:	f000 faaf 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	2000002c 	.word	0x2000002c
 80012f8:	40004400 	.word	0x40004400

080012fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <MX_DMA_Init+0x38>)
 8001304:	695a      	ldr	r2, [r3, #20]
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <MX_DMA_Init+0x38>)
 8001308:	2101      	movs	r1, #1
 800130a:	430a      	orrs	r2, r1
 800130c:	615a      	str	r2, [r3, #20]
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <MX_DMA_Init+0x38>)
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	2201      	movs	r2, #1
 8001314:	4013      	ands	r3, r2
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	200b      	movs	r0, #11
 8001320:	f000 fd02 	bl	8001d28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8001324:	200b      	movs	r0, #11
 8001326:	f000 fd14 	bl	8001d52 <HAL_NVIC_EnableIRQ>

}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	46bd      	mov	sp, r7
 800132e:	b002      	add	sp, #8
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	40021000 	.word	0x40021000

08001338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b089      	sub	sp, #36	; 0x24
 800133c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133e:	240c      	movs	r4, #12
 8001340:	193b      	adds	r3, r7, r4
 8001342:	0018      	movs	r0, r3
 8001344:	2314      	movs	r3, #20
 8001346:	001a      	movs	r2, r3
 8001348:	2100      	movs	r1, #0
 800134a:	f002 fca1 	bl	8003c90 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	4b38      	ldr	r3, [pc, #224]	; (8001430 <MX_GPIO_Init+0xf8>)
 8001350:	695a      	ldr	r2, [r3, #20]
 8001352:	4b37      	ldr	r3, [pc, #220]	; (8001430 <MX_GPIO_Init+0xf8>)
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	0289      	lsls	r1, r1, #10
 8001358:	430a      	orrs	r2, r1
 800135a:	615a      	str	r2, [r3, #20]
 800135c:	4b34      	ldr	r3, [pc, #208]	; (8001430 <MX_GPIO_Init+0xf8>)
 800135e:	695a      	ldr	r2, [r3, #20]
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	029b      	lsls	r3, r3, #10
 8001364:	4013      	ands	r3, r2
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	4b31      	ldr	r3, [pc, #196]	; (8001430 <MX_GPIO_Init+0xf8>)
 800136c:	695a      	ldr	r2, [r3, #20]
 800136e:	4b30      	ldr	r3, [pc, #192]	; (8001430 <MX_GPIO_Init+0xf8>)
 8001370:	2180      	movs	r1, #128	; 0x80
 8001372:	02c9      	lsls	r1, r1, #11
 8001374:	430a      	orrs	r2, r1
 8001376:	615a      	str	r2, [r3, #20]
 8001378:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <MX_GPIO_Init+0xf8>)
 800137a:	695a      	ldr	r2, [r3, #20]
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	02db      	lsls	r3, r3, #11
 8001380:	4013      	ands	r3, r2
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001386:	4b2a      	ldr	r3, [pc, #168]	; (8001430 <MX_GPIO_Init+0xf8>)
 8001388:	695a      	ldr	r2, [r3, #20]
 800138a:	4b29      	ldr	r3, [pc, #164]	; (8001430 <MX_GPIO_Init+0xf8>)
 800138c:	2180      	movs	r1, #128	; 0x80
 800138e:	0309      	lsls	r1, r1, #12
 8001390:	430a      	orrs	r2, r1
 8001392:	615a      	str	r2, [r3, #20]
 8001394:	4b26      	ldr	r3, [pc, #152]	; (8001430 <MX_GPIO_Init+0xf8>)
 8001396:	695a      	ldr	r2, [r3, #20]
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	031b      	lsls	r3, r3, #12
 800139c:	4013      	ands	r3, r2
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80013a2:	23c0      	movs	r3, #192	; 0xc0
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4823      	ldr	r0, [pc, #140]	; (8001434 <MX_GPIO_Init+0xfc>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	0019      	movs	r1, r3
 80013ac:	f000 ffff 	bl	80023ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013b0:	193b      	adds	r3, r7, r4
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b6:	193b      	adds	r3, r7, r4
 80013b8:	2288      	movs	r2, #136	; 0x88
 80013ba:	0352      	lsls	r2, r2, #13
 80013bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	193b      	adds	r3, r7, r4
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	193a      	adds	r2, r7, r4
 80013c6:	2390      	movs	r3, #144	; 0x90
 80013c8:	05db      	lsls	r3, r3, #23
 80013ca:	0011      	movs	r1, r2
 80013cc:	0018      	movs	r0, r3
 80013ce:	f000 fe61 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013d2:	193b      	adds	r3, r7, r4
 80013d4:	2202      	movs	r2, #2
 80013d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d8:	193b      	adds	r3, r7, r4
 80013da:	2200      	movs	r2, #0
 80013dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013de:	193b      	adds	r3, r7, r4
 80013e0:	2202      	movs	r2, #2
 80013e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e4:	193b      	adds	r3, r7, r4
 80013e6:	4a14      	ldr	r2, [pc, #80]	; (8001438 <MX_GPIO_Init+0x100>)
 80013e8:	0019      	movs	r1, r3
 80013ea:	0010      	movs	r0, r2
 80013ec:	f000 fe52 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80013f0:	0021      	movs	r1, r4
 80013f2:	187b      	adds	r3, r7, r1
 80013f4:	22c0      	movs	r2, #192	; 0xc0
 80013f6:	0092      	lsls	r2, r2, #2
 80013f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fa:	187b      	adds	r3, r7, r1
 80013fc:	2201      	movs	r2, #1
 80013fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	187b      	adds	r3, r7, r1
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	187b      	adds	r3, r7, r1
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140c:	187b      	adds	r3, r7, r1
 800140e:	4a09      	ldr	r2, [pc, #36]	; (8001434 <MX_GPIO_Init+0xfc>)
 8001410:	0019      	movs	r1, r3
 8001412:	0010      	movs	r0, r2
 8001414:	f000 fe3e 	bl	8002094 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	2100      	movs	r1, #0
 800141c:	2005      	movs	r0, #5
 800141e:	f000 fc83 	bl	8001d28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001422:	2005      	movs	r0, #5
 8001424:	f000 fc95 	bl	8001d52 <HAL_NVIC_EnableIRQ>

}
 8001428:	46c0      	nop			; (mov r8, r8)
 800142a:	46bd      	mov	sp, r7
 800142c:	b009      	add	sp, #36	; 0x24
 800142e:	bd90      	pop	{r4, r7, pc}
 8001430:	40021000 	.word	0x40021000
 8001434:	48000800 	.word	0x48000800
 8001438:	48000400 	.word	0x48000400

0800143c <EXTI0_1_IRQHandler>:

/* USER CODE BEGIN 4 */

void EXTI0_1_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
	uint32_t current = HAL_GetTick();
 8001442:	f000 fb97 	bl	8001b74 <HAL_GetTick>
 8001446:	0003      	movs	r3, r0
 8001448:	607b      	str	r3, [r7, #4]
	uint32_t prev = HAL_GetTick();
 800144a:	f000 fb93 	bl	8001b74 <HAL_GetTick>
 800144e:	0003      	movs	r3, r0
 8001450:	603b      	str	r3, [r7, #0]
	if ((current-prev) && GPIO_PIN_0 == 1){
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	429a      	cmp	r2, r3
 8001458:	d004      	beq.n	8001464 <EXTI0_1_IRQHandler+0x28>
		buttonFlag = true;
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <EXTI0_1_IRQHandler+0x38>)
 800145c:	2201      	movs	r2, #1
 800145e:	701a      	strb	r2, [r3, #0]
		prev = current;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	603b      	str	r3, [r7, #0]
	}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0); // Clear interrupt flags
 8001464:	2001      	movs	r0, #1
 8001466:	f000 ffbf 	bl	80023e8 <HAL_GPIO_EXTI_IRQHandler>
}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	46bd      	mov	sp, r7
 800146e:	b002      	add	sp, #8
 8001470:	bd80      	pop	{r7, pc}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	2000016e 	.word	0x2000016e

08001478 <LOT_Receive>:


void LOT_Receive(uint8_t *buffer){
 8001478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147a:	b087      	sub	sp, #28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	GPIO_PinState firstBit = GPIO_PIN_RESET;
 8001480:	2417      	movs	r4, #23
 8001482:	193b      	adds	r3, r7, r4
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
	GPIO_PinState secondBit = GPIO_PIN_RESET;
 8001488:	2316      	movs	r3, #22
 800148a:	18fb      	adds	r3, r7, r3
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
	uint32_t currentTime =0;
 8001490:	2300      	movs	r3, #0
 8001492:	613b      	str	r3, [r7, #16]
	uint32_t startTime =0;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
	startTime = HAL_GetTick();
 8001498:	f000 fb6c 	bl	8001b74 <HAL_GetTick>
 800149c:	0003      	movs	r3, r0
 800149e:	60fb      	str	r3, [r7, #12]

	firstBit = HAL_GPIO_ReadPin(PORT_IN, PIN_IN);
 80014a0:	193c      	adds	r4, r7, r4
 80014a2:	4b30      	ldr	r3, [pc, #192]	; (8001564 <LOT_Receive+0xec>)
 80014a4:	2102      	movs	r1, #2
 80014a6:	0018      	movs	r0, r3
 80014a8:	f000 ff64 	bl	8002374 <HAL_GPIO_ReadPin>
 80014ac:	0003      	movs	r3, r0
 80014ae:	7023      	strb	r3, [r4, #0]

	//wait for first bit
	//timeout of 50s
	while(!firstBit){
 80014b0:	e012      	b.n	80014d8 <LOT_Receive+0x60>
		firstBit = HAL_GPIO_ReadPin(PORT_IN , PIN_IN);
 80014b2:	2317      	movs	r3, #23
 80014b4:	18fc      	adds	r4, r7, r3
 80014b6:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <LOT_Receive+0xec>)
 80014b8:	2102      	movs	r1, #2
 80014ba:	0018      	movs	r0, r3
 80014bc:	f000 ff5a 	bl	8002374 <HAL_GPIO_ReadPin>
 80014c0:	0003      	movs	r3, r0
 80014c2:	7023      	strb	r3, [r4, #0]
		currentTime = HAL_GetTick();
 80014c4:	f000 fb56 	bl	8001b74 <HAL_GetTick>
 80014c8:	0003      	movs	r3, r0
 80014ca:	613b      	str	r3, [r7, #16]
		if(currentTime-startTime > 50000){
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	4a25      	ldr	r2, [pc, #148]	; (8001568 <LOT_Receive+0xf0>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d841      	bhi.n	800155c <LOT_Receive+0xe4>
	while(!firstBit){
 80014d8:	2517      	movs	r5, #23
 80014da:	197b      	adds	r3, r7, r5
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0e7      	beq.n	80014b2 <LOT_Receive+0x3a>
			return;
		}
	}
	HAL_Delay(delayTime*1.5);
 80014e2:	4b22      	ldr	r3, [pc, #136]	; (800156c <LOT_Receive+0xf4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	0018      	movs	r0, r3
 80014e8:	f7ff fcec 	bl	8000ec4 <__aeabi_ui2d>
 80014ec:	2200      	movs	r2, #0
 80014ee:	4b20      	ldr	r3, [pc, #128]	; (8001570 <LOT_Receive+0xf8>)
 80014f0:	f7fe feb4 	bl	800025c <__aeabi_dmul>
 80014f4:	0002      	movs	r2, r0
 80014f6:	000b      	movs	r3, r1
 80014f8:	0010      	movs	r0, r2
 80014fa:	0019      	movs	r1, r3
 80014fc:	f7fe fe90 	bl	8000220 <__aeabi_d2uiz>
 8001500:	0003      	movs	r3, r0
 8001502:	0018      	movs	r0, r3
 8001504:	f000 fb40 	bl	8001b88 <HAL_Delay>
	//read second bit
	secondBit = HAL_GPIO_ReadPin(PORT_IN, PIN_IN);
 8001508:	2616      	movs	r6, #22
 800150a:	19bc      	adds	r4, r7, r6
 800150c:	4b15      	ldr	r3, [pc, #84]	; (8001564 <LOT_Receive+0xec>)
 800150e:	2102      	movs	r1, #2
 8001510:	0018      	movs	r0, r3
 8001512:	f000 ff2f 	bl	8002374 <HAL_GPIO_ReadPin>
 8001516:	0003      	movs	r3, r0
 8001518:	7023      	strb	r3, [r4, #0]
	HAL_Delay(delayTime);
 800151a:	4b14      	ldr	r3, [pc, #80]	; (800156c <LOT_Receive+0xf4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	0018      	movs	r0, r3
 8001520:	f000 fb32 	bl	8001b88 <HAL_Delay>

	//if message is checkpoint
	if (firstBit && secondBit){
 8001524:	197b      	adds	r3, r7, r5
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d008      	beq.n	800153e <LOT_Receive+0xc6>
 800152c:	19bb      	adds	r3, r7, r6
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d004      	beq.n	800153e <LOT_Receive+0xc6>
		ReceiveCheckPoint(buffer);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	0018      	movs	r0, r3
 8001538:	f000 f81c 	bl	8001574 <ReceiveCheckPoint>
 800153c:	e00f      	b.n	800155e <LOT_Receive+0xe6>
	}
	//if message is sample
	else if(firstBit && !secondBit){
 800153e:	2317      	movs	r3, #23
 8001540:	18fb      	adds	r3, r7, r3
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00a      	beq.n	800155e <LOT_Receive+0xe6>
 8001548:	2316      	movs	r3, #22
 800154a:	18fb      	adds	r3, r7, r3
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d105      	bne.n	800155e <LOT_Receive+0xe6>
		ReceiveSample(buffer);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	0018      	movs	r0, r3
 8001556:	f000 f8a3 	bl	80016a0 <ReceiveSample>
 800155a:	e000      	b.n	800155e <LOT_Receive+0xe6>
			return;
 800155c:	46c0      	nop			; (mov r8, r8)
	}

}
 800155e:	46bd      	mov	sp, r7
 8001560:	b007      	add	sp, #28
 8001562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001564:	48000400 	.word	0x48000400
 8001568:	0000c350 	.word	0x0000c350
 800156c:	20000000 	.word	0x20000000
 8001570:	3ff80000 	.word	0x3ff80000

08001574 <ReceiveCheckPoint>:

void ReceiveCheckPoint(uint8_t *buffer){
 8001574:	b5b0      	push	{r4, r5, r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	GPIO_PinState startBit = HAL_GPIO_ReadPin(PORT_IN, PIN_IN);
 800157c:	2317      	movs	r3, #23
 800157e:	18fc      	adds	r4, r7, r3
 8001580:	4b3f      	ldr	r3, [pc, #252]	; (8001680 <ReceiveCheckPoint+0x10c>)
 8001582:	2102      	movs	r1, #2
 8001584:	0018      	movs	r0, r3
 8001586:	f000 fef5 	bl	8002374 <HAL_GPIO_ReadPin>
 800158a:	0003      	movs	r3, r0
 800158c:	7023      	strb	r3, [r4, #0]
	uint8_t bitArray[8] = {0};
 800158e:	2308      	movs	r3, #8
 8001590:	18fb      	adds	r3, r7, r3
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	2200      	movs	r2, #0
 8001598:	605a      	str	r2, [r3, #4]

	while(!startBit){
 800159a:	e008      	b.n	80015ae <ReceiveCheckPoint+0x3a>
		startBit = HAL_GPIO_ReadPin(PORT_IN, PIN_IN);
 800159c:	2317      	movs	r3, #23
 800159e:	18fc      	adds	r4, r7, r3
 80015a0:	4b37      	ldr	r3, [pc, #220]	; (8001680 <ReceiveCheckPoint+0x10c>)
 80015a2:	2102      	movs	r1, #2
 80015a4:	0018      	movs	r0, r3
 80015a6:	f000 fee5 	bl	8002374 <HAL_GPIO_ReadPin>
 80015aa:	0003      	movs	r3, r0
 80015ac:	7023      	strb	r3, [r4, #0]
	while(!startBit){
 80015ae:	2317      	movs	r3, #23
 80015b0:	18fb      	adds	r3, r7, r3
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f1      	beq.n	800159c <ReceiveCheckPoint+0x28>
	}

	HAL_Delay(delayTime*1.1);
 80015b8:	4b32      	ldr	r3, [pc, #200]	; (8001684 <ReceiveCheckPoint+0x110>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	0018      	movs	r0, r3
 80015be:	f7ff fc81 	bl	8000ec4 <__aeabi_ui2d>
 80015c2:	4a31      	ldr	r2, [pc, #196]	; (8001688 <ReceiveCheckPoint+0x114>)
 80015c4:	4b31      	ldr	r3, [pc, #196]	; (800168c <ReceiveCheckPoint+0x118>)
 80015c6:	f7fe fe49 	bl	800025c <__aeabi_dmul>
 80015ca:	0002      	movs	r2, r0
 80015cc:	000b      	movs	r3, r1
 80015ce:	0010      	movs	r0, r2
 80015d0:	0019      	movs	r1, r3
 80015d2:	f7fe fe25 	bl	8000220 <__aeabi_d2uiz>
 80015d6:	0003      	movs	r3, r0
 80015d8:	0018      	movs	r0, r3
 80015da:	f000 fad5 	bl	8001b88 <HAL_Delay>
	for (uint8_t i = 0; i< 8;i++){
 80015de:	2316      	movs	r3, #22
 80015e0:	18fb      	adds	r3, r7, r3
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
 80015e6:	e021      	b.n	800162c <ReceiveCheckPoint+0xb8>
		bitArray[i] = HAL_GPIO_ReadPin(PORT_IN, PIN_IN);
 80015e8:	2516      	movs	r5, #22
 80015ea:	197b      	adds	r3, r7, r5
 80015ec:	781c      	ldrb	r4, [r3, #0]
 80015ee:	4b24      	ldr	r3, [pc, #144]	; (8001680 <ReceiveCheckPoint+0x10c>)
 80015f0:	2102      	movs	r1, #2
 80015f2:	0018      	movs	r0, r3
 80015f4:	f000 febe 	bl	8002374 <HAL_GPIO_ReadPin>
 80015f8:	0003      	movs	r3, r0
 80015fa:	001a      	movs	r2, r3
 80015fc:	2308      	movs	r3, #8
 80015fe:	18fb      	adds	r3, r7, r3
 8001600:	551a      	strb	r2, [r3, r4]
		buffer[i] = HAL_GPIO_ReadPin(PORT_IN, PIN_IN);
 8001602:	197b      	adds	r3, r7, r5
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	18d4      	adds	r4, r2, r3
 800160a:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <ReceiveCheckPoint+0x10c>)
 800160c:	2102      	movs	r1, #2
 800160e:	0018      	movs	r0, r3
 8001610:	f000 feb0 	bl	8002374 <HAL_GPIO_ReadPin>
 8001614:	0003      	movs	r3, r0
 8001616:	7023      	strb	r3, [r4, #0]
		HAL_Delay(delayTime);
 8001618:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <ReceiveCheckPoint+0x110>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	0018      	movs	r0, r3
 800161e:	f000 fab3 	bl	8001b88 <HAL_Delay>
	for (uint8_t i = 0; i< 8;i++){
 8001622:	197b      	adds	r3, r7, r5
 8001624:	781a      	ldrb	r2, [r3, #0]
 8001626:	197b      	adds	r3, r7, r5
 8001628:	3201      	adds	r2, #1
 800162a:	701a      	strb	r2, [r3, #0]
 800162c:	2316      	movs	r3, #22
 800162e:	18fb      	adds	r3, r7, r3
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b07      	cmp	r3, #7
 8001634:	d9d8      	bls.n	80015e8 <ReceiveCheckPoint+0x74>
	}

	uint32_t val = bitsToDec(bitArray,8);
 8001636:	2308      	movs	r3, #8
 8001638:	18fb      	adds	r3, r7, r3
 800163a:	2108      	movs	r1, #8
 800163c:	0018      	movs	r0, r3
 800163e:	f000 f8dd 	bl	80017fc <bitsToDec>
 8001642:	0003      	movs	r3, r0
 8001644:	613b      	str	r3, [r7, #16]

	if (val == numSamples){
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <ReceiveCheckPoint+0x11c>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	001a      	movs	r2, r3
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	4293      	cmp	r3, r2
 8001650:	d107      	bne.n	8001662 <ReceiveCheckPoint+0xee>
		HAL_UART_Transmit(&huart2, "No missing samples \n", 20, 1000);
 8001652:	23fa      	movs	r3, #250	; 0xfa
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	490f      	ldr	r1, [pc, #60]	; (8001694 <ReceiveCheckPoint+0x120>)
 8001658:	480f      	ldr	r0, [pc, #60]	; (8001698 <ReceiveCheckPoint+0x124>)
 800165a:	2214      	movs	r2, #20
 800165c:	f001 fbaa 	bl	8002db4 <HAL_UART_Transmit>
	{
		numSamples = val;
		HAL_UART_Transmit(&huart2, "Missing Samples \n", 20, 1000);
	}

}
 8001660:	e00a      	b.n	8001678 <ReceiveCheckPoint+0x104>
		numSamples = val;
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <ReceiveCheckPoint+0x11c>)
 8001668:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, "Missing Samples \n", 20, 1000);
 800166a:	23fa      	movs	r3, #250	; 0xfa
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	490b      	ldr	r1, [pc, #44]	; (800169c <ReceiveCheckPoint+0x128>)
 8001670:	4809      	ldr	r0, [pc, #36]	; (8001698 <ReceiveCheckPoint+0x124>)
 8001672:	2214      	movs	r2, #20
 8001674:	f001 fb9e 	bl	8002db4 <HAL_UART_Transmit>
}
 8001678:	46c0      	nop			; (mov r8, r8)
 800167a:	46bd      	mov	sp, r7
 800167c:	b006      	add	sp, #24
 800167e:	bdb0      	pop	{r4, r5, r7, pc}
 8001680:	48000400 	.word	0x48000400
 8001684:	20000000 	.word	0x20000000
 8001688:	9999999a 	.word	0x9999999a
 800168c:	3ff19999 	.word	0x3ff19999
 8001690:	20000138 	.word	0x20000138
 8001694:	08003cb8 	.word	0x08003cb8
 8001698:	2000002c 	.word	0x2000002c
 800169c:	08003cd0 	.word	0x08003cd0

080016a0 <ReceiveSample>:

void ReceiveSample(uint8_t *buffer){
 80016a0:	b5b0      	push	{r4, r5, r7, lr}
 80016a2:	b090      	sub	sp, #64	; 0x40
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	uint32_t currentTime =0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t startTime =0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t bitArray[32] = {0};
 80016b0:	230c      	movs	r3, #12
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	3304      	adds	r3, #4
 80016ba:	221c      	movs	r2, #28
 80016bc:	2100      	movs	r1, #0
 80016be:	0018      	movs	r0, r3
 80016c0:	f002 fae6 	bl	8003c90 <memset>
	GPIO_PinState startBit = HAL_GPIO_ReadPin(PORT_IN, PIN_IN);  //read start bit
 80016c4:	233f      	movs	r3, #63	; 0x3f
 80016c6:	18fc      	adds	r4, r7, r3
 80016c8:	4b48      	ldr	r3, [pc, #288]	; (80017ec <ReceiveSample+0x14c>)
 80016ca:	2102      	movs	r1, #2
 80016cc:	0018      	movs	r0, r3
 80016ce:	f000 fe51 	bl	8002374 <HAL_GPIO_ReadPin>
 80016d2:	0003      	movs	r3, r0
 80016d4:	7023      	strb	r3, [r4, #0]
	GPIO_PinState tempBit = GPIO_PIN_RESET;
 80016d6:	2333      	movs	r3, #51	; 0x33
 80016d8:	18fb      	adds	r3, r7, r3
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
	startTime = HAL_GetTick();
 80016de:	f000 fa49 	bl	8001b74 <HAL_GetTick>
 80016e2:	0003      	movs	r3, r0
 80016e4:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t countPackets = 0;
 80016e6:	233e      	movs	r3, #62	; 0x3e
 80016e8:	18fb      	adds	r3, r7, r3
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]

	//Timeout 50s
	//loop until startBit is 1
	while(!startBit){
 80016ee:	e012      	b.n	8001716 <ReceiveSample+0x76>
		//increment timer
		currentTime = HAL_GetTick();
 80016f0:	f000 fa40 	bl	8001b74 <HAL_GetTick>
 80016f4:	0003      	movs	r3, r0
 80016f6:	63bb      	str	r3, [r7, #56]	; 0x38
		if (currentTime -startTime >50000){
 80016f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	4a3c      	ldr	r2, [pc, #240]	; (80017f0 <ReceiveSample+0x150>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d86e      	bhi.n	80017e2 <ReceiveSample+0x142>
			return;
		}
		startBit = HAL_GPIO_ReadPin(PORT_IN , PIN_IN);
 8001704:	233f      	movs	r3, #63	; 0x3f
 8001706:	18fc      	adds	r4, r7, r3
 8001708:	4b38      	ldr	r3, [pc, #224]	; (80017ec <ReceiveSample+0x14c>)
 800170a:	2102      	movs	r1, #2
 800170c:	0018      	movs	r0, r3
 800170e:	f000 fe31 	bl	8002374 <HAL_GPIO_ReadPin>
 8001712:	0003      	movs	r3, r0
 8001714:	7023      	strb	r3, [r4, #0]
	while(!startBit){
 8001716:	233f      	movs	r3, #63	; 0x3f
 8001718:	18fb      	adds	r3, r7, r3
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0e7      	beq.n	80016f0 <ReceiveSample+0x50>
	}
	//delay*1.5 so polling is at middle of wave
	HAL_Delay(delayTime*1);
 8001720:	4b34      	ldr	r3, [pc, #208]	; (80017f4 <ReceiveSample+0x154>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	0018      	movs	r0, r3
 8001726:	f000 fa2f 	bl	8001b88 <HAL_Delay>

	//read data packets
	while (startBit){
 800172a:	e046      	b.n	80017ba <ReceiveSample+0x11a>
		for (uint8_t i = (countPackets*8);i<(countPackets*8+8);i++){
 800172c:	233d      	movs	r3, #61	; 0x3d
 800172e:	18fb      	adds	r3, r7, r3
 8001730:	223e      	movs	r2, #62	; 0x3e
 8001732:	18ba      	adds	r2, r7, r2
 8001734:	7812      	ldrb	r2, [r2, #0]
 8001736:	00d2      	lsls	r2, r2, #3
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	e021      	b.n	8001780 <ReceiveSample+0xe0>
			tempBit =  HAL_GPIO_ReadPin(PORT_IN, PIN_IN);
 800173c:	2533      	movs	r5, #51	; 0x33
 800173e:	197c      	adds	r4, r7, r5
 8001740:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <ReceiveSample+0x14c>)
 8001742:	2102      	movs	r1, #2
 8001744:	0018      	movs	r0, r3
 8001746:	f000 fe15 	bl	8002374 <HAL_GPIO_ReadPin>
 800174a:	0003      	movs	r3, r0
 800174c:	7023      	strb	r3, [r4, #0]
			bitArray[i] = tempBit;
 800174e:	243d      	movs	r4, #61	; 0x3d
 8001750:	193b      	adds	r3, r7, r4
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	220c      	movs	r2, #12
 8001756:	18ba      	adds	r2, r7, r2
 8001758:	1979      	adds	r1, r7, r5
 800175a:	7809      	ldrb	r1, [r1, #0]
 800175c:	54d1      	strb	r1, [r2, r3]
			buffer[i] = tempBit;
 800175e:	193b      	adds	r3, r7, r4
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	18d3      	adds	r3, r2, r3
 8001766:	197a      	adds	r2, r7, r5
 8001768:	7812      	ldrb	r2, [r2, #0]
 800176a:	701a      	strb	r2, [r3, #0]
			HAL_Delay(delayTime);
 800176c:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <ReceiveSample+0x154>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	0018      	movs	r0, r3
 8001772:	f000 fa09 	bl	8001b88 <HAL_Delay>
		for (uint8_t i = (countPackets*8);i<(countPackets*8+8);i++){
 8001776:	193b      	adds	r3, r7, r4
 8001778:	781a      	ldrb	r2, [r3, #0]
 800177a:	193b      	adds	r3, r7, r4
 800177c:	3201      	adds	r2, #1
 800177e:	701a      	strb	r2, [r3, #0]
 8001780:	233d      	movs	r3, #61	; 0x3d
 8001782:	18fb      	adds	r3, r7, r3
 8001784:	781a      	ldrb	r2, [r3, #0]
 8001786:	253e      	movs	r5, #62	; 0x3e
 8001788:	197b      	adds	r3, r7, r5
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	3301      	adds	r3, #1
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	429a      	cmp	r2, r3
 8001792:	dbd3      	blt.n	800173c <ReceiveSample+0x9c>
		}
		//read start/stop bit
		startBit = HAL_GPIO_ReadPin(PORT_IN, PIN_IN);
 8001794:	233f      	movs	r3, #63	; 0x3f
 8001796:	18fc      	adds	r4, r7, r3
 8001798:	4b14      	ldr	r3, [pc, #80]	; (80017ec <ReceiveSample+0x14c>)
 800179a:	2102      	movs	r1, #2
 800179c:	0018      	movs	r0, r3
 800179e:	f000 fde9 	bl	8002374 <HAL_GPIO_ReadPin>
 80017a2:	0003      	movs	r3, r0
 80017a4:	7023      	strb	r3, [r4, #0]
		countPackets++;
 80017a6:	197b      	adds	r3, r7, r5
 80017a8:	781a      	ldrb	r2, [r3, #0]
 80017aa:	197b      	adds	r3, r7, r5
 80017ac:	3201      	adds	r2, #1
 80017ae:	701a      	strb	r2, [r3, #0]
		HAL_Delay(delayTime);
 80017b0:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <ReceiveSample+0x154>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	0018      	movs	r0, r3
 80017b6:	f000 f9e7 	bl	8001b88 <HAL_Delay>
	while (startBit){
 80017ba:	233f      	movs	r3, #63	; 0x3f
 80017bc:	18fb      	adds	r3, r7, r3
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1b3      	bne.n	800172c <ReceiveSample+0x8c>
	}
	uint32_t val = bitsToDec(bitArray,32);
 80017c4:	230c      	movs	r3, #12
 80017c6:	18fb      	adds	r3, r7, r3
 80017c8:	2120      	movs	r1, #32
 80017ca:	0018      	movs	r0, r3
 80017cc:	f000 f816 	bl	80017fc <bitsToDec>
 80017d0:	0003      	movs	r3, r0
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	numSamples++;
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <ReceiveSample+0x158>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	3301      	adds	r3, #1
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <ReceiveSample+0x158>)
 80017de:	701a      	strb	r2, [r3, #0]
 80017e0:	e000      	b.n	80017e4 <ReceiveSample+0x144>
			return;
 80017e2:	46c0      	nop			; (mov r8, r8)
	//HAL_UART_Transmit(&huart2, bitArray,32, 1000);
}
 80017e4:	46bd      	mov	sp, r7
 80017e6:	b010      	add	sp, #64	; 0x40
 80017e8:	bdb0      	pop	{r4, r5, r7, pc}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	48000400 	.word	0x48000400
 80017f0:	0000c350 	.word	0x0000c350
 80017f4:	20000000 	.word	0x20000000
 80017f8:	20000138 	.word	0x20000138

080017fc <bitsToDec>:

uint32_t bitsToDec(uint8_t bits[],uint8_t length){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	000a      	movs	r2, r1
 8001806:	1cfb      	adds	r3, r7, #3
 8001808:	701a      	strb	r2, [r3, #0]
	uint32_t multiplier = 1;
 800180a:	2301      	movs	r3, #1
 800180c:	617b      	str	r3, [r7, #20]
	uint32_t value = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]

	for(int i =0;i<length;i++){
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	e00f      	b.n	8001838 <bitsToDec+0x3c>
		value += (bits[i] * multiplier);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	18d3      	adds	r3, r2, r3
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	001a      	movs	r2, r3
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	4353      	muls	r3, r2
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	18d3      	adds	r3, r2, r3
 800182a:	613b      	str	r3, [r7, #16]
		multiplier *= 2;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	617b      	str	r3, [r7, #20]
	for(int i =0;i<length;i++){
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3301      	adds	r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	1cfb      	adds	r3, r7, #3
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	429a      	cmp	r2, r3
 8001840:	dbea      	blt.n	8001818 <bitsToDec+0x1c>
	}
	return value;
 8001842:	693b      	ldr	r3, [r7, #16]
}
 8001844:	0018      	movs	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	b006      	add	sp, #24
 800184a:	bd80      	pop	{r7, pc}

0800184c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001850:	b672      	cpsid	i
}
 8001852:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001854:	e7fe      	b.n	8001854 <Error_Handler+0x8>
	...

08001858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <HAL_MspInit+0x44>)
 8001860:	699a      	ldr	r2, [r3, #24]
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_MspInit+0x44>)
 8001864:	2101      	movs	r1, #1
 8001866:	430a      	orrs	r2, r1
 8001868:	619a      	str	r2, [r3, #24]
 800186a:	4b0c      	ldr	r3, [pc, #48]	; (800189c <HAL_MspInit+0x44>)
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	2201      	movs	r2, #1
 8001870:	4013      	ands	r3, r2
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_MspInit+0x44>)
 8001878:	69da      	ldr	r2, [r3, #28]
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <HAL_MspInit+0x44>)
 800187c:	2180      	movs	r1, #128	; 0x80
 800187e:	0549      	lsls	r1, r1, #21
 8001880:	430a      	orrs	r2, r1
 8001882:	61da      	str	r2, [r3, #28]
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <HAL_MspInit+0x44>)
 8001886:	69da      	ldr	r2, [r3, #28]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	055b      	lsls	r3, r3, #21
 800188c:	4013      	ands	r3, r2
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	46bd      	mov	sp, r7
 8001896:	b002      	add	sp, #8
 8001898:	bd80      	pop	{r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	40021000 	.word	0x40021000

080018a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b08b      	sub	sp, #44	; 0x2c
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	2414      	movs	r4, #20
 80018aa:	193b      	adds	r3, r7, r4
 80018ac:	0018      	movs	r0, r3
 80018ae:	2314      	movs	r3, #20
 80018b0:	001a      	movs	r2, r3
 80018b2:	2100      	movs	r1, #0
 80018b4:	f002 f9ec 	bl	8003c90 <memset>
  if(huart->Instance==USART2)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a47      	ldr	r2, [pc, #284]	; (80019dc <HAL_UART_MspInit+0x13c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d000      	beq.n	80018c4 <HAL_UART_MspInit+0x24>
 80018c2:	e086      	b.n	80019d2 <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018c4:	4b46      	ldr	r3, [pc, #280]	; (80019e0 <HAL_UART_MspInit+0x140>)
 80018c6:	69da      	ldr	r2, [r3, #28]
 80018c8:	4b45      	ldr	r3, [pc, #276]	; (80019e0 <HAL_UART_MspInit+0x140>)
 80018ca:	2180      	movs	r1, #128	; 0x80
 80018cc:	0289      	lsls	r1, r1, #10
 80018ce:	430a      	orrs	r2, r1
 80018d0:	61da      	str	r2, [r3, #28]
 80018d2:	4b43      	ldr	r3, [pc, #268]	; (80019e0 <HAL_UART_MspInit+0x140>)
 80018d4:	69da      	ldr	r2, [r3, #28]
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	029b      	lsls	r3, r3, #10
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e0:	4b3f      	ldr	r3, [pc, #252]	; (80019e0 <HAL_UART_MspInit+0x140>)
 80018e2:	695a      	ldr	r2, [r3, #20]
 80018e4:	4b3e      	ldr	r3, [pc, #248]	; (80019e0 <HAL_UART_MspInit+0x140>)
 80018e6:	2180      	movs	r1, #128	; 0x80
 80018e8:	0289      	lsls	r1, r1, #10
 80018ea:	430a      	orrs	r2, r1
 80018ec:	615a      	str	r2, [r3, #20]
 80018ee:	4b3c      	ldr	r3, [pc, #240]	; (80019e0 <HAL_UART_MspInit+0x140>)
 80018f0:	695a      	ldr	r2, [r3, #20]
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	029b      	lsls	r3, r3, #10
 80018f6:	4013      	ands	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018fc:	0021      	movs	r1, r4
 80018fe:	187b      	adds	r3, r7, r1
 8001900:	220c      	movs	r2, #12
 8001902:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	187b      	adds	r3, r7, r1
 8001906:	2202      	movs	r2, #2
 8001908:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	187b      	adds	r3, r7, r1
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001910:	187b      	adds	r3, r7, r1
 8001912:	2203      	movs	r2, #3
 8001914:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001916:	187b      	adds	r3, r7, r1
 8001918:	2201      	movs	r2, #1
 800191a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	187a      	adds	r2, r7, r1
 800191e:	2390      	movs	r3, #144	; 0x90
 8001920:	05db      	lsls	r3, r3, #23
 8001922:	0011      	movs	r1, r2
 8001924:	0018      	movs	r0, r3
 8001926:	f000 fbb5 	bl	8002094 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 800192a:	4b2e      	ldr	r3, [pc, #184]	; (80019e4 <HAL_UART_MspInit+0x144>)
 800192c:	4a2e      	ldr	r2, [pc, #184]	; (80019e8 <HAL_UART_MspInit+0x148>)
 800192e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001930:	4b2c      	ldr	r3, [pc, #176]	; (80019e4 <HAL_UART_MspInit+0x144>)
 8001932:	2200      	movs	r2, #0
 8001934:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001936:	4b2b      	ldr	r3, [pc, #172]	; (80019e4 <HAL_UART_MspInit+0x144>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800193c:	4b29      	ldr	r3, [pc, #164]	; (80019e4 <HAL_UART_MspInit+0x144>)
 800193e:	2280      	movs	r2, #128	; 0x80
 8001940:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001942:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <HAL_UART_MspInit+0x144>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001948:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <HAL_UART_MspInit+0x144>)
 800194a:	2200      	movs	r2, #0
 800194c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800194e:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <HAL_UART_MspInit+0x144>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001954:	4b23      	ldr	r3, [pc, #140]	; (80019e4 <HAL_UART_MspInit+0x144>)
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800195a:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <HAL_UART_MspInit+0x144>)
 800195c:	0018      	movs	r0, r3
 800195e:	f000 fa15 	bl	8001d8c <HAL_DMA_Init>
 8001962:	1e03      	subs	r3, r0, #0
 8001964:	d001      	beq.n	800196a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001966:	f7ff ff71 	bl	800184c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a1d      	ldr	r2, [pc, #116]	; (80019e4 <HAL_UART_MspInit+0x144>)
 800196e:	671a      	str	r2, [r3, #112]	; 0x70
 8001970:	4b1c      	ldr	r3, [pc, #112]	; (80019e4 <HAL_UART_MspInit+0x144>)
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8001976:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <HAL_UART_MspInit+0x14c>)
 8001978:	4a1d      	ldr	r2, [pc, #116]	; (80019f0 <HAL_UART_MspInit+0x150>)
 800197a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800197c:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <HAL_UART_MspInit+0x14c>)
 800197e:	2210      	movs	r2, #16
 8001980:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001982:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <HAL_UART_MspInit+0x14c>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001988:	4b18      	ldr	r3, [pc, #96]	; (80019ec <HAL_UART_MspInit+0x14c>)
 800198a:	2280      	movs	r2, #128	; 0x80
 800198c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <HAL_UART_MspInit+0x14c>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001994:	4b15      	ldr	r3, [pc, #84]	; (80019ec <HAL_UART_MspInit+0x14c>)
 8001996:	2200      	movs	r2, #0
 8001998:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800199a:	4b14      	ldr	r3, [pc, #80]	; (80019ec <HAL_UART_MspInit+0x14c>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_UART_MspInit+0x14c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <HAL_UART_MspInit+0x14c>)
 80019a8:	0018      	movs	r0, r3
 80019aa:	f000 f9ef 	bl	8001d8c <HAL_DMA_Init>
 80019ae:	1e03      	subs	r3, r0, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 80019b2:	f7ff ff4b 	bl	800184c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a0c      	ldr	r2, [pc, #48]	; (80019ec <HAL_UART_MspInit+0x14c>)
 80019ba:	66da      	str	r2, [r3, #108]	; 0x6c
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <HAL_UART_MspInit+0x14c>)
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2100      	movs	r1, #0
 80019c6:	201c      	movs	r0, #28
 80019c8:	f000 f9ae 	bl	8001d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019cc:	201c      	movs	r0, #28
 80019ce:	f000 f9c0 	bl	8001d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b00b      	add	sp, #44	; 0x2c
 80019d8:	bd90      	pop	{r4, r7, pc}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	40004400 	.word	0x40004400
 80019e0:	40021000 	.word	0x40021000
 80019e4:	200000b0 	.word	0x200000b0
 80019e8:	40020058 	.word	0x40020058
 80019ec:	200000f4 	.word	0x200000f4
 80019f0:	40020044 	.word	0x40020044

080019f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <NMI_Handler+0x4>

080019fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <HardFault_Handler+0x4>

08001a00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a04:	46c0      	nop			; (mov r8, r8)
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a18:	f000 f89a 	bl	8001b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a1c:	46c0      	nop			; (mov r8, r8)
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <DMA1_Channel4_5_IRQHandler+0x1c>)
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f000 fa73 	bl	8001f16 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <DMA1_Channel4_5_IRQHandler+0x20>)
 8001a32:	0018      	movs	r0, r3
 8001a34:	f000 fa6f 	bl	8001f16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8001a38:	46c0      	nop			; (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	200000f4 	.word	0x200000f4
 8001a44:	200000b0 	.word	0x200000b0

08001a48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <USART2_IRQHandler+0x14>)
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f001 fa5a 	bl	8002f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a54:	46c0      	nop			; (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	2000002c 	.word	0x2000002c

08001a60 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001a64:	46c0      	nop			; (mov r8, r8)
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 8001a6c:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a6e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a70:	480d      	ldr	r0, [pc, #52]	; (8001aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a72:	490e      	ldr	r1, [pc, #56]	; (8001aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a74:	4a0e      	ldr	r2, [pc, #56]	; (8001ab0 <LoopForever+0xe>)
  movs r3, #0
 8001a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a78:	e002      	b.n	8001a80 <LoopCopyDataInit>

08001a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7e:	3304      	adds	r3, #4

08001a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a84:	d3f9      	bcc.n	8001a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a86:	4a0b      	ldr	r2, [pc, #44]	; (8001ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a88:	4c0b      	ldr	r4, [pc, #44]	; (8001ab8 <LoopForever+0x16>)
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a8c:	e001      	b.n	8001a92 <LoopFillZerobss>

08001a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a90:	3204      	adds	r2, #4

08001a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a94:	d3fb      	bcc.n	8001a8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a96:	f7ff ffe3 	bl	8001a60 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001a9a:	f002 f8d5 	bl	8003c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a9e:	f7ff fb9f 	bl	80011e0 <main>

08001aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8001aa2:	e7fe      	b.n	8001aa2 <LoopForever>
  ldr   r0, =_estack
 8001aa4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aac:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001ab0:	08003d64 	.word	0x08003d64
  ldr r2, =_sbss
 8001ab4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001ab8:	20000174 	.word	0x20000174

08001abc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC1_COMP_IRQHandler>
	...

08001ac0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <HAL_Init+0x24>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_Init+0x24>)
 8001aca:	2110      	movs	r1, #16
 8001acc:	430a      	orrs	r2, r1
 8001ace:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f000 f809 	bl	8001ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad6:	f7ff febf 	bl	8001858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	0018      	movs	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	40022000 	.word	0x40022000

08001ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af0:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <HAL_InitTick+0x5c>)
 8001af2:	681c      	ldr	r4, [r3, #0]
 8001af4:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <HAL_InitTick+0x60>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	0019      	movs	r1, r3
 8001afa:	23fa      	movs	r3, #250	; 0xfa
 8001afc:	0098      	lsls	r0, r3, #2
 8001afe:	f7fe fb03 	bl	8000108 <__udivsi3>
 8001b02:	0003      	movs	r3, r0
 8001b04:	0019      	movs	r1, r3
 8001b06:	0020      	movs	r0, r4
 8001b08:	f7fe fafe 	bl	8000108 <__udivsi3>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f000 f92f 	bl	8001d72 <HAL_SYSTICK_Config>
 8001b14:	1e03      	subs	r3, r0, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e00f      	b.n	8001b3c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d80b      	bhi.n	8001b3a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	2301      	movs	r3, #1
 8001b26:	425b      	negs	r3, r3
 8001b28:	2200      	movs	r2, #0
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f000 f8fc 	bl	8001d28 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_InitTick+0x64>)
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b003      	add	sp, #12
 8001b42:	bd90      	pop	{r4, r7, pc}
 8001b44:	20000004 	.word	0x20000004
 8001b48:	2000000c 	.word	0x2000000c
 8001b4c:	20000008 	.word	0x20000008

08001b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_IncTick+0x1c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	001a      	movs	r2, r3
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_IncTick+0x20>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	18d2      	adds	r2, r2, r3
 8001b60:	4b03      	ldr	r3, [pc, #12]	; (8001b70 <HAL_IncTick+0x20>)
 8001b62:	601a      	str	r2, [r3, #0]
}
 8001b64:	46c0      	nop			; (mov r8, r8)
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	2000000c 	.word	0x2000000c
 8001b70:	20000170 	.word	0x20000170

08001b74 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  return uwTick;
 8001b78:	4b02      	ldr	r3, [pc, #8]	; (8001b84 <HAL_GetTick+0x10>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	20000170 	.word	0x20000170

08001b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b90:	f7ff fff0 	bl	8001b74 <HAL_GetTick>
 8001b94:	0003      	movs	r3, r0
 8001b96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	d005      	beq.n	8001bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <HAL_Delay+0x44>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	001a      	movs	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	189b      	adds	r3, r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	f7ff ffe0 	bl	8001b74 <HAL_GetTick>
 8001bb4:	0002      	movs	r2, r0
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d8f7      	bhi.n	8001bb0 <HAL_Delay+0x28>
  {
  }
}
 8001bc0:	46c0      	nop			; (mov r8, r8)
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	b004      	add	sp, #16
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	2000000c 	.word	0x2000000c

08001bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	1dfb      	adds	r3, r7, #7
 8001bda:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bdc:	1dfb      	adds	r3, r7, #7
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b7f      	cmp	r3, #127	; 0x7f
 8001be2:	d809      	bhi.n	8001bf8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be4:	1dfb      	adds	r3, r7, #7
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	001a      	movs	r2, r3
 8001bea:	231f      	movs	r3, #31
 8001bec:	401a      	ands	r2, r3
 8001bee:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <__NVIC_EnableIRQ+0x30>)
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	4091      	lsls	r1, r2
 8001bf4:	000a      	movs	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]
  }
}
 8001bf8:	46c0      	nop			; (mov r8, r8)
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b002      	add	sp, #8
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	e000e100 	.word	0xe000e100

08001c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c04:	b590      	push	{r4, r7, lr}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	0002      	movs	r2, r0
 8001c0c:	6039      	str	r1, [r7, #0]
 8001c0e:	1dfb      	adds	r3, r7, #7
 8001c10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c12:	1dfb      	adds	r3, r7, #7
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b7f      	cmp	r3, #127	; 0x7f
 8001c18:	d828      	bhi.n	8001c6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c1a:	4a2f      	ldr	r2, [pc, #188]	; (8001cd8 <__NVIC_SetPriority+0xd4>)
 8001c1c:	1dfb      	adds	r3, r7, #7
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	b25b      	sxtb	r3, r3
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	33c0      	adds	r3, #192	; 0xc0
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	589b      	ldr	r3, [r3, r2]
 8001c2a:	1dfa      	adds	r2, r7, #7
 8001c2c:	7812      	ldrb	r2, [r2, #0]
 8001c2e:	0011      	movs	r1, r2
 8001c30:	2203      	movs	r2, #3
 8001c32:	400a      	ands	r2, r1
 8001c34:	00d2      	lsls	r2, r2, #3
 8001c36:	21ff      	movs	r1, #255	; 0xff
 8001c38:	4091      	lsls	r1, r2
 8001c3a:	000a      	movs	r2, r1
 8001c3c:	43d2      	mvns	r2, r2
 8001c3e:	401a      	ands	r2, r3
 8001c40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	019b      	lsls	r3, r3, #6
 8001c46:	22ff      	movs	r2, #255	; 0xff
 8001c48:	401a      	ands	r2, r3
 8001c4a:	1dfb      	adds	r3, r7, #7
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	0018      	movs	r0, r3
 8001c50:	2303      	movs	r3, #3
 8001c52:	4003      	ands	r3, r0
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c58:	481f      	ldr	r0, [pc, #124]	; (8001cd8 <__NVIC_SetPriority+0xd4>)
 8001c5a:	1dfb      	adds	r3, r7, #7
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	b25b      	sxtb	r3, r3
 8001c60:	089b      	lsrs	r3, r3, #2
 8001c62:	430a      	orrs	r2, r1
 8001c64:	33c0      	adds	r3, #192	; 0xc0
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c6a:	e031      	b.n	8001cd0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c6c:	4a1b      	ldr	r2, [pc, #108]	; (8001cdc <__NVIC_SetPriority+0xd8>)
 8001c6e:	1dfb      	adds	r3, r7, #7
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	0019      	movs	r1, r3
 8001c74:	230f      	movs	r3, #15
 8001c76:	400b      	ands	r3, r1
 8001c78:	3b08      	subs	r3, #8
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	3306      	adds	r3, #6
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	18d3      	adds	r3, r2, r3
 8001c82:	3304      	adds	r3, #4
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	1dfa      	adds	r2, r7, #7
 8001c88:	7812      	ldrb	r2, [r2, #0]
 8001c8a:	0011      	movs	r1, r2
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	400a      	ands	r2, r1
 8001c90:	00d2      	lsls	r2, r2, #3
 8001c92:	21ff      	movs	r1, #255	; 0xff
 8001c94:	4091      	lsls	r1, r2
 8001c96:	000a      	movs	r2, r1
 8001c98:	43d2      	mvns	r2, r2
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	019b      	lsls	r3, r3, #6
 8001ca2:	22ff      	movs	r2, #255	; 0xff
 8001ca4:	401a      	ands	r2, r3
 8001ca6:	1dfb      	adds	r3, r7, #7
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	0018      	movs	r0, r3
 8001cac:	2303      	movs	r3, #3
 8001cae:	4003      	ands	r3, r0
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cb4:	4809      	ldr	r0, [pc, #36]	; (8001cdc <__NVIC_SetPriority+0xd8>)
 8001cb6:	1dfb      	adds	r3, r7, #7
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	001c      	movs	r4, r3
 8001cbc:	230f      	movs	r3, #15
 8001cbe:	4023      	ands	r3, r4
 8001cc0:	3b08      	subs	r3, #8
 8001cc2:	089b      	lsrs	r3, r3, #2
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	3306      	adds	r3, #6
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	18c3      	adds	r3, r0, r3
 8001ccc:	3304      	adds	r3, #4
 8001cce:	601a      	str	r2, [r3, #0]
}
 8001cd0:	46c0      	nop			; (mov r8, r8)
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	b003      	add	sp, #12
 8001cd6:	bd90      	pop	{r4, r7, pc}
 8001cd8:	e000e100 	.word	0xe000e100
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	1e5a      	subs	r2, r3, #1
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	045b      	lsls	r3, r3, #17
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d301      	bcc.n	8001cf8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e010      	b.n	8001d1a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <SysTick_Config+0x44>)
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	3a01      	subs	r2, #1
 8001cfe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d00:	2301      	movs	r3, #1
 8001d02:	425b      	negs	r3, r3
 8001d04:	2103      	movs	r1, #3
 8001d06:	0018      	movs	r0, r3
 8001d08:	f7ff ff7c 	bl	8001c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <SysTick_Config+0x44>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d12:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <SysTick_Config+0x44>)
 8001d14:	2207      	movs	r2, #7
 8001d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b002      	add	sp, #8
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	e000e010 	.word	0xe000e010

08001d28 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
 8001d32:	210f      	movs	r1, #15
 8001d34:	187b      	adds	r3, r7, r1
 8001d36:	1c02      	adds	r2, r0, #0
 8001d38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	187b      	adds	r3, r7, r1
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	b25b      	sxtb	r3, r3
 8001d42:	0011      	movs	r1, r2
 8001d44:	0018      	movs	r0, r3
 8001d46:	f7ff ff5d 	bl	8001c04 <__NVIC_SetPriority>
}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	b004      	add	sp, #16
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	0002      	movs	r2, r0
 8001d5a:	1dfb      	adds	r3, r7, #7
 8001d5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d5e:	1dfb      	adds	r3, r7, #7
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	b25b      	sxtb	r3, r3
 8001d64:	0018      	movs	r0, r3
 8001d66:	f7ff ff33 	bl	8001bd0 <__NVIC_EnableIRQ>
}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	b002      	add	sp, #8
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	f7ff ffaf 	bl	8001ce0 <SysTick_Config>
 8001d82:	0003      	movs	r3, r0
}
 8001d84:	0018      	movs	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b002      	add	sp, #8
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e036      	b.n	8001e10 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2221      	movs	r2, #33	; 0x21
 8001da6:	2102      	movs	r1, #2
 8001da8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4a18      	ldr	r2, [pc, #96]	; (8001e18 <HAL_DMA_Init+0x8c>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	0018      	movs	r0, r3
 8001df4:	f000 f932 	bl	800205c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2221      	movs	r2, #33	; 0x21
 8001e02:	2101      	movs	r1, #1
 8001e04:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2220      	movs	r2, #32
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}  
 8001e10:	0018      	movs	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	b004      	add	sp, #16
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	ffffc00f 	.word	0xffffc00f

08001e1c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2221      	movs	r2, #33	; 0x21
 8001e28:	5c9b      	ldrb	r3, [r3, r2]
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d008      	beq.n	8001e42 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2204      	movs	r2, #4
 8001e34:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2220      	movs	r2, #32
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e020      	b.n	8001e84 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	210e      	movs	r1, #14
 8001e4e:	438a      	bics	r2, r1
 8001e50:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	438a      	bics	r2, r1
 8001e60:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	4091      	lsls	r1, r2
 8001e6e:	000a      	movs	r2, r1
 8001e70:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2221      	movs	r2, #33	; 0x21
 8001e76:	2101      	movs	r1, #1
 8001e78:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	2100      	movs	r1, #0
 8001e80:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	0018      	movs	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b002      	add	sp, #8
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e94:	210f      	movs	r1, #15
 8001e96:	187b      	adds	r3, r7, r1
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2221      	movs	r2, #33	; 0x21
 8001ea0:	5c9b      	ldrb	r3, [r3, r2]
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d006      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2204      	movs	r2, #4
 8001eac:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001eae:	187b      	adds	r3, r7, r1
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
 8001eb4:	e028      	b.n	8001f08 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	210e      	movs	r1, #14
 8001ec2:	438a      	bics	r2, r1
 8001ec4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	438a      	bics	r2, r1
 8001ed4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ede:	2101      	movs	r1, #1
 8001ee0:	4091      	lsls	r1, r2
 8001ee2:	000a      	movs	r2, r1
 8001ee4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2221      	movs	r2, #33	; 0x21
 8001eea:	2101      	movs	r1, #1
 8001eec:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d004      	beq.n	8001f08 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	0010      	movs	r0, r2
 8001f06:	4798      	blx	r3
    } 
  }
  return status;
 8001f08:	230f      	movs	r3, #15
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	781b      	ldrb	r3, [r3, #0]
}
 8001f0e:	0018      	movs	r0, r3
 8001f10:	46bd      	mov	sp, r7
 8001f12:	b004      	add	sp, #16
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b084      	sub	sp, #16
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	2204      	movs	r2, #4
 8001f34:	409a      	lsls	r2, r3
 8001f36:	0013      	movs	r3, r2
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d024      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x72>
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	2204      	movs	r2, #4
 8001f42:	4013      	ands	r3, r2
 8001f44:	d020      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d107      	bne.n	8001f62 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2104      	movs	r1, #4
 8001f5e:	438a      	bics	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f6a:	2104      	movs	r1, #4
 8001f6c:	4091      	lsls	r1, r2
 8001f6e:	000a      	movs	r2, r1
 8001f70:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d100      	bne.n	8001f7c <HAL_DMA_IRQHandler+0x66>
 8001f7a:	e06a      	b.n	8002052 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	0010      	movs	r0, r2
 8001f84:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001f86:	e064      	b.n	8002052 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	0013      	movs	r3, r2
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4013      	ands	r3, r2
 8001f96:	d02b      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0xda>
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d027      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d10b      	bne.n	8001fc4 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	210a      	movs	r1, #10
 8001fb8:	438a      	bics	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2221      	movs	r2, #33	; 0x21
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fcc:	2102      	movs	r1, #2
 8001fce:	4091      	lsls	r1, r2
 8001fd0:	000a      	movs	r2, r1
 8001fd2:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	2100      	movs	r1, #0
 8001fda:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d036      	beq.n	8002052 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	0010      	movs	r0, r2
 8001fec:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001fee:	e030      	b.n	8002052 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	2208      	movs	r2, #8
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	0013      	movs	r3, r2
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d028      	beq.n	8002052 <HAL_DMA_IRQHandler+0x13c>
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2208      	movs	r2, #8
 8002004:	4013      	ands	r3, r2
 8002006:	d024      	beq.n	8002052 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	210e      	movs	r1, #14
 8002014:	438a      	bics	r2, r1
 8002016:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002020:	2101      	movs	r1, #1
 8002022:	4091      	lsls	r1, r2
 8002024:	000a      	movs	r2, r1
 8002026:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2221      	movs	r2, #33	; 0x21
 8002032:	2101      	movs	r1, #1
 8002034:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2220      	movs	r2, #32
 800203a:	2100      	movs	r1, #0
 800203c:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	0010      	movs	r0, r2
 800204e:	4798      	blx	r3
    }
   }
}  
 8002050:	e7ff      	b.n	8002052 <HAL_DMA_IRQHandler+0x13c>
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	46bd      	mov	sp, r7
 8002056:	b004      	add	sp, #16
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a08      	ldr	r2, [pc, #32]	; (800208c <DMA_CalcBaseAndBitshift+0x30>)
 800206a:	4694      	mov	ip, r2
 800206c:	4463      	add	r3, ip
 800206e:	2114      	movs	r1, #20
 8002070:	0018      	movs	r0, r3
 8002072:	f7fe f849 	bl	8000108 <__udivsi3>
 8002076:	0003      	movs	r3, r0
 8002078:	009a      	lsls	r2, r3, #2
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a03      	ldr	r2, [pc, #12]	; (8002090 <DMA_CalcBaseAndBitshift+0x34>)
 8002082:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002084:	46c0      	nop			; (mov r8, r8)
 8002086:	46bd      	mov	sp, r7
 8002088:	b002      	add	sp, #8
 800208a:	bd80      	pop	{r7, pc}
 800208c:	bffdfff8 	.word	0xbffdfff8
 8002090:	40020000 	.word	0x40020000

08002094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a2:	e14f      	b.n	8002344 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2101      	movs	r1, #1
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	4091      	lsls	r1, r2
 80020ae:	000a      	movs	r2, r1
 80020b0:	4013      	ands	r3, r2
 80020b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d100      	bne.n	80020bc <HAL_GPIO_Init+0x28>
 80020ba:	e140      	b.n	800233e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2203      	movs	r2, #3
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d005      	beq.n	80020d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2203      	movs	r2, #3
 80020ce:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d130      	bne.n	8002136 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	409a      	lsls	r2, r3
 80020e2:	0013      	movs	r3, r2
 80020e4:	43da      	mvns	r2, r3
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	409a      	lsls	r2, r3
 80020f6:	0013      	movs	r3, r2
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800210a:	2201      	movs	r2, #1
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	409a      	lsls	r2, r3
 8002110:	0013      	movs	r3, r2
 8002112:	43da      	mvns	r2, r3
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4013      	ands	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	091b      	lsrs	r3, r3, #4
 8002120:	2201      	movs	r2, #1
 8002122:	401a      	ands	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	409a      	lsls	r2, r3
 8002128:	0013      	movs	r3, r2
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2203      	movs	r2, #3
 800213c:	4013      	ands	r3, r2
 800213e:	2b03      	cmp	r3, #3
 8002140:	d017      	beq.n	8002172 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	2203      	movs	r2, #3
 800214e:	409a      	lsls	r2, r3
 8002150:	0013      	movs	r3, r2
 8002152:	43da      	mvns	r2, r3
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4013      	ands	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	409a      	lsls	r2, r3
 8002164:	0013      	movs	r3, r2
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2203      	movs	r2, #3
 8002178:	4013      	ands	r3, r2
 800217a:	2b02      	cmp	r3, #2
 800217c:	d123      	bne.n	80021c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	08da      	lsrs	r2, r3, #3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3208      	adds	r2, #8
 8002186:	0092      	lsls	r2, r2, #2
 8002188:	58d3      	ldr	r3, [r2, r3]
 800218a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	2207      	movs	r2, #7
 8002190:	4013      	ands	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	220f      	movs	r2, #15
 8002196:	409a      	lsls	r2, r3
 8002198:	0013      	movs	r3, r2
 800219a:	43da      	mvns	r2, r3
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4013      	ands	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	691a      	ldr	r2, [r3, #16]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2107      	movs	r1, #7
 80021aa:	400b      	ands	r3, r1
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	409a      	lsls	r2, r3
 80021b0:	0013      	movs	r3, r2
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	08da      	lsrs	r2, r3, #3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3208      	adds	r2, #8
 80021c0:	0092      	lsls	r2, r2, #2
 80021c2:	6939      	ldr	r1, [r7, #16]
 80021c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	2203      	movs	r2, #3
 80021d2:	409a      	lsls	r2, r3
 80021d4:	0013      	movs	r3, r2
 80021d6:	43da      	mvns	r2, r3
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4013      	ands	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2203      	movs	r2, #3
 80021e4:	401a      	ands	r2, r3
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	409a      	lsls	r2, r3
 80021ec:	0013      	movs	r3, r2
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	23c0      	movs	r3, #192	; 0xc0
 8002200:	029b      	lsls	r3, r3, #10
 8002202:	4013      	ands	r3, r2
 8002204:	d100      	bne.n	8002208 <HAL_GPIO_Init+0x174>
 8002206:	e09a      	b.n	800233e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002208:	4b54      	ldr	r3, [pc, #336]	; (800235c <HAL_GPIO_Init+0x2c8>)
 800220a:	699a      	ldr	r2, [r3, #24]
 800220c:	4b53      	ldr	r3, [pc, #332]	; (800235c <HAL_GPIO_Init+0x2c8>)
 800220e:	2101      	movs	r1, #1
 8002210:	430a      	orrs	r2, r1
 8002212:	619a      	str	r2, [r3, #24]
 8002214:	4b51      	ldr	r3, [pc, #324]	; (800235c <HAL_GPIO_Init+0x2c8>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	2201      	movs	r2, #1
 800221a:	4013      	ands	r3, r2
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002220:	4a4f      	ldr	r2, [pc, #316]	; (8002360 <HAL_GPIO_Init+0x2cc>)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	089b      	lsrs	r3, r3, #2
 8002226:	3302      	adds	r3, #2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	589b      	ldr	r3, [r3, r2]
 800222c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2203      	movs	r2, #3
 8002232:	4013      	ands	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	220f      	movs	r2, #15
 8002238:	409a      	lsls	r2, r3
 800223a:	0013      	movs	r3, r2
 800223c:	43da      	mvns	r2, r3
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	2390      	movs	r3, #144	; 0x90
 8002248:	05db      	lsls	r3, r3, #23
 800224a:	429a      	cmp	r2, r3
 800224c:	d013      	beq.n	8002276 <HAL_GPIO_Init+0x1e2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a44      	ldr	r2, [pc, #272]	; (8002364 <HAL_GPIO_Init+0x2d0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00d      	beq.n	8002272 <HAL_GPIO_Init+0x1de>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a43      	ldr	r2, [pc, #268]	; (8002368 <HAL_GPIO_Init+0x2d4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d007      	beq.n	800226e <HAL_GPIO_Init+0x1da>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a42      	ldr	r2, [pc, #264]	; (800236c <HAL_GPIO_Init+0x2d8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d101      	bne.n	800226a <HAL_GPIO_Init+0x1d6>
 8002266:	2303      	movs	r3, #3
 8002268:	e006      	b.n	8002278 <HAL_GPIO_Init+0x1e4>
 800226a:	2305      	movs	r3, #5
 800226c:	e004      	b.n	8002278 <HAL_GPIO_Init+0x1e4>
 800226e:	2302      	movs	r3, #2
 8002270:	e002      	b.n	8002278 <HAL_GPIO_Init+0x1e4>
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <HAL_GPIO_Init+0x1e4>
 8002276:	2300      	movs	r3, #0
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	2103      	movs	r1, #3
 800227c:	400a      	ands	r2, r1
 800227e:	0092      	lsls	r2, r2, #2
 8002280:	4093      	lsls	r3, r2
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002288:	4935      	ldr	r1, [pc, #212]	; (8002360 <HAL_GPIO_Init+0x2cc>)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	089b      	lsrs	r3, r3, #2
 800228e:	3302      	adds	r3, #2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002296:	4b36      	ldr	r3, [pc, #216]	; (8002370 <HAL_GPIO_Init+0x2dc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	43da      	mvns	r2, r3
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4013      	ands	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	025b      	lsls	r3, r3, #9
 80022ae:	4013      	ands	r3, r2
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022ba:	4b2d      	ldr	r3, [pc, #180]	; (8002370 <HAL_GPIO_Init+0x2dc>)
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80022c0:	4b2b      	ldr	r3, [pc, #172]	; (8002370 <HAL_GPIO_Init+0x2dc>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	43da      	mvns	r2, r3
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	029b      	lsls	r3, r3, #10
 80022d8:	4013      	ands	r3, r2
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022e4:	4b22      	ldr	r3, [pc, #136]	; (8002370 <HAL_GPIO_Init+0x2dc>)
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ea:	4b21      	ldr	r3, [pc, #132]	; (8002370 <HAL_GPIO_Init+0x2dc>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	43da      	mvns	r2, r3
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	035b      	lsls	r3, r3, #13
 8002302:	4013      	ands	r3, r2
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800230e:	4b18      	ldr	r3, [pc, #96]	; (8002370 <HAL_GPIO_Init+0x2dc>)
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002314:	4b16      	ldr	r3, [pc, #88]	; (8002370 <HAL_GPIO_Init+0x2dc>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	43da      	mvns	r2, r3
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4013      	ands	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	2380      	movs	r3, #128	; 0x80
 800232a:	039b      	lsls	r3, r3, #14
 800232c:	4013      	ands	r3, r2
 800232e:	d003      	beq.n	8002338 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002338:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <HAL_GPIO_Init+0x2dc>)
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	3301      	adds	r3, #1
 8002342:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	40da      	lsrs	r2, r3
 800234c:	1e13      	subs	r3, r2, #0
 800234e:	d000      	beq.n	8002352 <HAL_GPIO_Init+0x2be>
 8002350:	e6a8      	b.n	80020a4 <HAL_GPIO_Init+0x10>
  } 
}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	46c0      	nop			; (mov r8, r8)
 8002356:	46bd      	mov	sp, r7
 8002358:	b006      	add	sp, #24
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40021000 	.word	0x40021000
 8002360:	40010000 	.word	0x40010000
 8002364:	48000400 	.word	0x48000400
 8002368:	48000800 	.word	0x48000800
 800236c:	48000c00 	.word	0x48000c00
 8002370:	40010400 	.word	0x40010400

08002374 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	000a      	movs	r2, r1
 800237e:	1cbb      	adds	r3, r7, #2
 8002380:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	1cba      	adds	r2, r7, #2
 8002388:	8812      	ldrh	r2, [r2, #0]
 800238a:	4013      	ands	r3, r2
 800238c:	d004      	beq.n	8002398 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800238e:	230f      	movs	r3, #15
 8002390:	18fb      	adds	r3, r7, r3
 8002392:	2201      	movs	r2, #1
 8002394:	701a      	strb	r2, [r3, #0]
 8002396:	e003      	b.n	80023a0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002398:	230f      	movs	r3, #15
 800239a:	18fb      	adds	r3, r7, r3
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80023a0:	230f      	movs	r3, #15
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	781b      	ldrb	r3, [r3, #0]
  }
 80023a6:	0018      	movs	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b004      	add	sp, #16
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	0008      	movs	r0, r1
 80023b8:	0011      	movs	r1, r2
 80023ba:	1cbb      	adds	r3, r7, #2
 80023bc:	1c02      	adds	r2, r0, #0
 80023be:	801a      	strh	r2, [r3, #0]
 80023c0:	1c7b      	adds	r3, r7, #1
 80023c2:	1c0a      	adds	r2, r1, #0
 80023c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023c6:	1c7b      	adds	r3, r7, #1
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d004      	beq.n	80023d8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023ce:	1cbb      	adds	r3, r7, #2
 80023d0:	881a      	ldrh	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023d6:	e003      	b.n	80023e0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023d8:	1cbb      	adds	r3, r7, #2
 80023da:	881a      	ldrh	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023e0:	46c0      	nop			; (mov r8, r8)
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b002      	add	sp, #8
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	0002      	movs	r2, r0
 80023f0:	1dbb      	adds	r3, r7, #6
 80023f2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023f4:	4b09      	ldr	r3, [pc, #36]	; (800241c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	1dba      	adds	r2, r7, #6
 80023fa:	8812      	ldrh	r2, [r2, #0]
 80023fc:	4013      	ands	r3, r2
 80023fe:	d008      	beq.n	8002412 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002402:	1dba      	adds	r2, r7, #6
 8002404:	8812      	ldrh	r2, [r2, #0]
 8002406:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002408:	1dbb      	adds	r3, r7, #6
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	0018      	movs	r0, r3
 800240e:	f000 f807 	bl	8002420 <HAL_GPIO_EXTI_Callback>
  }
}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	46bd      	mov	sp, r7
 8002416:	b002      	add	sp, #8
 8002418:	bd80      	pop	{r7, pc}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	40010400 	.word	0x40010400

08002420 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	0002      	movs	r2, r0
 8002428:	1dbb      	adds	r3, r7, #6
 800242a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 800242c:	46c0      	nop			; (mov r8, r8)
 800242e:	46bd      	mov	sp, r7
 8002430:	b002      	add	sp, #8
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e301      	b.n	8002a4a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2201      	movs	r2, #1
 800244c:	4013      	ands	r3, r2
 800244e:	d100      	bne.n	8002452 <HAL_RCC_OscConfig+0x1e>
 8002450:	e08d      	b.n	800256e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002452:	4bc3      	ldr	r3, [pc, #780]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	220c      	movs	r2, #12
 8002458:	4013      	ands	r3, r2
 800245a:	2b04      	cmp	r3, #4
 800245c:	d00e      	beq.n	800247c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800245e:	4bc0      	ldr	r3, [pc, #768]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	220c      	movs	r2, #12
 8002464:	4013      	ands	r3, r2
 8002466:	2b08      	cmp	r3, #8
 8002468:	d116      	bne.n	8002498 <HAL_RCC_OscConfig+0x64>
 800246a:	4bbd      	ldr	r3, [pc, #756]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	2380      	movs	r3, #128	; 0x80
 8002470:	025b      	lsls	r3, r3, #9
 8002472:	401a      	ands	r2, r3
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	025b      	lsls	r3, r3, #9
 8002478:	429a      	cmp	r2, r3
 800247a:	d10d      	bne.n	8002498 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247c:	4bb8      	ldr	r3, [pc, #736]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	029b      	lsls	r3, r3, #10
 8002484:	4013      	ands	r3, r2
 8002486:	d100      	bne.n	800248a <HAL_RCC_OscConfig+0x56>
 8002488:	e070      	b.n	800256c <HAL_RCC_OscConfig+0x138>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d000      	beq.n	8002494 <HAL_RCC_OscConfig+0x60>
 8002492:	e06b      	b.n	800256c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e2d8      	b.n	8002a4a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d107      	bne.n	80024b0 <HAL_RCC_OscConfig+0x7c>
 80024a0:	4baf      	ldr	r3, [pc, #700]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	4bae      	ldr	r3, [pc, #696]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 80024a6:	2180      	movs	r1, #128	; 0x80
 80024a8:	0249      	lsls	r1, r1, #9
 80024aa:	430a      	orrs	r2, r1
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	e02f      	b.n	8002510 <HAL_RCC_OscConfig+0xdc>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10c      	bne.n	80024d2 <HAL_RCC_OscConfig+0x9e>
 80024b8:	4ba9      	ldr	r3, [pc, #676]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4ba8      	ldr	r3, [pc, #672]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 80024be:	49a9      	ldr	r1, [pc, #676]	; (8002764 <HAL_RCC_OscConfig+0x330>)
 80024c0:	400a      	ands	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	4ba6      	ldr	r3, [pc, #664]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4ba5      	ldr	r3, [pc, #660]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 80024ca:	49a7      	ldr	r1, [pc, #668]	; (8002768 <HAL_RCC_OscConfig+0x334>)
 80024cc:	400a      	ands	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	e01e      	b.n	8002510 <HAL_RCC_OscConfig+0xdc>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b05      	cmp	r3, #5
 80024d8:	d10e      	bne.n	80024f8 <HAL_RCC_OscConfig+0xc4>
 80024da:	4ba1      	ldr	r3, [pc, #644]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	4ba0      	ldr	r3, [pc, #640]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 80024e0:	2180      	movs	r1, #128	; 0x80
 80024e2:	02c9      	lsls	r1, r1, #11
 80024e4:	430a      	orrs	r2, r1
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	4b9d      	ldr	r3, [pc, #628]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b9c      	ldr	r3, [pc, #624]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 80024ee:	2180      	movs	r1, #128	; 0x80
 80024f0:	0249      	lsls	r1, r1, #9
 80024f2:	430a      	orrs	r2, r1
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	e00b      	b.n	8002510 <HAL_RCC_OscConfig+0xdc>
 80024f8:	4b99      	ldr	r3, [pc, #612]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4b98      	ldr	r3, [pc, #608]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 80024fe:	4999      	ldr	r1, [pc, #612]	; (8002764 <HAL_RCC_OscConfig+0x330>)
 8002500:	400a      	ands	r2, r1
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	4b96      	ldr	r3, [pc, #600]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b95      	ldr	r3, [pc, #596]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 800250a:	4997      	ldr	r1, [pc, #604]	; (8002768 <HAL_RCC_OscConfig+0x334>)
 800250c:	400a      	ands	r2, r1
 800250e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d014      	beq.n	8002542 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7ff fb2c 	bl	8001b74 <HAL_GetTick>
 800251c:	0003      	movs	r3, r0
 800251e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002522:	f7ff fb27 	bl	8001b74 <HAL_GetTick>
 8002526:	0002      	movs	r2, r0
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b64      	cmp	r3, #100	; 0x64
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e28a      	b.n	8002a4a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002534:	4b8a      	ldr	r3, [pc, #552]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	029b      	lsls	r3, r3, #10
 800253c:	4013      	ands	r3, r2
 800253e:	d0f0      	beq.n	8002522 <HAL_RCC_OscConfig+0xee>
 8002540:	e015      	b.n	800256e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002542:	f7ff fb17 	bl	8001b74 <HAL_GetTick>
 8002546:	0003      	movs	r3, r0
 8002548:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800254c:	f7ff fb12 	bl	8001b74 <HAL_GetTick>
 8002550:	0002      	movs	r2, r0
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b64      	cmp	r3, #100	; 0x64
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e275      	b.n	8002a4a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255e:	4b80      	ldr	r3, [pc, #512]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	2380      	movs	r3, #128	; 0x80
 8002564:	029b      	lsls	r3, r3, #10
 8002566:	4013      	ands	r3, r2
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x118>
 800256a:	e000      	b.n	800256e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2202      	movs	r2, #2
 8002574:	4013      	ands	r3, r2
 8002576:	d100      	bne.n	800257a <HAL_RCC_OscConfig+0x146>
 8002578:	e069      	b.n	800264e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800257a:	4b79      	ldr	r3, [pc, #484]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	220c      	movs	r2, #12
 8002580:	4013      	ands	r3, r2
 8002582:	d00b      	beq.n	800259c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002584:	4b76      	ldr	r3, [pc, #472]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	220c      	movs	r2, #12
 800258a:	4013      	ands	r3, r2
 800258c:	2b08      	cmp	r3, #8
 800258e:	d11c      	bne.n	80025ca <HAL_RCC_OscConfig+0x196>
 8002590:	4b73      	ldr	r3, [pc, #460]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	2380      	movs	r3, #128	; 0x80
 8002596:	025b      	lsls	r3, r3, #9
 8002598:	4013      	ands	r3, r2
 800259a:	d116      	bne.n	80025ca <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259c:	4b70      	ldr	r3, [pc, #448]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2202      	movs	r2, #2
 80025a2:	4013      	ands	r3, r2
 80025a4:	d005      	beq.n	80025b2 <HAL_RCC_OscConfig+0x17e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d001      	beq.n	80025b2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e24b      	b.n	8002a4a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b2:	4b6b      	ldr	r3, [pc, #428]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	22f8      	movs	r2, #248	; 0xf8
 80025b8:	4393      	bics	r3, r2
 80025ba:	0019      	movs	r1, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	00da      	lsls	r2, r3, #3
 80025c2:	4b67      	ldr	r3, [pc, #412]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 80025c4:	430a      	orrs	r2, r1
 80025c6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c8:	e041      	b.n	800264e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d024      	beq.n	800261c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d2:	4b63      	ldr	r3, [pc, #396]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	4b62      	ldr	r3, [pc, #392]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 80025d8:	2101      	movs	r1, #1
 80025da:	430a      	orrs	r2, r1
 80025dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025de:	f7ff fac9 	bl	8001b74 <HAL_GetTick>
 80025e2:	0003      	movs	r3, r0
 80025e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e8:	f7ff fac4 	bl	8001b74 <HAL_GetTick>
 80025ec:	0002      	movs	r2, r0
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e227      	b.n	8002a4a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fa:	4b59      	ldr	r3, [pc, #356]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2202      	movs	r2, #2
 8002600:	4013      	ands	r3, r2
 8002602:	d0f1      	beq.n	80025e8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002604:	4b56      	ldr	r3, [pc, #344]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	22f8      	movs	r2, #248	; 0xf8
 800260a:	4393      	bics	r3, r2
 800260c:	0019      	movs	r1, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	00da      	lsls	r2, r3, #3
 8002614:	4b52      	ldr	r3, [pc, #328]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 8002616:	430a      	orrs	r2, r1
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	e018      	b.n	800264e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800261c:	4b50      	ldr	r3, [pc, #320]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4b4f      	ldr	r3, [pc, #316]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 8002622:	2101      	movs	r1, #1
 8002624:	438a      	bics	r2, r1
 8002626:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002628:	f7ff faa4 	bl	8001b74 <HAL_GetTick>
 800262c:	0003      	movs	r3, r0
 800262e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002632:	f7ff fa9f 	bl	8001b74 <HAL_GetTick>
 8002636:	0002      	movs	r2, r0
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e202      	b.n	8002a4a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002644:	4b46      	ldr	r3, [pc, #280]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2202      	movs	r2, #2
 800264a:	4013      	ands	r3, r2
 800264c:	d1f1      	bne.n	8002632 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2208      	movs	r2, #8
 8002654:	4013      	ands	r3, r2
 8002656:	d036      	beq.n	80026c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d019      	beq.n	8002694 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002660:	4b3f      	ldr	r3, [pc, #252]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 8002662:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002664:	4b3e      	ldr	r3, [pc, #248]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 8002666:	2101      	movs	r1, #1
 8002668:	430a      	orrs	r2, r1
 800266a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266c:	f7ff fa82 	bl	8001b74 <HAL_GetTick>
 8002670:	0003      	movs	r3, r0
 8002672:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002676:	f7ff fa7d 	bl	8001b74 <HAL_GetTick>
 800267a:	0002      	movs	r2, r0
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e1e0      	b.n	8002a4a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002688:	4b35      	ldr	r3, [pc, #212]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	2202      	movs	r2, #2
 800268e:	4013      	ands	r3, r2
 8002690:	d0f1      	beq.n	8002676 <HAL_RCC_OscConfig+0x242>
 8002692:	e018      	b.n	80026c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002694:	4b32      	ldr	r3, [pc, #200]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 8002696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002698:	4b31      	ldr	r3, [pc, #196]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 800269a:	2101      	movs	r1, #1
 800269c:	438a      	bics	r2, r1
 800269e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a0:	f7ff fa68 	bl	8001b74 <HAL_GetTick>
 80026a4:	0003      	movs	r3, r0
 80026a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026aa:	f7ff fa63 	bl	8001b74 <HAL_GetTick>
 80026ae:	0002      	movs	r2, r0
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e1c6      	b.n	8002a4a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026bc:	4b28      	ldr	r3, [pc, #160]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	2202      	movs	r2, #2
 80026c2:	4013      	ands	r3, r2
 80026c4:	d1f1      	bne.n	80026aa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2204      	movs	r2, #4
 80026cc:	4013      	ands	r3, r2
 80026ce:	d100      	bne.n	80026d2 <HAL_RCC_OscConfig+0x29e>
 80026d0:	e0b4      	b.n	800283c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026d2:	201f      	movs	r0, #31
 80026d4:	183b      	adds	r3, r7, r0
 80026d6:	2200      	movs	r2, #0
 80026d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026da:	4b21      	ldr	r3, [pc, #132]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 80026dc:	69da      	ldr	r2, [r3, #28]
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	055b      	lsls	r3, r3, #21
 80026e2:	4013      	ands	r3, r2
 80026e4:	d110      	bne.n	8002708 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e6:	4b1e      	ldr	r3, [pc, #120]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 80026e8:	69da      	ldr	r2, [r3, #28]
 80026ea:	4b1d      	ldr	r3, [pc, #116]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 80026ec:	2180      	movs	r1, #128	; 0x80
 80026ee:	0549      	lsls	r1, r1, #21
 80026f0:	430a      	orrs	r2, r1
 80026f2:	61da      	str	r2, [r3, #28]
 80026f4:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 80026f6:	69da      	ldr	r2, [r3, #28]
 80026f8:	2380      	movs	r3, #128	; 0x80
 80026fa:	055b      	lsls	r3, r3, #21
 80026fc:	4013      	ands	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002702:	183b      	adds	r3, r7, r0
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002708:	4b18      	ldr	r3, [pc, #96]	; (800276c <HAL_RCC_OscConfig+0x338>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	4013      	ands	r3, r2
 8002712:	d11a      	bne.n	800274a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002714:	4b15      	ldr	r3, [pc, #84]	; (800276c <HAL_RCC_OscConfig+0x338>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	4b14      	ldr	r3, [pc, #80]	; (800276c <HAL_RCC_OscConfig+0x338>)
 800271a:	2180      	movs	r1, #128	; 0x80
 800271c:	0049      	lsls	r1, r1, #1
 800271e:	430a      	orrs	r2, r1
 8002720:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002722:	f7ff fa27 	bl	8001b74 <HAL_GetTick>
 8002726:	0003      	movs	r3, r0
 8002728:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800272c:	f7ff fa22 	bl	8001b74 <HAL_GetTick>
 8002730:	0002      	movs	r2, r0
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b64      	cmp	r3, #100	; 0x64
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e185      	b.n	8002a4a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_RCC_OscConfig+0x338>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4013      	ands	r3, r2
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d10e      	bne.n	8002770 <HAL_RCC_OscConfig+0x33c>
 8002752:	4b03      	ldr	r3, [pc, #12]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 8002754:	6a1a      	ldr	r2, [r3, #32]
 8002756:	4b02      	ldr	r3, [pc, #8]	; (8002760 <HAL_RCC_OscConfig+0x32c>)
 8002758:	2101      	movs	r1, #1
 800275a:	430a      	orrs	r2, r1
 800275c:	621a      	str	r2, [r3, #32]
 800275e:	e035      	b.n	80027cc <HAL_RCC_OscConfig+0x398>
 8002760:	40021000 	.word	0x40021000
 8002764:	fffeffff 	.word	0xfffeffff
 8002768:	fffbffff 	.word	0xfffbffff
 800276c:	40007000 	.word	0x40007000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10c      	bne.n	8002792 <HAL_RCC_OscConfig+0x35e>
 8002778:	4bb6      	ldr	r3, [pc, #728]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 800277a:	6a1a      	ldr	r2, [r3, #32]
 800277c:	4bb5      	ldr	r3, [pc, #724]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 800277e:	2101      	movs	r1, #1
 8002780:	438a      	bics	r2, r1
 8002782:	621a      	str	r2, [r3, #32]
 8002784:	4bb3      	ldr	r3, [pc, #716]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 8002786:	6a1a      	ldr	r2, [r3, #32]
 8002788:	4bb2      	ldr	r3, [pc, #712]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 800278a:	2104      	movs	r1, #4
 800278c:	438a      	bics	r2, r1
 800278e:	621a      	str	r2, [r3, #32]
 8002790:	e01c      	b.n	80027cc <HAL_RCC_OscConfig+0x398>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b05      	cmp	r3, #5
 8002798:	d10c      	bne.n	80027b4 <HAL_RCC_OscConfig+0x380>
 800279a:	4bae      	ldr	r3, [pc, #696]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 800279c:	6a1a      	ldr	r2, [r3, #32]
 800279e:	4bad      	ldr	r3, [pc, #692]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 80027a0:	2104      	movs	r1, #4
 80027a2:	430a      	orrs	r2, r1
 80027a4:	621a      	str	r2, [r3, #32]
 80027a6:	4bab      	ldr	r3, [pc, #684]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 80027a8:	6a1a      	ldr	r2, [r3, #32]
 80027aa:	4baa      	ldr	r3, [pc, #680]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 80027ac:	2101      	movs	r1, #1
 80027ae:	430a      	orrs	r2, r1
 80027b0:	621a      	str	r2, [r3, #32]
 80027b2:	e00b      	b.n	80027cc <HAL_RCC_OscConfig+0x398>
 80027b4:	4ba7      	ldr	r3, [pc, #668]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 80027b6:	6a1a      	ldr	r2, [r3, #32]
 80027b8:	4ba6      	ldr	r3, [pc, #664]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 80027ba:	2101      	movs	r1, #1
 80027bc:	438a      	bics	r2, r1
 80027be:	621a      	str	r2, [r3, #32]
 80027c0:	4ba4      	ldr	r3, [pc, #656]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 80027c2:	6a1a      	ldr	r2, [r3, #32]
 80027c4:	4ba3      	ldr	r3, [pc, #652]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 80027c6:	2104      	movs	r1, #4
 80027c8:	438a      	bics	r2, r1
 80027ca:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d014      	beq.n	80027fe <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d4:	f7ff f9ce 	bl	8001b74 <HAL_GetTick>
 80027d8:	0003      	movs	r3, r0
 80027da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027dc:	e009      	b.n	80027f2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027de:	f7ff f9c9 	bl	8001b74 <HAL_GetTick>
 80027e2:	0002      	movs	r2, r0
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	4a9b      	ldr	r2, [pc, #620]	; (8002a58 <HAL_RCC_OscConfig+0x624>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e12b      	b.n	8002a4a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f2:	4b98      	ldr	r3, [pc, #608]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	2202      	movs	r2, #2
 80027f8:	4013      	ands	r3, r2
 80027fa:	d0f0      	beq.n	80027de <HAL_RCC_OscConfig+0x3aa>
 80027fc:	e013      	b.n	8002826 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fe:	f7ff f9b9 	bl	8001b74 <HAL_GetTick>
 8002802:	0003      	movs	r3, r0
 8002804:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002806:	e009      	b.n	800281c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002808:	f7ff f9b4 	bl	8001b74 <HAL_GetTick>
 800280c:	0002      	movs	r2, r0
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	4a91      	ldr	r2, [pc, #580]	; (8002a58 <HAL_RCC_OscConfig+0x624>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e116      	b.n	8002a4a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281c:	4b8d      	ldr	r3, [pc, #564]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	2202      	movs	r2, #2
 8002822:	4013      	ands	r3, r2
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002826:	231f      	movs	r3, #31
 8002828:	18fb      	adds	r3, r7, r3
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d105      	bne.n	800283c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002830:	4b88      	ldr	r3, [pc, #544]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 8002832:	69da      	ldr	r2, [r3, #28]
 8002834:	4b87      	ldr	r3, [pc, #540]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 8002836:	4989      	ldr	r1, [pc, #548]	; (8002a5c <HAL_RCC_OscConfig+0x628>)
 8002838:	400a      	ands	r2, r1
 800283a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2210      	movs	r2, #16
 8002842:	4013      	ands	r3, r2
 8002844:	d063      	beq.n	800290e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d12a      	bne.n	80028a4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800284e:	4b81      	ldr	r3, [pc, #516]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 8002850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002852:	4b80      	ldr	r3, [pc, #512]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 8002854:	2104      	movs	r1, #4
 8002856:	430a      	orrs	r2, r1
 8002858:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800285a:	4b7e      	ldr	r3, [pc, #504]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 800285c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800285e:	4b7d      	ldr	r3, [pc, #500]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 8002860:	2101      	movs	r1, #1
 8002862:	430a      	orrs	r2, r1
 8002864:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002866:	f7ff f985 	bl	8001b74 <HAL_GetTick>
 800286a:	0003      	movs	r3, r0
 800286c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002870:	f7ff f980 	bl	8001b74 <HAL_GetTick>
 8002874:	0002      	movs	r2, r0
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e0e3      	b.n	8002a4a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002882:	4b74      	ldr	r3, [pc, #464]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 8002884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002886:	2202      	movs	r2, #2
 8002888:	4013      	ands	r3, r2
 800288a:	d0f1      	beq.n	8002870 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800288c:	4b71      	ldr	r3, [pc, #452]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 800288e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002890:	22f8      	movs	r2, #248	; 0xf8
 8002892:	4393      	bics	r3, r2
 8002894:	0019      	movs	r1, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	00da      	lsls	r2, r3, #3
 800289c:	4b6d      	ldr	r3, [pc, #436]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 800289e:	430a      	orrs	r2, r1
 80028a0:	635a      	str	r2, [r3, #52]	; 0x34
 80028a2:	e034      	b.n	800290e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	3305      	adds	r3, #5
 80028aa:	d111      	bne.n	80028d0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80028ac:	4b69      	ldr	r3, [pc, #420]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 80028ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028b0:	4b68      	ldr	r3, [pc, #416]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 80028b2:	2104      	movs	r1, #4
 80028b4:	438a      	bics	r2, r1
 80028b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80028b8:	4b66      	ldr	r3, [pc, #408]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 80028ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028bc:	22f8      	movs	r2, #248	; 0xf8
 80028be:	4393      	bics	r3, r2
 80028c0:	0019      	movs	r1, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	00da      	lsls	r2, r3, #3
 80028c8:	4b62      	ldr	r3, [pc, #392]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 80028ca:	430a      	orrs	r2, r1
 80028cc:	635a      	str	r2, [r3, #52]	; 0x34
 80028ce:	e01e      	b.n	800290e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80028d0:	4b60      	ldr	r3, [pc, #384]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 80028d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028d4:	4b5f      	ldr	r3, [pc, #380]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 80028d6:	2104      	movs	r1, #4
 80028d8:	430a      	orrs	r2, r1
 80028da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80028dc:	4b5d      	ldr	r3, [pc, #372]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 80028de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028e0:	4b5c      	ldr	r3, [pc, #368]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 80028e2:	2101      	movs	r1, #1
 80028e4:	438a      	bics	r2, r1
 80028e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e8:	f7ff f944 	bl	8001b74 <HAL_GetTick>
 80028ec:	0003      	movs	r3, r0
 80028ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80028f2:	f7ff f93f 	bl	8001b74 <HAL_GetTick>
 80028f6:	0002      	movs	r2, r0
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e0a2      	b.n	8002a4a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002904:	4b53      	ldr	r3, [pc, #332]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 8002906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002908:	2202      	movs	r2, #2
 800290a:	4013      	ands	r3, r2
 800290c:	d1f1      	bne.n	80028f2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d100      	bne.n	8002918 <HAL_RCC_OscConfig+0x4e4>
 8002916:	e097      	b.n	8002a48 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002918:	4b4e      	ldr	r3, [pc, #312]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	220c      	movs	r2, #12
 800291e:	4013      	ands	r3, r2
 8002920:	2b08      	cmp	r3, #8
 8002922:	d100      	bne.n	8002926 <HAL_RCC_OscConfig+0x4f2>
 8002924:	e06b      	b.n	80029fe <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d14c      	bne.n	80029c8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292e:	4b49      	ldr	r3, [pc, #292]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	4b48      	ldr	r3, [pc, #288]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 8002934:	494a      	ldr	r1, [pc, #296]	; (8002a60 <HAL_RCC_OscConfig+0x62c>)
 8002936:	400a      	ands	r2, r1
 8002938:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293a:	f7ff f91b 	bl	8001b74 <HAL_GetTick>
 800293e:	0003      	movs	r3, r0
 8002940:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002944:	f7ff f916 	bl	8001b74 <HAL_GetTick>
 8002948:	0002      	movs	r2, r0
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e079      	b.n	8002a4a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002956:	4b3f      	ldr	r3, [pc, #252]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	2380      	movs	r3, #128	; 0x80
 800295c:	049b      	lsls	r3, r3, #18
 800295e:	4013      	ands	r3, r2
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002962:	4b3c      	ldr	r3, [pc, #240]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 8002964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002966:	220f      	movs	r2, #15
 8002968:	4393      	bics	r3, r2
 800296a:	0019      	movs	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002970:	4b38      	ldr	r3, [pc, #224]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 8002972:	430a      	orrs	r2, r1
 8002974:	62da      	str	r2, [r3, #44]	; 0x2c
 8002976:	4b37      	ldr	r3, [pc, #220]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	4a3a      	ldr	r2, [pc, #232]	; (8002a64 <HAL_RCC_OscConfig+0x630>)
 800297c:	4013      	ands	r3, r2
 800297e:	0019      	movs	r1, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	431a      	orrs	r2, r3
 800298a:	4b32      	ldr	r3, [pc, #200]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 800298c:	430a      	orrs	r2, r1
 800298e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002990:	4b30      	ldr	r3, [pc, #192]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4b2f      	ldr	r3, [pc, #188]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 8002996:	2180      	movs	r1, #128	; 0x80
 8002998:	0449      	lsls	r1, r1, #17
 800299a:	430a      	orrs	r2, r1
 800299c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299e:	f7ff f8e9 	bl	8001b74 <HAL_GetTick>
 80029a2:	0003      	movs	r3, r0
 80029a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a8:	f7ff f8e4 	bl	8001b74 <HAL_GetTick>
 80029ac:	0002      	movs	r2, r0
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e047      	b.n	8002a4a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029ba:	4b26      	ldr	r3, [pc, #152]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	2380      	movs	r3, #128	; 0x80
 80029c0:	049b      	lsls	r3, r3, #18
 80029c2:	4013      	ands	r3, r2
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x574>
 80029c6:	e03f      	b.n	8002a48 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c8:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 80029ce:	4924      	ldr	r1, [pc, #144]	; (8002a60 <HAL_RCC_OscConfig+0x62c>)
 80029d0:	400a      	ands	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7ff f8ce 	bl	8001b74 <HAL_GetTick>
 80029d8:	0003      	movs	r3, r0
 80029da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029de:	f7ff f8c9 	bl	8001b74 <HAL_GetTick>
 80029e2:	0002      	movs	r2, r0
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e02c      	b.n	8002a4a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f0:	4b18      	ldr	r3, [pc, #96]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	2380      	movs	r3, #128	; 0x80
 80029f6:	049b      	lsls	r3, r3, #18
 80029f8:	4013      	ands	r3, r2
 80029fa:	d1f0      	bne.n	80029de <HAL_RCC_OscConfig+0x5aa>
 80029fc:	e024      	b.n	8002a48 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e01f      	b.n	8002a4a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002a0a:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002a10:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <HAL_RCC_OscConfig+0x620>)
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	025b      	lsls	r3, r3, #9
 8002a1c:	401a      	ands	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d10e      	bne.n	8002a44 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	220f      	movs	r2, #15
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d107      	bne.n	8002a44 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	23f0      	movs	r3, #240	; 0xf0
 8002a38:	039b      	lsls	r3, r3, #14
 8002a3a:	401a      	ands	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	b008      	add	sp, #32
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	40021000 	.word	0x40021000
 8002a58:	00001388 	.word	0x00001388
 8002a5c:	efffffff 	.word	0xefffffff
 8002a60:	feffffff 	.word	0xfeffffff
 8002a64:	ffc2ffff 	.word	0xffc2ffff

08002a68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0b3      	b.n	8002be4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a7c:	4b5b      	ldr	r3, [pc, #364]	; (8002bec <HAL_RCC_ClockConfig+0x184>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2201      	movs	r2, #1
 8002a82:	4013      	ands	r3, r2
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d911      	bls.n	8002aae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8a:	4b58      	ldr	r3, [pc, #352]	; (8002bec <HAL_RCC_ClockConfig+0x184>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4393      	bics	r3, r2
 8002a92:	0019      	movs	r1, r3
 8002a94:	4b55      	ldr	r3, [pc, #340]	; (8002bec <HAL_RCC_ClockConfig+0x184>)
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9c:	4b53      	ldr	r3, [pc, #332]	; (8002bec <HAL_RCC_ClockConfig+0x184>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d001      	beq.n	8002aae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e09a      	b.n	8002be4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d015      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2204      	movs	r2, #4
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d006      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ac2:	4b4b      	ldr	r3, [pc, #300]	; (8002bf0 <HAL_RCC_ClockConfig+0x188>)
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	4b4a      	ldr	r3, [pc, #296]	; (8002bf0 <HAL_RCC_ClockConfig+0x188>)
 8002ac8:	21e0      	movs	r1, #224	; 0xe0
 8002aca:	00c9      	lsls	r1, r1, #3
 8002acc:	430a      	orrs	r2, r1
 8002ace:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad0:	4b47      	ldr	r3, [pc, #284]	; (8002bf0 <HAL_RCC_ClockConfig+0x188>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	22f0      	movs	r2, #240	; 0xf0
 8002ad6:	4393      	bics	r3, r2
 8002ad8:	0019      	movs	r1, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	4b44      	ldr	r3, [pc, #272]	; (8002bf0 <HAL_RCC_ClockConfig+0x188>)
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	4013      	ands	r3, r2
 8002aec:	d040      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d107      	bne.n	8002b06 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	4b3e      	ldr	r3, [pc, #248]	; (8002bf0 <HAL_RCC_ClockConfig+0x188>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	029b      	lsls	r3, r3, #10
 8002afe:	4013      	ands	r3, r2
 8002b00:	d114      	bne.n	8002b2c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e06e      	b.n	8002be4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d107      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0e:	4b38      	ldr	r3, [pc, #224]	; (8002bf0 <HAL_RCC_ClockConfig+0x188>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	2380      	movs	r3, #128	; 0x80
 8002b14:	049b      	lsls	r3, r3, #18
 8002b16:	4013      	ands	r3, r2
 8002b18:	d108      	bne.n	8002b2c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e062      	b.n	8002be4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1e:	4b34      	ldr	r3, [pc, #208]	; (8002bf0 <HAL_RCC_ClockConfig+0x188>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2202      	movs	r2, #2
 8002b24:	4013      	ands	r3, r2
 8002b26:	d101      	bne.n	8002b2c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e05b      	b.n	8002be4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b2c:	4b30      	ldr	r3, [pc, #192]	; (8002bf0 <HAL_RCC_ClockConfig+0x188>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2203      	movs	r2, #3
 8002b32:	4393      	bics	r3, r2
 8002b34:	0019      	movs	r1, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	4b2d      	ldr	r3, [pc, #180]	; (8002bf0 <HAL_RCC_ClockConfig+0x188>)
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b40:	f7ff f818 	bl	8001b74 <HAL_GetTick>
 8002b44:	0003      	movs	r3, r0
 8002b46:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b48:	e009      	b.n	8002b5e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b4a:	f7ff f813 	bl	8001b74 <HAL_GetTick>
 8002b4e:	0002      	movs	r2, r0
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	4a27      	ldr	r2, [pc, #156]	; (8002bf4 <HAL_RCC_ClockConfig+0x18c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e042      	b.n	8002be4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5e:	4b24      	ldr	r3, [pc, #144]	; (8002bf0 <HAL_RCC_ClockConfig+0x188>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	220c      	movs	r2, #12
 8002b64:	401a      	ands	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d1ec      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b70:	4b1e      	ldr	r3, [pc, #120]	; (8002bec <HAL_RCC_ClockConfig+0x184>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2201      	movs	r2, #1
 8002b76:	4013      	ands	r3, r2
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d211      	bcs.n	8002ba2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7e:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <HAL_RCC_ClockConfig+0x184>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2201      	movs	r2, #1
 8002b84:	4393      	bics	r3, r2
 8002b86:	0019      	movs	r1, r3
 8002b88:	4b18      	ldr	r3, [pc, #96]	; (8002bec <HAL_RCC_ClockConfig+0x184>)
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b90:	4b16      	ldr	r3, [pc, #88]	; (8002bec <HAL_RCC_ClockConfig+0x184>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2201      	movs	r2, #1
 8002b96:	4013      	ands	r3, r2
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e020      	b.n	8002be4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d009      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002bac:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <HAL_RCC_ClockConfig+0x188>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	4a11      	ldr	r2, [pc, #68]	; (8002bf8 <HAL_RCC_ClockConfig+0x190>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	0019      	movs	r1, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <HAL_RCC_ClockConfig+0x188>)
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002bc0:	f000 f820 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8002bc4:	0001      	movs	r1, r0
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <HAL_RCC_ClockConfig+0x188>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	091b      	lsrs	r3, r3, #4
 8002bcc:	220f      	movs	r2, #15
 8002bce:	4013      	ands	r3, r2
 8002bd0:	4a0a      	ldr	r2, [pc, #40]	; (8002bfc <HAL_RCC_ClockConfig+0x194>)
 8002bd2:	5cd3      	ldrb	r3, [r2, r3]
 8002bd4:	000a      	movs	r2, r1
 8002bd6:	40da      	lsrs	r2, r3
 8002bd8:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_RCC_ClockConfig+0x198>)
 8002bda:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002bdc:	2000      	movs	r0, #0
 8002bde:	f7fe ff83 	bl	8001ae8 <HAL_InitTick>
  
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	0018      	movs	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b004      	add	sp, #16
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40022000 	.word	0x40022000
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	00001388 	.word	0x00001388
 8002bf8:	fffff8ff 	.word	0xfffff8ff
 8002bfc:	08003d44 	.word	0x08003d44
 8002c00:	20000004 	.word	0x20000004

08002c04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c04:	b590      	push	{r4, r7, lr}
 8002c06:	b08f      	sub	sp, #60	; 0x3c
 8002c08:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002c0a:	2314      	movs	r3, #20
 8002c0c:	18fb      	adds	r3, r7, r3
 8002c0e:	4a2b      	ldr	r2, [pc, #172]	; (8002cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c10:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002c12:	c313      	stmia	r3!, {r0, r1, r4}
 8002c14:	6812      	ldr	r2, [r2, #0]
 8002c16:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002c18:	1d3b      	adds	r3, r7, #4
 8002c1a:	4a29      	ldr	r2, [pc, #164]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c1c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002c1e:	c313      	stmia	r3!, {r0, r1, r4}
 8002c20:	6812      	ldr	r2, [r2, #0]
 8002c22:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c28:	2300      	movs	r3, #0
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c30:	2300      	movs	r3, #0
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002c38:	4b22      	ldr	r3, [pc, #136]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c40:	220c      	movs	r2, #12
 8002c42:	4013      	ands	r3, r2
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d002      	beq.n	8002c4e <HAL_RCC_GetSysClockFreq+0x4a>
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d003      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0x50>
 8002c4c:	e02d      	b.n	8002caa <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c4e:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c50:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c52:	e02d      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c56:	0c9b      	lsrs	r3, r3, #18
 8002c58:	220f      	movs	r2, #15
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2214      	movs	r2, #20
 8002c5e:	18ba      	adds	r2, r7, r2
 8002c60:	5cd3      	ldrb	r3, [r2, r3]
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002c64:	4b17      	ldr	r3, [pc, #92]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c68:	220f      	movs	r2, #15
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	1d3a      	adds	r2, r7, #4
 8002c6e:	5cd3      	ldrb	r3, [r2, r3]
 8002c70:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c74:	2380      	movs	r3, #128	; 0x80
 8002c76:	025b      	lsls	r3, r3, #9
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d009      	beq.n	8002c90 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c7e:	4812      	ldr	r0, [pc, #72]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c80:	f7fd fa42 	bl	8000108 <__udivsi3>
 8002c84:	0003      	movs	r3, r0
 8002c86:	001a      	movs	r2, r3
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	4353      	muls	r3, r2
 8002c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c8e:	e009      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c92:	000a      	movs	r2, r1
 8002c94:	0152      	lsls	r2, r2, #5
 8002c96:	1a52      	subs	r2, r2, r1
 8002c98:	0193      	lsls	r3, r2, #6
 8002c9a:	1a9b      	subs	r3, r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	185b      	adds	r3, r3, r1
 8002ca0:	021b      	lsls	r3, r3, #8
 8002ca2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ca8:	e002      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002caa:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002cae:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	b00f      	add	sp, #60	; 0x3c
 8002cb8:	bd90      	pop	{r4, r7, pc}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	08003ce4 	.word	0x08003ce4
 8002cc0:	08003cf4 	.word	0x08003cf4
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	007a1200 	.word	0x007a1200

08002ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cd0:	4b02      	ldr	r3, [pc, #8]	; (8002cdc <HAL_RCC_GetHCLKFreq+0x10>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
}
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	20000004 	.word	0x20000004

08002ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002ce4:	f7ff fff2 	bl	8002ccc <HAL_RCC_GetHCLKFreq>
 8002ce8:	0001      	movs	r1, r0
 8002cea:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	0a1b      	lsrs	r3, r3, #8
 8002cf0:	2207      	movs	r2, #7
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cf6:	5cd3      	ldrb	r3, [r2, r3]
 8002cf8:	40d9      	lsrs	r1, r3
 8002cfa:	000b      	movs	r3, r1
}    
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	40021000 	.word	0x40021000
 8002d08:	08003d54 	.word	0x08003d54

08002d0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e044      	b.n	8002da8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d107      	bne.n	8002d36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2274      	movs	r2, #116	; 0x74
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	0018      	movs	r0, r3
 8002d32:	f7fe fdb5 	bl	80018a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2224      	movs	r2, #36	; 0x24
 8002d3a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2101      	movs	r1, #1
 8002d48:	438a      	bics	r2, r1
 8002d4a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f000 fbce 	bl	80034f0 <UART_SetConfig>
 8002d54:	0003      	movs	r3, r0
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e024      	b.n	8002da8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f000 fd01 	bl	8003770 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	490d      	ldr	r1, [pc, #52]	; (8002db0 <HAL_UART_Init+0xa4>)
 8002d7a:	400a      	ands	r2, r1
 8002d7c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	212a      	movs	r1, #42	; 0x2a
 8002d8a:	438a      	bics	r2, r1
 8002d8c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2101      	movs	r1, #1
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	0018      	movs	r0, r3
 8002da2:	f000 fd99 	bl	80038d8 <UART_CheckIdleState>
 8002da6:	0003      	movs	r3, r0
}
 8002da8:	0018      	movs	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	b002      	add	sp, #8
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	ffffb7ff 	.word	0xffffb7ff

08002db4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08a      	sub	sp, #40	; 0x28
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	1dbb      	adds	r3, r7, #6
 8002dc2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d000      	beq.n	8002dce <HAL_UART_Transmit+0x1a>
 8002dcc:	e096      	b.n	8002efc <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_UART_Transmit+0x28>
 8002dd4:	1dbb      	adds	r3, r7, #6
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e08e      	b.n	8002efe <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	2380      	movs	r3, #128	; 0x80
 8002de6:	015b      	lsls	r3, r3, #5
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d109      	bne.n	8002e00 <HAL_UART_Transmit+0x4c>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d105      	bne.n	8002e00 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2201      	movs	r2, #1
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d001      	beq.n	8002e00 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e07e      	b.n	8002efe <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2274      	movs	r2, #116	; 0x74
 8002e04:	5c9b      	ldrb	r3, [r3, r2]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <HAL_UART_Transmit+0x5a>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e077      	b.n	8002efe <HAL_UART_Transmit+0x14a>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2274      	movs	r2, #116	; 0x74
 8002e12:	2101      	movs	r1, #1
 8002e14:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2280      	movs	r2, #128	; 0x80
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2221      	movs	r2, #33	; 0x21
 8002e22:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e24:	f7fe fea6 	bl	8001b74 <HAL_GetTick>
 8002e28:	0003      	movs	r3, r0
 8002e2a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	1dba      	adds	r2, r7, #6
 8002e30:	2150      	movs	r1, #80	; 0x50
 8002e32:	8812      	ldrh	r2, [r2, #0]
 8002e34:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1dba      	adds	r2, r7, #6
 8002e3a:	2152      	movs	r1, #82	; 0x52
 8002e3c:	8812      	ldrh	r2, [r2, #0]
 8002e3e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	2380      	movs	r3, #128	; 0x80
 8002e46:	015b      	lsls	r3, r3, #5
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d108      	bne.n	8002e5e <HAL_UART_Transmit+0xaa>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d104      	bne.n	8002e5e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	61bb      	str	r3, [r7, #24]
 8002e5c:	e003      	b.n	8002e66 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2274      	movs	r2, #116	; 0x74
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002e6e:	e02d      	b.n	8002ecc <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	0013      	movs	r3, r2
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2180      	movs	r1, #128	; 0x80
 8002e7e:	f000 fd73 	bl	8003968 <UART_WaitOnFlagUntilTimeout>
 8002e82:	1e03      	subs	r3, r0, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e039      	b.n	8002efe <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10b      	bne.n	8002ea8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	881a      	ldrh	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	05d2      	lsls	r2, r2, #23
 8002e9a:	0dd2      	lsrs	r2, r2, #23
 8002e9c:	b292      	uxth	r2, r2
 8002e9e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	3302      	adds	r3, #2
 8002ea4:	61bb      	str	r3, [r7, #24]
 8002ea6:	e008      	b.n	8002eba <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	781a      	ldrb	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	b292      	uxth	r2, r2
 8002eb2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2252      	movs	r2, #82	; 0x52
 8002ebe:	5a9b      	ldrh	r3, [r3, r2]
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b299      	uxth	r1, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2252      	movs	r2, #82	; 0x52
 8002eca:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2252      	movs	r2, #82	; 0x52
 8002ed0:	5a9b      	ldrh	r3, [r3, r2]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1cb      	bne.n	8002e70 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	0013      	movs	r3, r2
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2140      	movs	r1, #64	; 0x40
 8002ee6:	f000 fd3f 	bl	8003968 <UART_WaitOnFlagUntilTimeout>
 8002eea:	1e03      	subs	r3, r0, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e005      	b.n	8002efe <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e000      	b.n	8002efe <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002efc:	2302      	movs	r3, #2
  }
}
 8002efe:	0018      	movs	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	b008      	add	sp, #32
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b0ab      	sub	sp, #172	; 0xac
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	22a4      	movs	r2, #164	; 0xa4
 8002f18:	18b9      	adds	r1, r7, r2
 8002f1a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	20a0      	movs	r0, #160	; 0xa0
 8002f24:	1839      	adds	r1, r7, r0
 8002f26:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	219c      	movs	r1, #156	; 0x9c
 8002f30:	1879      	adds	r1, r7, r1
 8002f32:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f34:	0011      	movs	r1, r2
 8002f36:	18bb      	adds	r3, r7, r2
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a99      	ldr	r2, [pc, #612]	; (80031a0 <HAL_UART_IRQHandler+0x298>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2298      	movs	r2, #152	; 0x98
 8002f40:	18bc      	adds	r4, r7, r2
 8002f42:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002f44:	18bb      	adds	r3, r7, r2
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d114      	bne.n	8002f76 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f4c:	187b      	adds	r3, r7, r1
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2220      	movs	r2, #32
 8002f52:	4013      	ands	r3, r2
 8002f54:	d00f      	beq.n	8002f76 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f56:	183b      	adds	r3, r7, r0
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d00a      	beq.n	8002f76 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d100      	bne.n	8002f6a <HAL_UART_IRQHandler+0x62>
 8002f68:	e296      	b.n	8003498 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	0010      	movs	r0, r2
 8002f72:	4798      	blx	r3
      }
      return;
 8002f74:	e290      	b.n	8003498 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002f76:	2398      	movs	r3, #152	; 0x98
 8002f78:	18fb      	adds	r3, r7, r3
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d100      	bne.n	8002f82 <HAL_UART_IRQHandler+0x7a>
 8002f80:	e114      	b.n	80031ac <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f82:	239c      	movs	r3, #156	; 0x9c
 8002f84:	18fb      	adds	r3, r7, r3
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d106      	bne.n	8002f9c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002f8e:	23a0      	movs	r3, #160	; 0xa0
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a83      	ldr	r2, [pc, #524]	; (80031a4 <HAL_UART_IRQHandler+0x29c>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	d100      	bne.n	8002f9c <HAL_UART_IRQHandler+0x94>
 8002f9a:	e107      	b.n	80031ac <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f9c:	23a4      	movs	r3, #164	; 0xa4
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d012      	beq.n	8002fce <HAL_UART_IRQHandler+0xc6>
 8002fa8:	23a0      	movs	r3, #160	; 0xa0
 8002faa:	18fb      	adds	r3, r7, r3
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	2380      	movs	r3, #128	; 0x80
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d00b      	beq.n	8002fce <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2280      	movs	r2, #128	; 0x80
 8002fc2:	589b      	ldr	r3, [r3, r2]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2180      	movs	r1, #128	; 0x80
 8002fcc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fce:	23a4      	movs	r3, #164	; 0xa4
 8002fd0:	18fb      	adds	r3, r7, r3
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d011      	beq.n	8002ffe <HAL_UART_IRQHandler+0xf6>
 8002fda:	239c      	movs	r3, #156	; 0x9c
 8002fdc:	18fb      	adds	r3, r7, r3
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d00b      	beq.n	8002ffe <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2202      	movs	r2, #2
 8002fec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2280      	movs	r2, #128	; 0x80
 8002ff2:	589b      	ldr	r3, [r3, r2]
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2180      	movs	r1, #128	; 0x80
 8002ffc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ffe:	23a4      	movs	r3, #164	; 0xa4
 8003000:	18fb      	adds	r3, r7, r3
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2204      	movs	r2, #4
 8003006:	4013      	ands	r3, r2
 8003008:	d011      	beq.n	800302e <HAL_UART_IRQHandler+0x126>
 800300a:	239c      	movs	r3, #156	; 0x9c
 800300c:	18fb      	adds	r3, r7, r3
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2201      	movs	r2, #1
 8003012:	4013      	ands	r3, r2
 8003014:	d00b      	beq.n	800302e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2204      	movs	r2, #4
 800301c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2280      	movs	r2, #128	; 0x80
 8003022:	589b      	ldr	r3, [r3, r2]
 8003024:	2202      	movs	r2, #2
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2180      	movs	r1, #128	; 0x80
 800302c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800302e:	23a4      	movs	r3, #164	; 0xa4
 8003030:	18fb      	adds	r3, r7, r3
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2208      	movs	r2, #8
 8003036:	4013      	ands	r3, r2
 8003038:	d017      	beq.n	800306a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800303a:	23a0      	movs	r3, #160	; 0xa0
 800303c:	18fb      	adds	r3, r7, r3
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2220      	movs	r2, #32
 8003042:	4013      	ands	r3, r2
 8003044:	d105      	bne.n	8003052 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003046:	239c      	movs	r3, #156	; 0x9c
 8003048:	18fb      	adds	r3, r7, r3
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2201      	movs	r2, #1
 800304e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003050:	d00b      	beq.n	800306a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2208      	movs	r2, #8
 8003058:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2280      	movs	r2, #128	; 0x80
 800305e:	589b      	ldr	r3, [r3, r2]
 8003060:	2208      	movs	r2, #8
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2180      	movs	r1, #128	; 0x80
 8003068:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800306a:	23a4      	movs	r3, #164	; 0xa4
 800306c:	18fb      	adds	r3, r7, r3
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	2380      	movs	r3, #128	; 0x80
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	4013      	ands	r3, r2
 8003076:	d013      	beq.n	80030a0 <HAL_UART_IRQHandler+0x198>
 8003078:	23a0      	movs	r3, #160	; 0xa0
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	2380      	movs	r3, #128	; 0x80
 8003080:	04db      	lsls	r3, r3, #19
 8003082:	4013      	ands	r3, r2
 8003084:	d00c      	beq.n	80030a0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2280      	movs	r2, #128	; 0x80
 800308c:	0112      	lsls	r2, r2, #4
 800308e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2280      	movs	r2, #128	; 0x80
 8003094:	589b      	ldr	r3, [r3, r2]
 8003096:	2220      	movs	r2, #32
 8003098:	431a      	orrs	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2180      	movs	r1, #128	; 0x80
 800309e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2280      	movs	r2, #128	; 0x80
 80030a4:	589b      	ldr	r3, [r3, r2]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d100      	bne.n	80030ac <HAL_UART_IRQHandler+0x1a4>
 80030aa:	e1f7      	b.n	800349c <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80030ac:	23a4      	movs	r3, #164	; 0xa4
 80030ae:	18fb      	adds	r3, r7, r3
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2220      	movs	r2, #32
 80030b4:	4013      	ands	r3, r2
 80030b6:	d00e      	beq.n	80030d6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030b8:	23a0      	movs	r3, #160	; 0xa0
 80030ba:	18fb      	adds	r3, r7, r3
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2220      	movs	r2, #32
 80030c0:	4013      	ands	r3, r2
 80030c2:	d008      	beq.n	80030d6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d004      	beq.n	80030d6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	0010      	movs	r0, r2
 80030d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2280      	movs	r2, #128	; 0x80
 80030da:	589b      	ldr	r3, [r3, r2]
 80030dc:	2194      	movs	r1, #148	; 0x94
 80030de:	187a      	adds	r2, r7, r1
 80030e0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2240      	movs	r2, #64	; 0x40
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b40      	cmp	r3, #64	; 0x40
 80030ee:	d004      	beq.n	80030fa <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80030f0:	187b      	adds	r3, r7, r1
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2228      	movs	r2, #40	; 0x28
 80030f6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030f8:	d047      	beq.n	800318a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	0018      	movs	r0, r3
 80030fe:	f000 fcf7 	bl	8003af0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2240      	movs	r2, #64	; 0x40
 800310a:	4013      	ands	r3, r2
 800310c:	2b40      	cmp	r3, #64	; 0x40
 800310e:	d137      	bne.n	8003180 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003110:	f3ef 8310 	mrs	r3, PRIMASK
 8003114:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003116:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003118:	2090      	movs	r0, #144	; 0x90
 800311a:	183a      	adds	r2, r7, r0
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	2301      	movs	r3, #1
 8003120:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003122:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003124:	f383 8810 	msr	PRIMASK, r3
}
 8003128:	46c0      	nop			; (mov r8, r8)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2140      	movs	r1, #64	; 0x40
 8003136:	438a      	bics	r2, r1
 8003138:	609a      	str	r2, [r3, #8]
 800313a:	183b      	adds	r3, r7, r0
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003140:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003142:	f383 8810 	msr	PRIMASK, r3
}
 8003146:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314c:	2b00      	cmp	r3, #0
 800314e:	d012      	beq.n	8003176 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003154:	4a14      	ldr	r2, [pc, #80]	; (80031a8 <HAL_UART_IRQHandler+0x2a0>)
 8003156:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	0018      	movs	r0, r3
 800315e:	f7fe fe95 	bl	8001e8c <HAL_DMA_Abort_IT>
 8003162:	1e03      	subs	r3, r0, #0
 8003164:	d01a      	beq.n	800319c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003170:	0018      	movs	r0, r3
 8003172:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003174:	e012      	b.n	800319c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	0018      	movs	r0, r3
 800317a:	f000 f9a5 	bl	80034c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800317e:	e00d      	b.n	800319c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	0018      	movs	r0, r3
 8003184:	f000 f9a0 	bl	80034c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003188:	e008      	b.n	800319c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	0018      	movs	r0, r3
 800318e:	f000 f99b 	bl	80034c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2280      	movs	r2, #128	; 0x80
 8003196:	2100      	movs	r1, #0
 8003198:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800319a:	e17f      	b.n	800349c <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800319c:	46c0      	nop			; (mov r8, r8)
    return;
 800319e:	e17d      	b.n	800349c <HAL_UART_IRQHandler+0x594>
 80031a0:	0000080f 	.word	0x0000080f
 80031a4:	04000120 	.word	0x04000120
 80031a8:	08003bb5 	.word	0x08003bb5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d000      	beq.n	80031b6 <HAL_UART_IRQHandler+0x2ae>
 80031b4:	e131      	b.n	800341a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80031b6:	23a4      	movs	r3, #164	; 0xa4
 80031b8:	18fb      	adds	r3, r7, r3
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2210      	movs	r2, #16
 80031be:	4013      	ands	r3, r2
 80031c0:	d100      	bne.n	80031c4 <HAL_UART_IRQHandler+0x2bc>
 80031c2:	e12a      	b.n	800341a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80031c4:	23a0      	movs	r3, #160	; 0xa0
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2210      	movs	r2, #16
 80031cc:	4013      	ands	r3, r2
 80031ce:	d100      	bne.n	80031d2 <HAL_UART_IRQHandler+0x2ca>
 80031d0:	e123      	b.n	800341a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2210      	movs	r2, #16
 80031d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2240      	movs	r2, #64	; 0x40
 80031e2:	4013      	ands	r3, r2
 80031e4:	2b40      	cmp	r3, #64	; 0x40
 80031e6:	d000      	beq.n	80031ea <HAL_UART_IRQHandler+0x2e2>
 80031e8:	e09b      	b.n	8003322 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	217e      	movs	r1, #126	; 0x7e
 80031f4:	187b      	adds	r3, r7, r1
 80031f6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80031f8:	187b      	adds	r3, r7, r1
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d100      	bne.n	8003202 <HAL_UART_IRQHandler+0x2fa>
 8003200:	e14e      	b.n	80034a0 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2258      	movs	r2, #88	; 0x58
 8003206:	5a9b      	ldrh	r3, [r3, r2]
 8003208:	187a      	adds	r2, r7, r1
 800320a:	8812      	ldrh	r2, [r2, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d300      	bcc.n	8003212 <HAL_UART_IRQHandler+0x30a>
 8003210:	e146      	b.n	80034a0 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	187a      	adds	r2, r7, r1
 8003216:	215a      	movs	r1, #90	; 0x5a
 8003218:	8812      	ldrh	r2, [r2, #0]
 800321a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	2b20      	cmp	r3, #32
 8003224:	d06e      	beq.n	8003304 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003226:	f3ef 8310 	mrs	r3, PRIMASK
 800322a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800322c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800322e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003230:	2301      	movs	r3, #1
 8003232:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003236:	f383 8810 	msr	PRIMASK, r3
}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	499a      	ldr	r1, [pc, #616]	; (80034b0 <HAL_UART_IRQHandler+0x5a8>)
 8003248:	400a      	ands	r2, r1
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800324e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003252:	f383 8810 	msr	PRIMASK, r3
}
 8003256:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003258:	f3ef 8310 	mrs	r3, PRIMASK
 800325c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800325e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003260:	677b      	str	r3, [r7, #116]	; 0x74
 8003262:	2301      	movs	r3, #1
 8003264:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003268:	f383 8810 	msr	PRIMASK, r3
}
 800326c:	46c0      	nop			; (mov r8, r8)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2101      	movs	r1, #1
 800327a:	438a      	bics	r2, r1
 800327c:	609a      	str	r2, [r3, #8]
 800327e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003280:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003284:	f383 8810 	msr	PRIMASK, r3
}
 8003288:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800328a:	f3ef 8310 	mrs	r3, PRIMASK
 800328e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003290:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003292:	673b      	str	r3, [r7, #112]	; 0x70
 8003294:	2301      	movs	r3, #1
 8003296:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800329a:	f383 8810 	msr	PRIMASK, r3
}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2140      	movs	r1, #64	; 0x40
 80032ac:	438a      	bics	r2, r1
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032b2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032b6:	f383 8810 	msr	PRIMASK, r3
}
 80032ba:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2220      	movs	r2, #32
 80032c0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032c8:	f3ef 8310 	mrs	r3, PRIMASK
 80032cc:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80032ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032d2:	2301      	movs	r3, #1
 80032d4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032d8:	f383 8810 	msr	PRIMASK, r3
}
 80032dc:	46c0      	nop			; (mov r8, r8)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2110      	movs	r1, #16
 80032ea:	438a      	bics	r2, r1
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f4:	f383 8810 	msr	PRIMASK, r3
}
 80032f8:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	0018      	movs	r0, r3
 8003300:	f7fe fd8c 	bl	8001e1c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2258      	movs	r2, #88	; 0x58
 8003308:	5a9a      	ldrh	r2, [r3, r2]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	215a      	movs	r1, #90	; 0x5a
 800330e:	5a5b      	ldrh	r3, [r3, r1]
 8003310:	b29b      	uxth	r3, r3
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	b29a      	uxth	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	0011      	movs	r1, r2
 800331a:	0018      	movs	r0, r3
 800331c:	f000 f8dc 	bl	80034d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003320:	e0be      	b.n	80034a0 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2258      	movs	r2, #88	; 0x58
 8003326:	5a99      	ldrh	r1, [r3, r2]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	225a      	movs	r2, #90	; 0x5a
 800332c:	5a9b      	ldrh	r3, [r3, r2]
 800332e:	b29a      	uxth	r2, r3
 8003330:	208e      	movs	r0, #142	; 0x8e
 8003332:	183b      	adds	r3, r7, r0
 8003334:	1a8a      	subs	r2, r1, r2
 8003336:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	225a      	movs	r2, #90	; 0x5a
 800333c:	5a9b      	ldrh	r3, [r3, r2]
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d100      	bne.n	8003346 <HAL_UART_IRQHandler+0x43e>
 8003344:	e0ae      	b.n	80034a4 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8003346:	183b      	adds	r3, r7, r0
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d100      	bne.n	8003350 <HAL_UART_IRQHandler+0x448>
 800334e:	e0a9      	b.n	80034a4 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003350:	f3ef 8310 	mrs	r3, PRIMASK
 8003354:	60fb      	str	r3, [r7, #12]
  return(result);
 8003356:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003358:	2488      	movs	r4, #136	; 0x88
 800335a:	193a      	adds	r2, r7, r4
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	2301      	movs	r3, #1
 8003360:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f383 8810 	msr	PRIMASK, r3
}
 8003368:	46c0      	nop			; (mov r8, r8)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	494f      	ldr	r1, [pc, #316]	; (80034b4 <HAL_UART_IRQHandler+0x5ac>)
 8003376:	400a      	ands	r2, r1
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	193b      	adds	r3, r7, r4
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f383 8810 	msr	PRIMASK, r3
}
 8003386:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003388:	f3ef 8310 	mrs	r3, PRIMASK
 800338c:	61bb      	str	r3, [r7, #24]
  return(result);
 800338e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003390:	2484      	movs	r4, #132	; 0x84
 8003392:	193a      	adds	r2, r7, r4
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	2301      	movs	r3, #1
 8003398:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	f383 8810 	msr	PRIMASK, r3
}
 80033a0:	46c0      	nop			; (mov r8, r8)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2101      	movs	r1, #1
 80033ae:	438a      	bics	r2, r1
 80033b0:	609a      	str	r2, [r3, #8]
 80033b2:	193b      	adds	r3, r7, r4
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	f383 8810 	msr	PRIMASK, r3
}
 80033be:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2220      	movs	r2, #32
 80033c4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033d2:	f3ef 8310 	mrs	r3, PRIMASK
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033da:	2480      	movs	r4, #128	; 0x80
 80033dc:	193a      	adds	r2, r7, r4
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	2301      	movs	r3, #1
 80033e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e6:	f383 8810 	msr	PRIMASK, r3
}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2110      	movs	r1, #16
 80033f8:	438a      	bics	r2, r1
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	193b      	adds	r3, r7, r4
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003404:	f383 8810 	msr	PRIMASK, r3
}
 8003408:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800340a:	183b      	adds	r3, r7, r0
 800340c:	881a      	ldrh	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	0011      	movs	r1, r2
 8003412:	0018      	movs	r0, r3
 8003414:	f000 f860 	bl	80034d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003418:	e044      	b.n	80034a4 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800341a:	23a4      	movs	r3, #164	; 0xa4
 800341c:	18fb      	adds	r3, r7, r3
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	2380      	movs	r3, #128	; 0x80
 8003422:	035b      	lsls	r3, r3, #13
 8003424:	4013      	ands	r3, r2
 8003426:	d010      	beq.n	800344a <HAL_UART_IRQHandler+0x542>
 8003428:	239c      	movs	r3, #156	; 0x9c
 800342a:	18fb      	adds	r3, r7, r3
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	2380      	movs	r3, #128	; 0x80
 8003430:	03db      	lsls	r3, r3, #15
 8003432:	4013      	ands	r3, r2
 8003434:	d009      	beq.n	800344a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2280      	movs	r2, #128	; 0x80
 800343c:	0352      	lsls	r2, r2, #13
 800343e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	0018      	movs	r0, r3
 8003444:	f000 fbf8 	bl	8003c38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003448:	e02f      	b.n	80034aa <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800344a:	23a4      	movs	r3, #164	; 0xa4
 800344c:	18fb      	adds	r3, r7, r3
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2280      	movs	r2, #128	; 0x80
 8003452:	4013      	ands	r3, r2
 8003454:	d00f      	beq.n	8003476 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003456:	23a0      	movs	r3, #160	; 0xa0
 8003458:	18fb      	adds	r3, r7, r3
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2280      	movs	r2, #128	; 0x80
 800345e:	4013      	ands	r3, r2
 8003460:	d009      	beq.n	8003476 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003466:	2b00      	cmp	r3, #0
 8003468:	d01e      	beq.n	80034a8 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	0010      	movs	r0, r2
 8003472:	4798      	blx	r3
    }
    return;
 8003474:	e018      	b.n	80034a8 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003476:	23a4      	movs	r3, #164	; 0xa4
 8003478:	18fb      	adds	r3, r7, r3
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2240      	movs	r2, #64	; 0x40
 800347e:	4013      	ands	r3, r2
 8003480:	d013      	beq.n	80034aa <HAL_UART_IRQHandler+0x5a2>
 8003482:	23a0      	movs	r3, #160	; 0xa0
 8003484:	18fb      	adds	r3, r7, r3
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2240      	movs	r2, #64	; 0x40
 800348a:	4013      	ands	r3, r2
 800348c:	d00d      	beq.n	80034aa <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	0018      	movs	r0, r3
 8003492:	f000 fba6 	bl	8003be2 <UART_EndTransmit_IT>
    return;
 8003496:	e008      	b.n	80034aa <HAL_UART_IRQHandler+0x5a2>
      return;
 8003498:	46c0      	nop			; (mov r8, r8)
 800349a:	e006      	b.n	80034aa <HAL_UART_IRQHandler+0x5a2>
    return;
 800349c:	46c0      	nop			; (mov r8, r8)
 800349e:	e004      	b.n	80034aa <HAL_UART_IRQHandler+0x5a2>
      return;
 80034a0:	46c0      	nop			; (mov r8, r8)
 80034a2:	e002      	b.n	80034aa <HAL_UART_IRQHandler+0x5a2>
      return;
 80034a4:	46c0      	nop			; (mov r8, r8)
 80034a6:	e000      	b.n	80034aa <HAL_UART_IRQHandler+0x5a2>
    return;
 80034a8:	46c0      	nop			; (mov r8, r8)
  }

}
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b02b      	add	sp, #172	; 0xac
 80034ae:	bd90      	pop	{r4, r7, pc}
 80034b0:	fffffeff 	.word	0xfffffeff
 80034b4:	fffffedf 	.word	0xfffffedf

080034b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80034c0:	46c0      	nop			; (mov r8, r8)
 80034c2:	46bd      	mov	sp, r7
 80034c4:	b002      	add	sp, #8
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034d0:	46c0      	nop			; (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b002      	add	sp, #8
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	000a      	movs	r2, r1
 80034e2:	1cbb      	adds	r3, r7, #2
 80034e4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	46bd      	mov	sp, r7
 80034ea:	b002      	add	sp, #8
 80034ec:	bd80      	pop	{r7, pc}
	...

080034f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034f8:	231e      	movs	r3, #30
 80034fa:	18fb      	adds	r3, r7, r3
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a8d      	ldr	r2, [pc, #564]	; (8003754 <UART_SetConfig+0x264>)
 8003520:	4013      	ands	r3, r2
 8003522:	0019      	movs	r1, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	430a      	orrs	r2, r1
 800352c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4a88      	ldr	r2, [pc, #544]	; (8003758 <UART_SetConfig+0x268>)
 8003536:	4013      	ands	r3, r2
 8003538:	0019      	movs	r1, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	4a7f      	ldr	r2, [pc, #508]	; (800375c <UART_SetConfig+0x26c>)
 800355e:	4013      	ands	r3, r2
 8003560:	0019      	movs	r1, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	430a      	orrs	r2, r1
 800356a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a7b      	ldr	r2, [pc, #492]	; (8003760 <UART_SetConfig+0x270>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d127      	bne.n	80035c6 <UART_SetConfig+0xd6>
 8003576:	4b7b      	ldr	r3, [pc, #492]	; (8003764 <UART_SetConfig+0x274>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	2203      	movs	r2, #3
 800357c:	4013      	ands	r3, r2
 800357e:	2b03      	cmp	r3, #3
 8003580:	d00d      	beq.n	800359e <UART_SetConfig+0xae>
 8003582:	d81b      	bhi.n	80035bc <UART_SetConfig+0xcc>
 8003584:	2b02      	cmp	r3, #2
 8003586:	d014      	beq.n	80035b2 <UART_SetConfig+0xc2>
 8003588:	d818      	bhi.n	80035bc <UART_SetConfig+0xcc>
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <UART_SetConfig+0xa4>
 800358e:	2b01      	cmp	r3, #1
 8003590:	d00a      	beq.n	80035a8 <UART_SetConfig+0xb8>
 8003592:	e013      	b.n	80035bc <UART_SetConfig+0xcc>
 8003594:	231f      	movs	r3, #31
 8003596:	18fb      	adds	r3, r7, r3
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]
 800359c:	e021      	b.n	80035e2 <UART_SetConfig+0xf2>
 800359e:	231f      	movs	r3, #31
 80035a0:	18fb      	adds	r3, r7, r3
 80035a2:	2202      	movs	r2, #2
 80035a4:	701a      	strb	r2, [r3, #0]
 80035a6:	e01c      	b.n	80035e2 <UART_SetConfig+0xf2>
 80035a8:	231f      	movs	r3, #31
 80035aa:	18fb      	adds	r3, r7, r3
 80035ac:	2204      	movs	r2, #4
 80035ae:	701a      	strb	r2, [r3, #0]
 80035b0:	e017      	b.n	80035e2 <UART_SetConfig+0xf2>
 80035b2:	231f      	movs	r3, #31
 80035b4:	18fb      	adds	r3, r7, r3
 80035b6:	2208      	movs	r2, #8
 80035b8:	701a      	strb	r2, [r3, #0]
 80035ba:	e012      	b.n	80035e2 <UART_SetConfig+0xf2>
 80035bc:	231f      	movs	r3, #31
 80035be:	18fb      	adds	r3, r7, r3
 80035c0:	2210      	movs	r2, #16
 80035c2:	701a      	strb	r2, [r3, #0]
 80035c4:	e00d      	b.n	80035e2 <UART_SetConfig+0xf2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a67      	ldr	r2, [pc, #412]	; (8003768 <UART_SetConfig+0x278>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d104      	bne.n	80035da <UART_SetConfig+0xea>
 80035d0:	231f      	movs	r3, #31
 80035d2:	18fb      	adds	r3, r7, r3
 80035d4:	2200      	movs	r2, #0
 80035d6:	701a      	strb	r2, [r3, #0]
 80035d8:	e003      	b.n	80035e2 <UART_SetConfig+0xf2>
 80035da:	231f      	movs	r3, #31
 80035dc:	18fb      	adds	r3, r7, r3
 80035de:	2210      	movs	r2, #16
 80035e0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69da      	ldr	r2, [r3, #28]
 80035e6:	2380      	movs	r3, #128	; 0x80
 80035e8:	021b      	lsls	r3, r3, #8
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d15d      	bne.n	80036aa <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80035ee:	231f      	movs	r3, #31
 80035f0:	18fb      	adds	r3, r7, r3
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d015      	beq.n	8003624 <UART_SetConfig+0x134>
 80035f8:	dc18      	bgt.n	800362c <UART_SetConfig+0x13c>
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d00d      	beq.n	800361a <UART_SetConfig+0x12a>
 80035fe:	dc15      	bgt.n	800362c <UART_SetConfig+0x13c>
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <UART_SetConfig+0x11a>
 8003604:	2b02      	cmp	r3, #2
 8003606:	d005      	beq.n	8003614 <UART_SetConfig+0x124>
 8003608:	e010      	b.n	800362c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800360a:	f7ff fb69 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 800360e:	0003      	movs	r3, r0
 8003610:	61bb      	str	r3, [r7, #24]
        break;
 8003612:	e012      	b.n	800363a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003614:	4b55      	ldr	r3, [pc, #340]	; (800376c <UART_SetConfig+0x27c>)
 8003616:	61bb      	str	r3, [r7, #24]
        break;
 8003618:	e00f      	b.n	800363a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800361a:	f7ff faf3 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 800361e:	0003      	movs	r3, r0
 8003620:	61bb      	str	r3, [r7, #24]
        break;
 8003622:	e00a      	b.n	800363a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003624:	2380      	movs	r3, #128	; 0x80
 8003626:	021b      	lsls	r3, r3, #8
 8003628:	61bb      	str	r3, [r7, #24]
        break;
 800362a:	e006      	b.n	800363a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003630:	231e      	movs	r3, #30
 8003632:	18fb      	adds	r3, r7, r3
 8003634:	2201      	movs	r2, #1
 8003636:	701a      	strb	r2, [r3, #0]
        break;
 8003638:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d100      	bne.n	8003642 <UART_SetConfig+0x152>
 8003640:	e07b      	b.n	800373a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	005a      	lsls	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	085b      	lsrs	r3, r3, #1
 800364c:	18d2      	adds	r2, r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	0019      	movs	r1, r3
 8003654:	0010      	movs	r0, r2
 8003656:	f7fc fd57 	bl	8000108 <__udivsi3>
 800365a:	0003      	movs	r3, r0
 800365c:	b29b      	uxth	r3, r3
 800365e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	2b0f      	cmp	r3, #15
 8003664:	d91c      	bls.n	80036a0 <UART_SetConfig+0x1b0>
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	2380      	movs	r3, #128	; 0x80
 800366a:	025b      	lsls	r3, r3, #9
 800366c:	429a      	cmp	r2, r3
 800366e:	d217      	bcs.n	80036a0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	b29a      	uxth	r2, r3
 8003674:	200e      	movs	r0, #14
 8003676:	183b      	adds	r3, r7, r0
 8003678:	210f      	movs	r1, #15
 800367a:	438a      	bics	r2, r1
 800367c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	085b      	lsrs	r3, r3, #1
 8003682:	b29b      	uxth	r3, r3
 8003684:	2207      	movs	r2, #7
 8003686:	4013      	ands	r3, r2
 8003688:	b299      	uxth	r1, r3
 800368a:	183b      	adds	r3, r7, r0
 800368c:	183a      	adds	r2, r7, r0
 800368e:	8812      	ldrh	r2, [r2, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	183a      	adds	r2, r7, r0
 800369a:	8812      	ldrh	r2, [r2, #0]
 800369c:	60da      	str	r2, [r3, #12]
 800369e:	e04c      	b.n	800373a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80036a0:	231e      	movs	r3, #30
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	2201      	movs	r2, #1
 80036a6:	701a      	strb	r2, [r3, #0]
 80036a8:	e047      	b.n	800373a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036aa:	231f      	movs	r3, #31
 80036ac:	18fb      	adds	r3, r7, r3
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d015      	beq.n	80036e0 <UART_SetConfig+0x1f0>
 80036b4:	dc18      	bgt.n	80036e8 <UART_SetConfig+0x1f8>
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d00d      	beq.n	80036d6 <UART_SetConfig+0x1e6>
 80036ba:	dc15      	bgt.n	80036e8 <UART_SetConfig+0x1f8>
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d002      	beq.n	80036c6 <UART_SetConfig+0x1d6>
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d005      	beq.n	80036d0 <UART_SetConfig+0x1e0>
 80036c4:	e010      	b.n	80036e8 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036c6:	f7ff fb0b 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 80036ca:	0003      	movs	r3, r0
 80036cc:	61bb      	str	r3, [r7, #24]
        break;
 80036ce:	e012      	b.n	80036f6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036d0:	4b26      	ldr	r3, [pc, #152]	; (800376c <UART_SetConfig+0x27c>)
 80036d2:	61bb      	str	r3, [r7, #24]
        break;
 80036d4:	e00f      	b.n	80036f6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036d6:	f7ff fa95 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 80036da:	0003      	movs	r3, r0
 80036dc:	61bb      	str	r3, [r7, #24]
        break;
 80036de:	e00a      	b.n	80036f6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036e0:	2380      	movs	r3, #128	; 0x80
 80036e2:	021b      	lsls	r3, r3, #8
 80036e4:	61bb      	str	r3, [r7, #24]
        break;
 80036e6:	e006      	b.n	80036f6 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036ec:	231e      	movs	r3, #30
 80036ee:	18fb      	adds	r3, r7, r3
 80036f0:	2201      	movs	r2, #1
 80036f2:	701a      	strb	r2, [r3, #0]
        break;
 80036f4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d01e      	beq.n	800373a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	085a      	lsrs	r2, r3, #1
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	18d2      	adds	r2, r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	0019      	movs	r1, r3
 800370c:	0010      	movs	r0, r2
 800370e:	f7fc fcfb 	bl	8000108 <__udivsi3>
 8003712:	0003      	movs	r3, r0
 8003714:	b29b      	uxth	r3, r3
 8003716:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	2b0f      	cmp	r3, #15
 800371c:	d909      	bls.n	8003732 <UART_SetConfig+0x242>
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	2380      	movs	r3, #128	; 0x80
 8003722:	025b      	lsls	r3, r3, #9
 8003724:	429a      	cmp	r2, r3
 8003726:	d204      	bcs.n	8003732 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	60da      	str	r2, [r3, #12]
 8003730:	e003      	b.n	800373a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003732:	231e      	movs	r3, #30
 8003734:	18fb      	adds	r3, r7, r3
 8003736:	2201      	movs	r2, #1
 8003738:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003746:	231e      	movs	r3, #30
 8003748:	18fb      	adds	r3, r7, r3
 800374a:	781b      	ldrb	r3, [r3, #0]
}
 800374c:	0018      	movs	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	b008      	add	sp, #32
 8003752:	bd80      	pop	{r7, pc}
 8003754:	ffff69f3 	.word	0xffff69f3
 8003758:	ffffcfff 	.word	0xffffcfff
 800375c:	fffff4ff 	.word	0xfffff4ff
 8003760:	40013800 	.word	0x40013800
 8003764:	40021000 	.word	0x40021000
 8003768:	40004400 	.word	0x40004400
 800376c:	007a1200 	.word	0x007a1200

08003770 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	2201      	movs	r2, #1
 800377e:	4013      	ands	r3, r2
 8003780:	d00b      	beq.n	800379a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	4a4a      	ldr	r2, [pc, #296]	; (80038b4 <UART_AdvFeatureConfig+0x144>)
 800378a:	4013      	ands	r3, r2
 800378c:	0019      	movs	r1, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	2202      	movs	r2, #2
 80037a0:	4013      	ands	r3, r2
 80037a2:	d00b      	beq.n	80037bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	4a43      	ldr	r2, [pc, #268]	; (80038b8 <UART_AdvFeatureConfig+0x148>)
 80037ac:	4013      	ands	r3, r2
 80037ae:	0019      	movs	r1, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	2204      	movs	r2, #4
 80037c2:	4013      	ands	r3, r2
 80037c4:	d00b      	beq.n	80037de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	4a3b      	ldr	r2, [pc, #236]	; (80038bc <UART_AdvFeatureConfig+0x14c>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	0019      	movs	r1, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	2208      	movs	r2, #8
 80037e4:	4013      	ands	r3, r2
 80037e6:	d00b      	beq.n	8003800 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	4a34      	ldr	r2, [pc, #208]	; (80038c0 <UART_AdvFeatureConfig+0x150>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	0019      	movs	r1, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	2210      	movs	r2, #16
 8003806:	4013      	ands	r3, r2
 8003808:	d00b      	beq.n	8003822 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	4a2c      	ldr	r2, [pc, #176]	; (80038c4 <UART_AdvFeatureConfig+0x154>)
 8003812:	4013      	ands	r3, r2
 8003814:	0019      	movs	r1, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	2220      	movs	r2, #32
 8003828:	4013      	ands	r3, r2
 800382a:	d00b      	beq.n	8003844 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	4a25      	ldr	r2, [pc, #148]	; (80038c8 <UART_AdvFeatureConfig+0x158>)
 8003834:	4013      	ands	r3, r2
 8003836:	0019      	movs	r1, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	2240      	movs	r2, #64	; 0x40
 800384a:	4013      	ands	r3, r2
 800384c:	d01d      	beq.n	800388a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	4a1d      	ldr	r2, [pc, #116]	; (80038cc <UART_AdvFeatureConfig+0x15c>)
 8003856:	4013      	ands	r3, r2
 8003858:	0019      	movs	r1, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800386a:	2380      	movs	r3, #128	; 0x80
 800386c:	035b      	lsls	r3, r3, #13
 800386e:	429a      	cmp	r2, r3
 8003870:	d10b      	bne.n	800388a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	4a15      	ldr	r2, [pc, #84]	; (80038d0 <UART_AdvFeatureConfig+0x160>)
 800387a:	4013      	ands	r3, r2
 800387c:	0019      	movs	r1, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	2280      	movs	r2, #128	; 0x80
 8003890:	4013      	ands	r3, r2
 8003892:	d00b      	beq.n	80038ac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	4a0e      	ldr	r2, [pc, #56]	; (80038d4 <UART_AdvFeatureConfig+0x164>)
 800389c:	4013      	ands	r3, r2
 800389e:	0019      	movs	r1, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	605a      	str	r2, [r3, #4]
  }
}
 80038ac:	46c0      	nop			; (mov r8, r8)
 80038ae:	46bd      	mov	sp, r7
 80038b0:	b002      	add	sp, #8
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	fffdffff 	.word	0xfffdffff
 80038b8:	fffeffff 	.word	0xfffeffff
 80038bc:	fffbffff 	.word	0xfffbffff
 80038c0:	ffff7fff 	.word	0xffff7fff
 80038c4:	ffffefff 	.word	0xffffefff
 80038c8:	ffffdfff 	.word	0xffffdfff
 80038cc:	ffefffff 	.word	0xffefffff
 80038d0:	ff9fffff 	.word	0xff9fffff
 80038d4:	fff7ffff 	.word	0xfff7ffff

080038d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af02      	add	r7, sp, #8
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2280      	movs	r2, #128	; 0x80
 80038e4:	2100      	movs	r1, #0
 80038e6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038e8:	f7fe f944 	bl	8001b74 <HAL_GetTick>
 80038ec:	0003      	movs	r3, r0
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2208      	movs	r2, #8
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d10c      	bne.n	8003918 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2280      	movs	r2, #128	; 0x80
 8003902:	0391      	lsls	r1, r2, #14
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	4a17      	ldr	r2, [pc, #92]	; (8003964 <UART_CheckIdleState+0x8c>)
 8003908:	9200      	str	r2, [sp, #0]
 800390a:	2200      	movs	r2, #0
 800390c:	f000 f82c 	bl	8003968 <UART_WaitOnFlagUntilTimeout>
 8003910:	1e03      	subs	r3, r0, #0
 8003912:	d001      	beq.n	8003918 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e021      	b.n	800395c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2204      	movs	r2, #4
 8003920:	4013      	ands	r3, r2
 8003922:	2b04      	cmp	r3, #4
 8003924:	d10c      	bne.n	8003940 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2280      	movs	r2, #128	; 0x80
 800392a:	03d1      	lsls	r1, r2, #15
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	4a0d      	ldr	r2, [pc, #52]	; (8003964 <UART_CheckIdleState+0x8c>)
 8003930:	9200      	str	r2, [sp, #0]
 8003932:	2200      	movs	r2, #0
 8003934:	f000 f818 	bl	8003968 <UART_WaitOnFlagUntilTimeout>
 8003938:	1e03      	subs	r3, r0, #0
 800393a:	d001      	beq.n	8003940 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e00d      	b.n	800395c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2220      	movs	r2, #32
 8003944:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2220      	movs	r2, #32
 800394a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2274      	movs	r2, #116	; 0x74
 8003956:	2100      	movs	r1, #0
 8003958:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	0018      	movs	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	b004      	add	sp, #16
 8003962:	bd80      	pop	{r7, pc}
 8003964:	01ffffff 	.word	0x01ffffff

08003968 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b094      	sub	sp, #80	; 0x50
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	1dfb      	adds	r3, r7, #7
 8003976:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003978:	e0a3      	b.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800397c:	3301      	adds	r3, #1
 800397e:	d100      	bne.n	8003982 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003980:	e09f      	b.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003982:	f7fe f8f7 	bl	8001b74 <HAL_GetTick>
 8003986:	0002      	movs	r2, r0
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800398e:	429a      	cmp	r2, r3
 8003990:	d302      	bcc.n	8003998 <UART_WaitOnFlagUntilTimeout+0x30>
 8003992:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003994:	2b00      	cmp	r3, #0
 8003996:	d13d      	bne.n	8003a14 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003998:	f3ef 8310 	mrs	r3, PRIMASK
 800399c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800399e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039a0:	647b      	str	r3, [r7, #68]	; 0x44
 80039a2:	2301      	movs	r3, #1
 80039a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a8:	f383 8810 	msr	PRIMASK, r3
}
 80039ac:	46c0      	nop			; (mov r8, r8)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	494c      	ldr	r1, [pc, #304]	; (8003aec <UART_WaitOnFlagUntilTimeout+0x184>)
 80039ba:	400a      	ands	r2, r1
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039c0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c4:	f383 8810 	msr	PRIMASK, r3
}
 80039c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ca:	f3ef 8310 	mrs	r3, PRIMASK
 80039ce:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80039d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d2:	643b      	str	r3, [r7, #64]	; 0x40
 80039d4:	2301      	movs	r3, #1
 80039d6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039da:	f383 8810 	msr	PRIMASK, r3
}
 80039de:	46c0      	nop			; (mov r8, r8)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2101      	movs	r1, #1
 80039ec:	438a      	bics	r2, r1
 80039ee:	609a      	str	r2, [r3, #8]
 80039f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f6:	f383 8810 	msr	PRIMASK, r3
}
 80039fa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2220      	movs	r2, #32
 8003a00:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2220      	movs	r2, #32
 8003a06:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2274      	movs	r2, #116	; 0x74
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e067      	b.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d050      	beq.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	69da      	ldr	r2, [r3, #28]
 8003a26:	2380      	movs	r3, #128	; 0x80
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	401a      	ands	r2, r3
 8003a2c:	2380      	movs	r3, #128	; 0x80
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d146      	bne.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2280      	movs	r2, #128	; 0x80
 8003a3a:	0112      	lsls	r2, r2, #4
 8003a3c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a3e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a42:	613b      	str	r3, [r7, #16]
  return(result);
 8003a44:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a48:	2301      	movs	r3, #1
 8003a4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f383 8810 	msr	PRIMASK, r3
}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4923      	ldr	r1, [pc, #140]	; (8003aec <UART_WaitOnFlagUntilTimeout+0x184>)
 8003a60:	400a      	ands	r2, r1
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a66:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	f383 8810 	msr	PRIMASK, r3
}
 8003a6e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a70:	f3ef 8310 	mrs	r3, PRIMASK
 8003a74:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a76:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a78:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	f383 8810 	msr	PRIMASK, r3
}
 8003a84:	46c0      	nop			; (mov r8, r8)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2101      	movs	r1, #1
 8003a92:	438a      	bics	r2, r1
 8003a94:	609a      	str	r2, [r3, #8]
 8003a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	f383 8810 	msr	PRIMASK, r3
}
 8003aa0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2280      	movs	r2, #128	; 0x80
 8003ab2:	2120      	movs	r1, #32
 8003ab4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2274      	movs	r2, #116	; 0x74
 8003aba:	2100      	movs	r1, #0
 8003abc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e010      	b.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	4013      	ands	r3, r2
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	425a      	negs	r2, r3
 8003ad2:	4153      	adcs	r3, r2
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	001a      	movs	r2, r3
 8003ad8:	1dfb      	adds	r3, r7, #7
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d100      	bne.n	8003ae2 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003ae0:	e74b      	b.n	800397a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	b014      	add	sp, #80	; 0x50
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	fffffe5f 	.word	0xfffffe5f

08003af0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08e      	sub	sp, #56	; 0x38
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af8:	f3ef 8310 	mrs	r3, PRIMASK
 8003afc:	617b      	str	r3, [r7, #20]
  return(result);
 8003afe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b00:	637b      	str	r3, [r7, #52]	; 0x34
 8003b02:	2301      	movs	r3, #1
 8003b04:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	f383 8810 	msr	PRIMASK, r3
}
 8003b0c:	46c0      	nop			; (mov r8, r8)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4925      	ldr	r1, [pc, #148]	; (8003bb0 <UART_EndRxTransfer+0xc0>)
 8003b1a:	400a      	ands	r2, r1
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	f383 8810 	msr	PRIMASK, r3
}
 8003b28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b2a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b2e:	623b      	str	r3, [r7, #32]
  return(result);
 8003b30:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b32:	633b      	str	r3, [r7, #48]	; 0x30
 8003b34:	2301      	movs	r3, #1
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	f383 8810 	msr	PRIMASK, r3
}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	438a      	bics	r2, r1
 8003b4e:	609a      	str	r2, [r3, #8]
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	f383 8810 	msr	PRIMASK, r3
}
 8003b5a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d118      	bne.n	8003b96 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b64:	f3ef 8310 	mrs	r3, PRIMASK
 8003b68:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b6a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b6e:	2301      	movs	r3, #1
 8003b70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f383 8810 	msr	PRIMASK, r3
}
 8003b78:	46c0      	nop			; (mov r8, r8)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2110      	movs	r1, #16
 8003b86:	438a      	bics	r2, r1
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f383 8810 	msr	PRIMASK, r3
}
 8003b94:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003ba8:	46c0      	nop			; (mov r8, r8)
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b00e      	add	sp, #56	; 0x38
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	fffffedf 	.word	0xfffffedf

08003bb4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	225a      	movs	r2, #90	; 0x5a
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2252      	movs	r2, #82	; 0x52
 8003bce:	2100      	movs	r1, #0
 8003bd0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f7ff fc77 	bl	80034c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	b004      	add	sp, #16
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b086      	sub	sp, #24
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bea:	f3ef 8310 	mrs	r3, PRIMASK
 8003bee:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bf0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f383 8810 	msr	PRIMASK, r3
}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2140      	movs	r1, #64	; 0x40
 8003c0c:	438a      	bics	r2, r1
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	f383 8810 	msr	PRIMASK, r3
}
 8003c1a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f7ff fc44 	bl	80034b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c30:	46c0      	nop			; (mov r8, r8)
 8003c32:	46bd      	mov	sp, r7
 8003c34:	b006      	add	sp, #24
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c40:	46c0      	nop			; (mov r8, r8)
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b002      	add	sp, #8
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <__libc_init_array>:
 8003c48:	b570      	push	{r4, r5, r6, lr}
 8003c4a:	2600      	movs	r6, #0
 8003c4c:	4d0c      	ldr	r5, [pc, #48]	; (8003c80 <__libc_init_array+0x38>)
 8003c4e:	4c0d      	ldr	r4, [pc, #52]	; (8003c84 <__libc_init_array+0x3c>)
 8003c50:	1b64      	subs	r4, r4, r5
 8003c52:	10a4      	asrs	r4, r4, #2
 8003c54:	42a6      	cmp	r6, r4
 8003c56:	d109      	bne.n	8003c6c <__libc_init_array+0x24>
 8003c58:	2600      	movs	r6, #0
 8003c5a:	f000 f821 	bl	8003ca0 <_init>
 8003c5e:	4d0a      	ldr	r5, [pc, #40]	; (8003c88 <__libc_init_array+0x40>)
 8003c60:	4c0a      	ldr	r4, [pc, #40]	; (8003c8c <__libc_init_array+0x44>)
 8003c62:	1b64      	subs	r4, r4, r5
 8003c64:	10a4      	asrs	r4, r4, #2
 8003c66:	42a6      	cmp	r6, r4
 8003c68:	d105      	bne.n	8003c76 <__libc_init_array+0x2e>
 8003c6a:	bd70      	pop	{r4, r5, r6, pc}
 8003c6c:	00b3      	lsls	r3, r6, #2
 8003c6e:	58eb      	ldr	r3, [r5, r3]
 8003c70:	4798      	blx	r3
 8003c72:	3601      	adds	r6, #1
 8003c74:	e7ee      	b.n	8003c54 <__libc_init_array+0xc>
 8003c76:	00b3      	lsls	r3, r6, #2
 8003c78:	58eb      	ldr	r3, [r5, r3]
 8003c7a:	4798      	blx	r3
 8003c7c:	3601      	adds	r6, #1
 8003c7e:	e7f2      	b.n	8003c66 <__libc_init_array+0x1e>
 8003c80:	08003d5c 	.word	0x08003d5c
 8003c84:	08003d5c 	.word	0x08003d5c
 8003c88:	08003d5c 	.word	0x08003d5c
 8003c8c:	08003d60 	.word	0x08003d60

08003c90 <memset>:
 8003c90:	0003      	movs	r3, r0
 8003c92:	1882      	adds	r2, r0, r2
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d100      	bne.n	8003c9a <memset+0xa>
 8003c98:	4770      	bx	lr
 8003c9a:	7019      	strb	r1, [r3, #0]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	e7f9      	b.n	8003c94 <memset+0x4>

08003ca0 <_init>:
 8003ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ca6:	bc08      	pop	{r3}
 8003ca8:	469e      	mov	lr, r3
 8003caa:	4770      	bx	lr

08003cac <_fini>:
 8003cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cae:	46c0      	nop			; (mov r8, r8)
 8003cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cb2:	bc08      	pop	{r3}
 8003cb4:	469e      	mov	lr, r3
 8003cb6:	4770      	bx	lr
